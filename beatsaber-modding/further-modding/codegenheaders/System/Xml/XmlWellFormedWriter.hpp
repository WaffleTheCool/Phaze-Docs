// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
// Including type: System.Xml.ConformanceLevel
#include "System/Xml/ConformanceLevel.hpp"
// Including type: System.Xml.XmlCharType
#include "System/Xml/XmlCharType.hpp"
// Including type: System.Xml.WriteState
#include "System/Xml/WriteState.hpp"
// Including type: System.Xml.XmlSpace
#include "System/Xml/XmlSpace.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: SecureStringHasher
  class SecureStringHasher;
  // Forward declaring type: XmlStandalone
  struct XmlStandalone;
  // Skipping declaration: NamespaceKind because it is already included!
  // Skipping declaration: SpecialAttribute because it is already included!
  // Forward declaring type: XmlWriterSettings
  class XmlWriterSettings;
  // Forward declaring type: XmlRawWriter
  class XmlRawWriter;
  // Forward declaring type: IXmlNamespaceResolver
  class IXmlNamespaceResolver;
  // Forward declaring type: XmlException
  class XmlException;
  // Skipping declaration: State because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlWellFormedWriter
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlWellFormedWriter : public System::Xml::XmlWriter {
    public:
    // Nested type: System::Xml::XmlWellFormedWriter::State
    struct State;
    // Nested type: System::Xml::XmlWellFormedWriter::Token
    struct Token;
    // Nested type: System::Xml::XmlWellFormedWriter::NamespaceResolverProxy
    class NamespaceResolverProxy;
    // Nested type: System::Xml::XmlWellFormedWriter::ElementScope
    struct ElementScope;
    // Nested type: System::Xml::XmlWellFormedWriter::NamespaceKind
    struct NamespaceKind;
    // Nested type: System::Xml::XmlWellFormedWriter::Namespace
    struct Namespace;
    // Nested type: System::Xml::XmlWellFormedWriter::AttrName
    struct AttrName;
    // Nested type: System::Xml::XmlWellFormedWriter::SpecialAttribute
    struct SpecialAttribute;
    // Nested type: System::Xml::XmlWellFormedWriter::AttributeValueCache
    class AttributeValueCache;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlWellFormedWriter/System.Xml.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State Start
      static constexpr const int Start = 0;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Start
      static System::Xml::XmlWellFormedWriter::State _get_Start();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Start
      static void _set_Start(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State TopLevel
      static constexpr const int TopLevel = 1;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State TopLevel
      static System::Xml::XmlWellFormedWriter::State _get_TopLevel();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State TopLevel
      static void _set_TopLevel(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State Document
      static constexpr const int Document = 2;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Document
      static System::Xml::XmlWellFormedWriter::State _get_Document();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Document
      static void _set_Document(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State Element
      static constexpr const int Element = 3;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Element
      static System::Xml::XmlWellFormedWriter::State _get_Element();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Element
      static void _set_Element(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State Content
      static constexpr const int Content = 4;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Content
      static System::Xml::XmlWellFormedWriter::State _get_Content();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Content
      static void _set_Content(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State B64Content
      static constexpr const int B64Content = 5;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State B64Content
      static System::Xml::XmlWellFormedWriter::State _get_B64Content();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State B64Content
      static void _set_B64Content(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State B64Attribute
      static constexpr const int B64Attribute = 6;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State B64Attribute
      static System::Xml::XmlWellFormedWriter::State _get_B64Attribute();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State B64Attribute
      static void _set_B64Attribute(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State AfterRootEle
      static constexpr const int AfterRootEle = 7;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State AfterRootEle
      static System::Xml::XmlWellFormedWriter::State _get_AfterRootEle();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State AfterRootEle
      static void _set_AfterRootEle(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State Attribute
      static constexpr const int Attribute = 8;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Attribute
      static System::Xml::XmlWellFormedWriter::State _get_Attribute();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Attribute
      static void _set_Attribute(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State SpecialAttr
      static constexpr const int SpecialAttr = 9;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State SpecialAttr
      static System::Xml::XmlWellFormedWriter::State _get_SpecialAttr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State SpecialAttr
      static void _set_SpecialAttr(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndDocument
      static constexpr const int EndDocument = 10;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndDocument
      static System::Xml::XmlWellFormedWriter::State _get_EndDocument();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndDocument
      static void _set_EndDocument(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelAttr
      static constexpr const int RootLevelAttr = 11;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelAttr
      static System::Xml::XmlWellFormedWriter::State _get_RootLevelAttr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelAttr
      static void _set_RootLevelAttr(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelSpecAttr
      static constexpr const int RootLevelSpecAttr = 12;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelSpecAttr
      static System::Xml::XmlWellFormedWriter::State _get_RootLevelSpecAttr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelSpecAttr
      static void _set_RootLevelSpecAttr(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelB64Attr
      static constexpr const int RootLevelB64Attr = 13;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelB64Attr
      static System::Xml::XmlWellFormedWriter::State _get_RootLevelB64Attr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State RootLevelB64Attr
      static void _set_RootLevelB64Attr(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State AfterRootLevelAttr
      static constexpr const int AfterRootLevelAttr = 14;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State AfterRootLevelAttr
      static System::Xml::XmlWellFormedWriter::State _get_AfterRootLevelAttr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State AfterRootLevelAttr
      static void _set_AfterRootLevelAttr(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State Closed
      static constexpr const int Closed = 15;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Closed
      static System::Xml::XmlWellFormedWriter::State _get_Closed();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Closed
      static void _set_Closed(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State Error
      static constexpr const int Error = 16;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Error
      static System::Xml::XmlWellFormedWriter::State _get_Error();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State Error
      static void _set_Error(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContent
      static constexpr const int StartContent = 101;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContent
      static System::Xml::XmlWellFormedWriter::State _get_StartContent();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContent
      static void _set_StartContent(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContentEle
      static constexpr const int StartContentEle = 102;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContentEle
      static System::Xml::XmlWellFormedWriter::State _get_StartContentEle();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContentEle
      static void _set_StartContentEle(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContentB64
      static constexpr const int StartContentB64 = 103;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContentB64
      static System::Xml::XmlWellFormedWriter::State _get_StartContentB64();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartContentB64
      static void _set_StartContentB64(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartDoc
      static constexpr const int StartDoc = 104;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartDoc
      static System::Xml::XmlWellFormedWriter::State _get_StartDoc();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartDoc
      static void _set_StartDoc(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartDocEle
      static constexpr const int StartDocEle = 106;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartDocEle
      static System::Xml::XmlWellFormedWriter::State _get_StartDocEle();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartDocEle
      static void _set_StartDocEle(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSEle
      static constexpr const int EndAttrSEle = 107;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSEle
      static System::Xml::XmlWellFormedWriter::State _get_EndAttrSEle();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSEle
      static void _set_EndAttrSEle(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrEEle
      static constexpr const int EndAttrEEle = 108;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrEEle
      static System::Xml::XmlWellFormedWriter::State _get_EndAttrEEle();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrEEle
      static void _set_EndAttrEEle(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSCont
      static constexpr const int EndAttrSCont = 109;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSCont
      static System::Xml::XmlWellFormedWriter::State _get_EndAttrSCont();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSCont
      static void _set_EndAttrSCont(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSAttr
      static constexpr const int EndAttrSAttr = 111;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSAttr
      static System::Xml::XmlWellFormedWriter::State _get_EndAttrSAttr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State EndAttrSAttr
      static void _set_EndAttrSAttr(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64Cont
      static constexpr const int PostB64Cont = 112;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64Cont
      static System::Xml::XmlWellFormedWriter::State _get_PostB64Cont();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64Cont
      static void _set_PostB64Cont(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64Attr
      static constexpr const int PostB64Attr = 113;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64Attr
      static System::Xml::XmlWellFormedWriter::State _get_PostB64Attr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64Attr
      static void _set_PostB64Attr(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64RootAttr
      static constexpr const int PostB64RootAttr = 114;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64RootAttr
      static System::Xml::XmlWellFormedWriter::State _get_PostB64RootAttr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State PostB64RootAttr
      static void _set_PostB64RootAttr(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragEle
      static constexpr const int StartFragEle = 115;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragEle
      static System::Xml::XmlWellFormedWriter::State _get_StartFragEle();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragEle
      static void _set_StartFragEle(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragCont
      static constexpr const int StartFragCont = 116;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragCont
      static System::Xml::XmlWellFormedWriter::State _get_StartFragCont();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragCont
      static void _set_StartFragCont(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragB64
      static constexpr const int StartFragB64 = 117;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragB64
      static System::Xml::XmlWellFormedWriter::State _get_StartFragB64();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartFragB64
      static void _set_StartFragB64(System::Xml::XmlWellFormedWriter::State value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartRootLevelAttr
      static constexpr const int StartRootLevelAttr = 118;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartRootLevelAttr
      static System::Xml::XmlWellFormedWriter::State _get_StartRootLevelAttr();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.State StartRootLevelAttr
      static void _set_StartRootLevelAttr(System::Xml::XmlWellFormedWriter::State value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // System.Xml.XmlWellFormedWriter/System.Xml.State
    #pragma pack(pop)
    static check_size<sizeof(XmlWellFormedWriter::State), 0 + sizeof(int)> __System_Xml_XmlWellFormedWriter_StateSizeCheck;
    static_assert(sizeof(XmlWellFormedWriter::State) == 0x4);
    // Size: 0x30
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlWellFormedWriter/System.Xml.ElementScope
    // [TokenAttribute] Offset: FFFFFFFF
    struct ElementScope/*, public System::ValueType*/ {
      public:
      // System.Int32 prevNSTop
      // Size: 0x4
      // Offset: 0x0
      int prevNSTop;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: prevNSTop and: prefix
      char __padding0[0x4] = {};
      // System.String prefix
      // Size: 0x8
      // Offset: 0x8
      ::Il2CppString* prefix;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // System.String localName
      // Size: 0x8
      // Offset: 0x10
      ::Il2CppString* localName;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // System.String namespaceUri
      // Size: 0x8
      // Offset: 0x18
      ::Il2CppString* namespaceUri;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // System.Xml.XmlSpace xmlSpace
      // Size: 0x4
      // Offset: 0x20
      System::Xml::XmlSpace xmlSpace;
      // Field size check
      static_assert(sizeof(System::Xml::XmlSpace) == 0x4);
      // Padding between fields: xmlSpace and: xmlLang
      char __padding4[0x4] = {};
      // System.String xmlLang
      // Size: 0x8
      // Offset: 0x28
      ::Il2CppString* xmlLang;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // Creating value type constructor for type: ElementScope
      constexpr ElementScope(int prevNSTop_ = {}, ::Il2CppString* prefix_ = {}, ::Il2CppString* localName_ = {}, ::Il2CppString* namespaceUri_ = {}, System::Xml::XmlSpace xmlSpace_ = {}, ::Il2CppString* xmlLang_ = {}) noexcept : prevNSTop{prevNSTop_}, prefix{prefix_}, localName{localName_}, namespaceUri{namespaceUri_}, xmlSpace{xmlSpace_}, xmlLang{xmlLang_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Get instance field reference: System.Int32 prevNSTop
      int& dyn_prevNSTop();
      // Get instance field reference: System.String prefix
      ::Il2CppString*& dyn_prefix();
      // Get instance field reference: System.String localName
      ::Il2CppString*& dyn_localName();
      // Get instance field reference: System.String namespaceUri
      ::Il2CppString*& dyn_namespaceUri();
      // Get instance field reference: System.Xml.XmlSpace xmlSpace
      System::Xml::XmlSpace& dyn_xmlSpace();
      // Get instance field reference: System.String xmlLang
      ::Il2CppString*& dyn_xmlLang();
      // System.Void Set(System.String prefix, System.String localName, System.String namespaceUri, System.Int32 prevNSTop)
      // Offset: 0x23EC30C
      void Set(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceUri, int prevNSTop);
      // System.Void WriteEndElement(System.Xml.XmlRawWriter rawWriter)
      // Offset: 0x23EC328
      void WriteEndElement(System::Xml::XmlRawWriter* rawWriter);
      // System.Void WriteFullEndElement(System.Xml.XmlRawWriter rawWriter)
      // Offset: 0x23EC358
      void WriteFullEndElement(System::Xml::XmlRawWriter* rawWriter);
    }; // System.Xml.XmlWellFormedWriter/System.Xml.ElementScope
    #pragma pack(pop)
    static check_size<sizeof(XmlWellFormedWriter::ElementScope), 40 + sizeof(::Il2CppString*)> __System_Xml_XmlWellFormedWriter_ElementScopeSizeCheck;
    static_assert(sizeof(XmlWellFormedWriter::ElementScope) == 0x30);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind
    // [TokenAttribute] Offset: FFFFFFFF
    struct NamespaceKind/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: NamespaceKind
      constexpr NamespaceKind(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Written
      static constexpr const int Written = 0;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Written
      static System::Xml::XmlWellFormedWriter::NamespaceKind _get_Written();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Written
      static void _set_Written(System::Xml::XmlWellFormedWriter::NamespaceKind value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind NeedToWrite
      static constexpr const int NeedToWrite = 1;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind NeedToWrite
      static System::Xml::XmlWellFormedWriter::NamespaceKind _get_NeedToWrite();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind NeedToWrite
      static void _set_NeedToWrite(System::Xml::XmlWellFormedWriter::NamespaceKind value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Implied
      static constexpr const int Implied = 2;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Implied
      static System::Xml::XmlWellFormedWriter::NamespaceKind _get_Implied();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Implied
      static void _set_Implied(System::Xml::XmlWellFormedWriter::NamespaceKind value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Special
      static constexpr const int Special = 3;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Special
      static System::Xml::XmlWellFormedWriter::NamespaceKind _get_Special();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind Special
      static void _set_Special(System::Xml::XmlWellFormedWriter::NamespaceKind value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind
    #pragma pack(pop)
    static check_size<sizeof(XmlWellFormedWriter::NamespaceKind), 0 + sizeof(int)> __System_Xml_XmlWellFormedWriter_NamespaceKindSizeCheck;
    static_assert(sizeof(XmlWellFormedWriter::NamespaceKind) == 0x4);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlWellFormedWriter/System.Xml.Namespace
    // [TokenAttribute] Offset: FFFFFFFF
    struct Namespace/*, public System::ValueType*/ {
      public:
      // System.String prefix
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppString* prefix;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // System.String namespaceUri
      // Size: 0x8
      // Offset: 0x8
      ::Il2CppString* namespaceUri;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind kind
      // Size: 0x4
      // Offset: 0x10
      System::Xml::XmlWellFormedWriter::NamespaceKind kind;
      // Field size check
      static_assert(sizeof(System::Xml::XmlWellFormedWriter::NamespaceKind) == 0x4);
      // System.Int32 prevNsIndex
      // Size: 0x4
      // Offset: 0x14
      int prevNsIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Namespace
      constexpr Namespace(::Il2CppString* prefix_ = {}, ::Il2CppString* namespaceUri_ = {}, System::Xml::XmlWellFormedWriter::NamespaceKind kind_ = {}, int prevNsIndex_ = {}) noexcept : prefix{prefix_}, namespaceUri{namespaceUri_}, kind{kind_}, prevNsIndex{prevNsIndex_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Get instance field reference: System.String prefix
      ::Il2CppString*& dyn_prefix();
      // Get instance field reference: System.String namespaceUri
      ::Il2CppString*& dyn_namespaceUri();
      // Get instance field reference: System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind kind
      System::Xml::XmlWellFormedWriter::NamespaceKind& dyn_kind();
      // Get instance field reference: System.Int32 prevNsIndex
      int& dyn_prevNsIndex();
      // System.Void Set(System.String prefix, System.String namespaceUri, System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind kind)
      // Offset: 0x23EC388
      void Set(::Il2CppString* prefix, ::Il2CppString* namespaceUri, System::Xml::XmlWellFormedWriter::NamespaceKind kind);
      // System.Void WriteDecl(System.Xml.XmlWriter writer, System.Xml.XmlRawWriter rawWriter)
      // Offset: 0x23EC398
      void WriteDecl(System::Xml::XmlWriter* writer, System::Xml::XmlRawWriter* rawWriter);
    }; // System.Xml.XmlWellFormedWriter/System.Xml.Namespace
    #pragma pack(pop)
    static check_size<sizeof(XmlWellFormedWriter::Namespace), 20 + sizeof(int)> __System_Xml_XmlWellFormedWriter_NamespaceSizeCheck;
    static_assert(sizeof(XmlWellFormedWriter::Namespace) == 0x18);
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlWellFormedWriter/System.Xml.AttrName
    // [TokenAttribute] Offset: FFFFFFFF
    struct AttrName/*, public System::ValueType*/ {
      public:
      // System.String prefix
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppString* prefix;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // System.String namespaceUri
      // Size: 0x8
      // Offset: 0x8
      ::Il2CppString* namespaceUri;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // System.String localName
      // Size: 0x8
      // Offset: 0x10
      ::Il2CppString* localName;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // System.Int32 prev
      // Size: 0x4
      // Offset: 0x18
      int prev;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: AttrName
      constexpr AttrName(::Il2CppString* prefix_ = {}, ::Il2CppString* namespaceUri_ = {}, ::Il2CppString* localName_ = {}, int prev_ = {}) noexcept : prefix{prefix_}, namespaceUri{namespaceUri_}, localName{localName_}, prev{prev_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Get instance field reference: System.String prefix
      ::Il2CppString*& dyn_prefix();
      // Get instance field reference: System.String namespaceUri
      ::Il2CppString*& dyn_namespaceUri();
      // Get instance field reference: System.String localName
      ::Il2CppString*& dyn_localName();
      // Get instance field reference: System.Int32 prev
      int& dyn_prev();
      // System.Void Set(System.String prefix, System.String localName, System.String namespaceUri)
      // Offset: 0x23EB248
      void Set(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceUri);
      // System.Boolean IsDuplicate(System.String prefix, System.String localName, System.String namespaceUri)
      // Offset: 0x23EB258
      bool IsDuplicate(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceUri);
    }; // System.Xml.XmlWellFormedWriter/System.Xml.AttrName
    #pragma pack(pop)
    static check_size<sizeof(XmlWellFormedWriter::AttrName), 24 + sizeof(int)> __System_Xml_XmlWellFormedWriter_AttrNameSizeCheck;
    static_assert(sizeof(XmlWellFormedWriter::AttrName) == 0x1C);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpecialAttribute/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: SpecialAttribute
      constexpr SpecialAttribute(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute No
      static constexpr const int No = 0;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute No
      static System::Xml::XmlWellFormedWriter::SpecialAttribute _get_No();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute No
      static void _set_No(System::Xml::XmlWellFormedWriter::SpecialAttribute value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute DefaultXmlns
      static constexpr const int DefaultXmlns = 1;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute DefaultXmlns
      static System::Xml::XmlWellFormedWriter::SpecialAttribute _get_DefaultXmlns();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute DefaultXmlns
      static void _set_DefaultXmlns(System::Xml::XmlWellFormedWriter::SpecialAttribute value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute PrefixedXmlns
      static constexpr const int PrefixedXmlns = 2;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute PrefixedXmlns
      static System::Xml::XmlWellFormedWriter::SpecialAttribute _get_PrefixedXmlns();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute PrefixedXmlns
      static void _set_PrefixedXmlns(System::Xml::XmlWellFormedWriter::SpecialAttribute value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute XmlSpace
      static constexpr const int XmlSpace = 3;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute XmlSpace
      static System::Xml::XmlWellFormedWriter::SpecialAttribute _get_XmlSpace();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute XmlSpace
      static void _set_XmlSpace(System::Xml::XmlWellFormedWriter::SpecialAttribute value);
      // static field const value: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute XmlLang
      static constexpr const int XmlLang = 4;
      // Get static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute XmlLang
      static System::Xml::XmlWellFormedWriter::SpecialAttribute _get_XmlLang();
      // Set static field: static public System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute XmlLang
      static void _set_XmlLang(System::Xml::XmlWellFormedWriter::SpecialAttribute value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute
    #pragma pack(pop)
    static check_size<sizeof(XmlWellFormedWriter::SpecialAttribute), 0 + sizeof(int)> __System_Xml_XmlWellFormedWriter_SpecialAttributeSizeCheck;
    static_assert(sizeof(XmlWellFormedWriter::SpecialAttribute) == 0x4);
    // private System.Xml.XmlWriter writer
    // Size: 0x8
    // Offset: 0x10
    System::Xml::XmlWriter* writer;
    // Field size check
    static_assert(sizeof(System::Xml::XmlWriter*) == 0x8);
    // private System.Xml.XmlRawWriter rawWriter
    // Size: 0x8
    // Offset: 0x18
    System::Xml::XmlRawWriter* rawWriter;
    // Field size check
    static_assert(sizeof(System::Xml::XmlRawWriter*) == 0x8);
    // private System.Xml.IXmlNamespaceResolver predefinedNamespaces
    // Size: 0x8
    // Offset: 0x20
    System::Xml::IXmlNamespaceResolver* predefinedNamespaces;
    // Field size check
    static_assert(sizeof(System::Xml::IXmlNamespaceResolver*) == 0x8);
    // private System.Xml.XmlWellFormedWriter/System.Xml.Namespace[] nsStack
    // Size: 0x8
    // Offset: 0x28
    ::Array<System::Xml::XmlWellFormedWriter::Namespace>* nsStack;
    // Field size check
    static_assert(sizeof(::Array<System::Xml::XmlWellFormedWriter::Namespace>*) == 0x8);
    // private System.Int32 nsTop
    // Size: 0x4
    // Offset: 0x30
    int nsTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nsTop and: nsHashtable
    char __padding4[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,System.Int32> nsHashtable
    // Size: 0x8
    // Offset: 0x38
    System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* nsHashtable;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, int>*) == 0x8);
    // private System.Boolean useNsHashtable
    // Size: 0x1
    // Offset: 0x40
    bool useNsHashtable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useNsHashtable and: elemScopeStack
    char __padding6[0x7] = {};
    // private System.Xml.XmlWellFormedWriter/System.Xml.ElementScope[] elemScopeStack
    // Size: 0x8
    // Offset: 0x48
    ::Array<System::Xml::XmlWellFormedWriter::ElementScope>* elemScopeStack;
    // Field size check
    static_assert(sizeof(::Array<System::Xml::XmlWellFormedWriter::ElementScope>*) == 0x8);
    // private System.Int32 elemTop
    // Size: 0x4
    // Offset: 0x50
    int elemTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: elemTop and: attrStack
    char __padding8[0x4] = {};
    // private System.Xml.XmlWellFormedWriter/System.Xml.AttrName[] attrStack
    // Size: 0x8
    // Offset: 0x58
    ::Array<System::Xml::XmlWellFormedWriter::AttrName>* attrStack;
    // Field size check
    static_assert(sizeof(::Array<System::Xml::XmlWellFormedWriter::AttrName>*) == 0x8);
    // private System.Int32 attrCount
    // Size: 0x4
    // Offset: 0x60
    int attrCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: attrCount and: attrHashTable
    char __padding10[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,System.Int32> attrHashTable
    // Size: 0x8
    // Offset: 0x68
    System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* attrHashTable;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, int>*) == 0x8);
    // private System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute specAttr
    // Size: 0x4
    // Offset: 0x70
    System::Xml::XmlWellFormedWriter::SpecialAttribute specAttr;
    // Field size check
    static_assert(sizeof(System::Xml::XmlWellFormedWriter::SpecialAttribute) == 0x4);
    // Padding between fields: specAttr and: attrValueCache
    char __padding12[0x4] = {};
    // private System.Xml.XmlWellFormedWriter/System.Xml.AttributeValueCache attrValueCache
    // Size: 0x8
    // Offset: 0x78
    System::Xml::XmlWellFormedWriter::AttributeValueCache* attrValueCache;
    // Field size check
    static_assert(sizeof(System::Xml::XmlWellFormedWriter::AttributeValueCache*) == 0x8);
    // private System.String curDeclPrefix
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppString* curDeclPrefix;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Xml.XmlWellFormedWriter/System.Xml.State[] stateTable
    // Size: 0x8
    // Offset: 0x88
    ::Array<System::Xml::XmlWellFormedWriter::State>* stateTable;
    // Field size check
    static_assert(sizeof(::Array<System::Xml::XmlWellFormedWriter::State>*) == 0x8);
    // private System.Xml.XmlWellFormedWriter/System.Xml.State currentState
    // Size: 0x4
    // Offset: 0x90
    System::Xml::XmlWellFormedWriter::State currentState;
    // Field size check
    static_assert(sizeof(System::Xml::XmlWellFormedWriter::State) == 0x4);
    // private System.Boolean checkCharacters
    // Size: 0x1
    // Offset: 0x94
    bool checkCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean omitDuplNamespaces
    // Size: 0x1
    // Offset: 0x95
    bool omitDuplNamespaces;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean writeEndDocumentOnClose
    // Size: 0x1
    // Offset: 0x96
    bool writeEndDocumentOnClose;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: writeEndDocumentOnClose and: conformanceLevel
    char __padding19[0x1] = {};
    // private System.Xml.ConformanceLevel conformanceLevel
    // Size: 0x4
    // Offset: 0x98
    System::Xml::ConformanceLevel conformanceLevel;
    // Field size check
    static_assert(sizeof(System::Xml::ConformanceLevel) == 0x4);
    // private System.Boolean dtdWritten
    // Size: 0x1
    // Offset: 0x9C
    bool dtdWritten;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean xmlDeclFollows
    // Size: 0x1
    // Offset: 0x9D
    bool xmlDeclFollows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: xmlDeclFollows and: xmlCharType
    char __padding22[0x2] = {};
    // private System.Xml.XmlCharType xmlCharType
    // Size: 0x8
    // Offset: 0xA0
    System::Xml::XmlCharType xmlCharType;
    // Field size check
    static_assert(sizeof(System::Xml::XmlCharType) == 0x8);
    // private System.Xml.SecureStringHasher hasher
    // Size: 0x8
    // Offset: 0xA8
    System::Xml::SecureStringHasher* hasher;
    // Field size check
    static_assert(sizeof(System::Xml::SecureStringHasher*) == 0x8);
    // Creating value type constructor for type: XmlWellFormedWriter
    XmlWellFormedWriter(System::Xml::XmlWriter* writer_ = {}, System::Xml::XmlRawWriter* rawWriter_ = {}, System::Xml::IXmlNamespaceResolver* predefinedNamespaces_ = {}, ::Array<System::Xml::XmlWellFormedWriter::Namespace>* nsStack_ = {}, int nsTop_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* nsHashtable_ = {}, bool useNsHashtable_ = {}, ::Array<System::Xml::XmlWellFormedWriter::ElementScope>* elemScopeStack_ = {}, int elemTop_ = {}, ::Array<System::Xml::XmlWellFormedWriter::AttrName>* attrStack_ = {}, int attrCount_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* attrHashTable_ = {}, System::Xml::XmlWellFormedWriter::SpecialAttribute specAttr_ = {}, System::Xml::XmlWellFormedWriter::AttributeValueCache* attrValueCache_ = {}, ::Il2CppString* curDeclPrefix_ = {}, ::Array<System::Xml::XmlWellFormedWriter::State>* stateTable_ = {}, System::Xml::XmlWellFormedWriter::State currentState_ = {}, bool checkCharacters_ = {}, bool omitDuplNamespaces_ = {}, bool writeEndDocumentOnClose_ = {}, System::Xml::ConformanceLevel conformanceLevel_ = {}, bool dtdWritten_ = {}, bool xmlDeclFollows_ = {}, System::Xml::XmlCharType xmlCharType_ = {}, System::Xml::SecureStringHasher* hasher_ = {}) noexcept : writer{writer_}, rawWriter{rawWriter_}, predefinedNamespaces{predefinedNamespaces_}, nsStack{nsStack_}, nsTop{nsTop_}, nsHashtable{nsHashtable_}, useNsHashtable{useNsHashtable_}, elemScopeStack{elemScopeStack_}, elemTop{elemTop_}, attrStack{attrStack_}, attrCount{attrCount_}, attrHashTable{attrHashTable_}, specAttr{specAttr_}, attrValueCache{attrValueCache_}, curDeclPrefix{curDeclPrefix_}, stateTable{stateTable_}, currentState{currentState_}, checkCharacters{checkCharacters_}, omitDuplNamespaces{omitDuplNamespaces_}, writeEndDocumentOnClose{writeEndDocumentOnClose_}, conformanceLevel{conformanceLevel_}, dtdWritten{dtdWritten_}, xmlDeclFollows{xmlDeclFollows_}, xmlCharType{xmlCharType_}, hasher{hasher_} {}
    // Get static field: static readonly System.String[] stateName
    static ::Array<::Il2CppString*>* _get_stateName();
    // Set static field: static readonly System.String[] stateName
    static void _set_stateName(::Array<::Il2CppString*>* value);
    // Get static field: static readonly System.String[] tokenName
    static ::Array<::Il2CppString*>* _get_tokenName();
    // Set static field: static readonly System.String[] tokenName
    static void _set_tokenName(::Array<::Il2CppString*>* value);
    // Get static field: static private System.Xml.WriteState[] state2WriteState
    static ::Array<System::Xml::WriteState>* _get_state2WriteState();
    // Set static field: static private System.Xml.WriteState[] state2WriteState
    static void _set_state2WriteState(::Array<System::Xml::WriteState>* value);
    // Get static field: static private readonly System.Xml.XmlWellFormedWriter/System.Xml.State[] StateTableDocument
    static ::Array<System::Xml::XmlWellFormedWriter::State>* _get_StateTableDocument();
    // Set static field: static private readonly System.Xml.XmlWellFormedWriter/System.Xml.State[] StateTableDocument
    static void _set_StateTableDocument(::Array<System::Xml::XmlWellFormedWriter::State>* value);
    // Get static field: static private readonly System.Xml.XmlWellFormedWriter/System.Xml.State[] StateTableAuto
    static ::Array<System::Xml::XmlWellFormedWriter::State>* _get_StateTableAuto();
    // Set static field: static private readonly System.Xml.XmlWellFormedWriter/System.Xml.State[] StateTableAuto
    static void _set_StateTableAuto(::Array<System::Xml::XmlWellFormedWriter::State>* value);
    // Get instance field reference: private System.Xml.XmlWriter writer
    System::Xml::XmlWriter*& dyn_writer();
    // Get instance field reference: private System.Xml.XmlRawWriter rawWriter
    System::Xml::XmlRawWriter*& dyn_rawWriter();
    // Get instance field reference: private System.Xml.IXmlNamespaceResolver predefinedNamespaces
    System::Xml::IXmlNamespaceResolver*& dyn_predefinedNamespaces();
    // Get instance field reference: private System.Xml.XmlWellFormedWriter/System.Xml.Namespace[] nsStack
    ::Array<System::Xml::XmlWellFormedWriter::Namespace>*& dyn_nsStack();
    // Get instance field reference: private System.Int32 nsTop
    int& dyn_nsTop();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Int32> nsHashtable
    System::Collections::Generic::Dictionary_2<::Il2CppString*, int>*& dyn_nsHashtable();
    // Get instance field reference: private System.Boolean useNsHashtable
    bool& dyn_useNsHashtable();
    // Get instance field reference: private System.Xml.XmlWellFormedWriter/System.Xml.ElementScope[] elemScopeStack
    ::Array<System::Xml::XmlWellFormedWriter::ElementScope>*& dyn_elemScopeStack();
    // Get instance field reference: private System.Int32 elemTop
    int& dyn_elemTop();
    // Get instance field reference: private System.Xml.XmlWellFormedWriter/System.Xml.AttrName[] attrStack
    ::Array<System::Xml::XmlWellFormedWriter::AttrName>*& dyn_attrStack();
    // Get instance field reference: private System.Int32 attrCount
    int& dyn_attrCount();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Int32> attrHashTable
    System::Collections::Generic::Dictionary_2<::Il2CppString*, int>*& dyn_attrHashTable();
    // Get instance field reference: private System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute specAttr
    System::Xml::XmlWellFormedWriter::SpecialAttribute& dyn_specAttr();
    // Get instance field reference: private System.Xml.XmlWellFormedWriter/System.Xml.AttributeValueCache attrValueCache
    System::Xml::XmlWellFormedWriter::AttributeValueCache*& dyn_attrValueCache();
    // Get instance field reference: private System.String curDeclPrefix
    ::Il2CppString*& dyn_curDeclPrefix();
    // Get instance field reference: private System.Xml.XmlWellFormedWriter/System.Xml.State[] stateTable
    ::Array<System::Xml::XmlWellFormedWriter::State>*& dyn_stateTable();
    // Get instance field reference: private System.Xml.XmlWellFormedWriter/System.Xml.State currentState
    System::Xml::XmlWellFormedWriter::State& dyn_currentState();
    // Get instance field reference: private System.Boolean checkCharacters
    bool& dyn_checkCharacters();
    // Get instance field reference: private System.Boolean omitDuplNamespaces
    bool& dyn_omitDuplNamespaces();
    // Get instance field reference: private System.Boolean writeEndDocumentOnClose
    bool& dyn_writeEndDocumentOnClose();
    // Get instance field reference: private System.Xml.ConformanceLevel conformanceLevel
    System::Xml::ConformanceLevel& dyn_conformanceLevel();
    // Get instance field reference: private System.Boolean dtdWritten
    bool& dyn_dtdWritten();
    // Get instance field reference: private System.Boolean xmlDeclFollows
    bool& dyn_xmlDeclFollows();
    // Get instance field reference: private System.Xml.XmlCharType xmlCharType
    System::Xml::XmlCharType& dyn_xmlCharType();
    // Get instance field reference: private System.Xml.SecureStringHasher hasher
    System::Xml::SecureStringHasher*& dyn_hasher();
    // System.Xml.XmlRawWriter get_RawWriter()
    // Offset: 0x196CB20
    System::Xml::XmlRawWriter* get_RawWriter();
    // private System.Boolean get_SaveAttrValue()
    // Offset: 0x196B3E0
    bool get_SaveAttrValue();
    // private System.Boolean get_InBase64()
    // Offset: 0x196C4C4
    bool get_InBase64();
    // private System.Boolean get_IsClosedOrErrorState()
    // Offset: 0x196CB10
    bool get_IsClosedOrErrorState();
    // System.Void .ctor(System.Xml.XmlWriter writer, System.Xml.XmlWriterSettings settings)
    // Offset: 0x1967850
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlWellFormedWriter* New_ctor(System::Xml::XmlWriter* writer, System::Xml::XmlWriterSettings* settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlWellFormedWriter*, creationType>(writer, settings)));
    }
    // static private System.Void .cctor()
    // Offset: 0x196D5B8
    static void _cctor();
    // private System.Void SetSpecialAttribute(System.Xml.XmlWellFormedWriter/System.Xml.SpecialAttribute special)
    // Offset: 0x1969BD0
    void SetSpecialAttribute(System::Xml::XmlWellFormedWriter::SpecialAttribute special);
    // private System.Void WriteStartDocumentImpl(System.Xml.XmlStandalone standalone)
    // Offset: 0x1967CEC
    void WriteStartDocumentImpl(System::Xml::XmlStandalone standalone);
    // private System.Void StartFragment()
    // Offset: 0x196CB28
    void StartFragment();
    // private System.Void PushNamespaceImplicit(System.String prefix, System.String ns)
    // Offset: 0x1968C44
    void PushNamespaceImplicit(::Il2CppString* prefix, ::Il2CppString* ns);
    // private System.Boolean PushNamespaceExplicit(System.String prefix, System.String ns)
    // Offset: 0x196A8E8
    bool PushNamespaceExplicit(::Il2CppString* prefix, ::Il2CppString* ns);
    // private System.Void AddNamespace(System.String prefix, System.String ns, System.Xml.XmlWellFormedWriter/System.Xml.NamespaceKind kind)
    // Offset: 0x196CC34
    void AddNamespace(::Il2CppString* prefix, ::Il2CppString* ns, System::Xml::XmlWellFormedWriter::NamespaceKind kind);
    // private System.Void AddToNamespaceHashtable(System.Int32 namespaceIndex)
    // Offset: 0x196CEAC
    void AddToNamespaceHashtable(int namespaceIndex);
    // private System.Int32 LookupNamespaceIndex(System.String prefix)
    // Offset: 0x196CB34
    int LookupNamespaceIndex(::Il2CppString* prefix);
    // private System.Void PopNamespaces(System.Int32 indexFrom, System.Int32 indexTo)
    // Offset: 0x196926C
    void PopNamespaces(int indexFrom, int indexTo);
    // static private System.Xml.XmlException DupAttrException(System.String prefix, System.String localName)
    // Offset: 0x196CDB0
    static System::Xml::XmlException* DupAttrException(::Il2CppString* prefix, ::Il2CppString* localName);
    // private System.Void AdvanceState(System.Xml.XmlWellFormedWriter/System.Xml.Token token)
    // Offset: 0x19682E0
    void AdvanceState(System::Xml::XmlWellFormedWriter::Token token);
    // private System.Void StartElementContent()
    // Offset: 0x196D22C
    void StartElementContent();
    // static private System.String GetStateName(System.Xml.XmlWellFormedWriter/System.Xml.State state)
    // Offset: 0x196CFA0
    static ::Il2CppString* GetStateName(System::Xml::XmlWellFormedWriter::State state);
    // System.String LookupNamespace(System.String prefix)
    // Offset: 0x1968AE0
    ::Il2CppString* LookupNamespace(::Il2CppString* prefix);
    // private System.String LookupLocalNamespace(System.String prefix)
    // Offset: 0x1969DAC
    ::Il2CppString* LookupLocalNamespace(::Il2CppString* prefix);
    // private System.String GeneratePrefix()
    // Offset: 0x1969C6C
    ::Il2CppString* GeneratePrefix();
    // private System.Void CheckNCName(System.String ncname)
    // Offset: 0x196898C
    void CheckNCName(::Il2CppString* ncname);
    // static private System.Exception InvalidCharsException(System.String name, System.Int32 badCharIndex)
    // Offset: 0x196D304
    static System::Exception* InvalidCharsException(::Il2CppString* name, int badCharIndex);
    // private System.Void ThrowInvalidStateTransition(System.Xml.XmlWellFormedWriter/System.Xml.Token token, System.Xml.XmlWellFormedWriter/System.Xml.State currentState)
    // Offset: 0x196D04C
    void ThrowInvalidStateTransition(System::Xml::XmlWellFormedWriter::Token token, System::Xml::XmlWellFormedWriter::State currentState);
    // private System.Void AddAttribute(System.String prefix, System.String localName, System.String namespaceName)
    // Offset: 0x1969E88
    void AddAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceName);
    // private System.Void AddToAttrHashTable(System.Int32 attributeIndex)
    // Offset: 0x196D470
    void AddToAttrHashTable(int attributeIndex);
    // public override System.Xml.WriteState get_WriteState()
    // Offset: 0x1967C38
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Xml.WriteState XmlWriter::get_WriteState()
    System::Xml::WriteState get_WriteState();
    // public override System.Void WriteStartDocument()
    // Offset: 0x1967CE4
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartDocument()
    void WriteStartDocument();
    // public override System.Void WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
    // Offset: 0x1967EA0
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
    void WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset);
    // public override System.Void WriteStartElement(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x196860C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartElement(System.String prefix, System.String localName, System.String ns)
    void WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns);
    // public override System.Void WriteEndElement()
    // Offset: 0x1969044
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEndElement()
    void WriteEndElement();
    // public override System.Void WriteFullEndElement()
    // Offset: 0x1969344
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteFullEndElement()
    void WriteFullEndElement();
    // public override System.Void WriteStartAttribute(System.String prefix, System.String localName, System.String namespaceName)
    // Offset: 0x196956C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartAttribute(System.String prefix, System.String localName, System.String namespaceName)
    void WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceName);
    // public override System.Void WriteEndAttribute()
    // Offset: 0x196A100
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEndAttribute()
    void WriteEndAttribute();
    // public override System.Void WriteCData(System.String text)
    // Offset: 0x196ADA4
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteCData(System.String text)
    void WriteCData(::Il2CppString* text);
    // public override System.Void WriteComment(System.String text)
    // Offset: 0x196AEBC
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteComment(System.String text)
    void WriteComment(::Il2CppString* text);
    // public override System.Void WriteProcessingInstruction(System.String name, System.String text)
    // Offset: 0x196AFD8
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteProcessingInstruction(System.String name, System.String text)
    void WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text);
    // public override System.Void WriteEntityRef(System.String name)
    // Offset: 0x196B258
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEntityRef(System.String name)
    void WriteEntityRef(::Il2CppString* name);
    // public override System.Void WriteCharEntity(System.Char ch)
    // Offset: 0x196B3F0
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteCharEntity(System.Char ch)
    void WriteCharEntity(::Il2CppChar ch);
    // public override System.Void WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
    // Offset: 0x196B598
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
    void WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar);
    // public override System.Void WriteWhitespace(System.String ws)
    // Offset: 0x196B750
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteWhitespace(System.String ws)
    void WriteWhitespace(::Il2CppString* ws);
    // public override System.Void WriteString(System.String text)
    // Offset: 0x196B900
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteString(System.String text)
    void WriteString(::Il2CppString* text);
    // public override System.Void WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x196BA30
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void WriteChars(::Array<::Il2CppChar>* buffer, int index, int count);
    // public override System.Void WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x196BC98
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count);
    // public override System.Void WriteRaw(System.String data)
    // Offset: 0x196BF00
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteRaw(System.String data)
    void WriteRaw(::Il2CppString* data);
    // public override System.Void WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x196C030
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    void WriteBase64(::Array<uint8_t>* buffer, int index, int count);
    // public override System.Void Close()
    // Offset: 0x196C268
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Close()
    void Close();
    // public override System.Void Flush()
    // Offset: 0x196C4F0
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Flush()
    void Flush();
    // public override System.String LookupPrefix(System.String ns)
    // Offset: 0x196C5DC
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.String XmlWriter::LookupPrefix(System.String ns)
    ::Il2CppString* LookupPrefix(::Il2CppString* ns);
    // public override System.Void WriteValue(System.String value)
    // Offset: 0x196C88C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteValue(System.String value)
    void WriteValue(::Il2CppString* value);
    // public override System.Void WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x196C9C8
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    void WriteBinHex(::Array<uint8_t>* buffer, int index, int count);
  }; // System.Xml.XmlWellFormedWriter
  #pragma pack(pop)
  static check_size<sizeof(XmlWellFormedWriter), 168 + sizeof(System::Xml::SecureStringHasher*)> __System_Xml_XmlWellFormedWriterSizeCheck;
  static_assert(sizeof(XmlWellFormedWriter) == 0xB0);
}
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlWellFormedWriter*, "System.Xml", "XmlWellFormedWriter");
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlWellFormedWriter::State, "System.Xml", "XmlWellFormedWriter/State");
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlWellFormedWriter::ElementScope, "System.Xml", "XmlWellFormedWriter/ElementScope");
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlWellFormedWriter::NamespaceKind, "System.Xml", "XmlWellFormedWriter/NamespaceKind");
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlWellFormedWriter::Namespace, "System.Xml", "XmlWellFormedWriter/Namespace");
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlWellFormedWriter::AttrName, "System.Xml", "XmlWellFormedWriter/AttrName");
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlWellFormedWriter::SpecialAttribute, "System.Xml", "XmlWellFormedWriter/SpecialAttribute");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::get_RawWriter
// Il2CppName: get_RawWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlRawWriter* (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::get_RawWriter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "get_RawWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::get_SaveAttrValue
// Il2CppName: get_SaveAttrValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::get_SaveAttrValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "get_SaveAttrValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::get_InBase64
// Il2CppName: get_InBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::get_InBase64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "get_InBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::get_IsClosedOrErrorState
// Il2CppName: get_IsClosedOrErrorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::get_IsClosedOrErrorState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "get_IsClosedOrErrorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::XmlWellFormedWriter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::SetSpecialAttribute
// Il2CppName: SetSpecialAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(System::Xml::XmlWellFormedWriter::SpecialAttribute)>(&System::Xml::XmlWellFormedWriter::SetSpecialAttribute)> {
  static const MethodInfo* get() {
    static auto* special = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWellFormedWriter/SpecialAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "SetSpecialAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{special});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteStartDocumentImpl
// Il2CppName: WriteStartDocumentImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(System::Xml::XmlStandalone)>(&System::Xml::XmlWellFormedWriter::WriteStartDocumentImpl)> {
  static const MethodInfo* get() {
    static auto* standalone = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlStandalone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteStartDocumentImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{standalone});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::StartFragment
// Il2CppName: StartFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::StartFragment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "StartFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::PushNamespaceImplicit
// Il2CppName: PushNamespaceImplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::PushNamespaceImplicit)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "PushNamespaceImplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::PushNamespaceExplicit
// Il2CppName: PushNamespaceExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::PushNamespaceExplicit)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "PushNamespaceExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::AddNamespace
// Il2CppName: AddNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, System::Xml::XmlWellFormedWriter::NamespaceKind)>(&System::Xml::XmlWellFormedWriter::AddNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* kind = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWellFormedWriter/NamespaceKind")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "AddNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns, kind});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::AddToNamespaceHashtable
// Il2CppName: AddToNamespaceHashtable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(int)>(&System::Xml::XmlWellFormedWriter::AddToNamespaceHashtable)> {
  static const MethodInfo* get() {
    static auto* namespaceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "AddToNamespaceHashtable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceIndex});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::LookupNamespaceIndex
// Il2CppName: LookupNamespaceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::LookupNamespaceIndex)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "LookupNamespaceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::PopNamespaces
// Il2CppName: PopNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(int, int)>(&System::Xml::XmlWellFormedWriter::PopNamespaces)> {
  static const MethodInfo* get() {
    static auto* indexFrom = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indexTo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "PopNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexFrom, indexTo});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::DupAttrException
// Il2CppName: DupAttrException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlException* (*)(::Il2CppString*, ::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::DupAttrException)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "DupAttrException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::AdvanceState
// Il2CppName: AdvanceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(System::Xml::XmlWellFormedWriter::Token)>(&System::Xml::XmlWellFormedWriter::AdvanceState)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWellFormedWriter/Token")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "AdvanceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::StartElementContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::GetStateName
// Il2CppName: GetStateName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Xml::XmlWellFormedWriter::State)>(&System::Xml::XmlWellFormedWriter::GetStateName)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWellFormedWriter/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "GetStateName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::LookupLocalNamespace
// Il2CppName: LookupLocalNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::LookupLocalNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "LookupLocalNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::GeneratePrefix
// Il2CppName: GeneratePrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::GeneratePrefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "GeneratePrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::CheckNCName
// Il2CppName: CheckNCName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::CheckNCName)> {
  static const MethodInfo* get() {
    static auto* ncname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "CheckNCName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ncname});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::InvalidCharsException
// Il2CppName: InvalidCharsException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppString*, int)>(&System::Xml::XmlWellFormedWriter::InvalidCharsException)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* badCharIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "InvalidCharsException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, badCharIndex});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::ThrowInvalidStateTransition
// Il2CppName: ThrowInvalidStateTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(System::Xml::XmlWellFormedWriter::Token, System::Xml::XmlWellFormedWriter::State)>(&System::Xml::XmlWellFormedWriter::ThrowInvalidStateTransition)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWellFormedWriter/Token")->byval_arg;
    static auto* currentState = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWellFormedWriter/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "ThrowInvalidStateTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token, currentState});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::AddToAttrHashTable
// Il2CppName: AddToAttrHashTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(int)>(&System::Xml::XmlWellFormedWriter::AddToAttrHashTable)> {
  static const MethodInfo* get() {
    static auto* attributeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "AddToAttrHashTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeIndex});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::get_WriteState
// Il2CppName: get_WriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::WriteState (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::get_WriteState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "get_WriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteStartDocument
// Il2CppName: WriteStartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::WriteStartDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteStartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteDocType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pubid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sysid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, pubid, sysid, subset});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::WriteEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::WriteFullEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteStartAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::WriteEndAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteCData)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteComment)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteProcessingInstruction)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteEntityRef)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppChar)>(&System::Xml::XmlWellFormedWriter::WriteCharEntity)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppChar, ::Il2CppChar)>(&System::Xml::XmlWellFormedWriter::WriteSurrogateCharEntity)> {
  static const MethodInfo* get() {
    static auto* lowChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* highChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lowChar, highChar});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteWhitespace)> {
  static const MethodInfo* get() {
    static auto* ws = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ws});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteString)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Array<::Il2CppChar>*, int, int)>(&System::Xml::XmlWellFormedWriter::WriteChars)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Array<::Il2CppChar>*, int, int)>(&System::Xml::XmlWellFormedWriter::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Array<uint8_t>*, int, int)>(&System::Xml::XmlWellFormedWriter::WriteBase64)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)()>(&System::Xml::XmlWellFormedWriter::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::LookupPrefix)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Il2CppString*)>(&System::Xml::XmlWellFormedWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlWellFormedWriter::WriteBinHex
// Il2CppName: WriteBinHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlWellFormedWriter::*)(::Array<uint8_t>*, int, int)>(&System::Xml::XmlWellFormedWriter::WriteBinHex)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlWellFormedWriter*), "WriteBinHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
