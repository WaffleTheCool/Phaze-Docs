// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: String
  class String;
  // Forward declaring type: DateTime
  struct DateTime;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: IFormatterConverter
  class IFormatterConverter;
  // Forward declaring type: SerializationInfoEnumerator
  class SerializationInfoEnumerator;
}
// Completed forward declares
// Type namespace: System.Runtime.Serialization
namespace System::Runtime::Serialization {
  // Size: 0x5B
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Serialization.SerializationInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: DA30EC
  class SerializationInfo : public ::Il2CppObject {
    public:
    // System.String[] m_members
    // Size: 0x8
    // Offset: 0x10
    ::Array<::Il2CppString*>* m_members;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.Object[] m_data
    // Size: 0x8
    // Offset: 0x18
    ::Array<::Il2CppObject*>* m_data;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppObject*>*) == 0x8);
    // System.Type[] m_types
    // Size: 0x8
    // Offset: 0x20
    ::Array<System::Type*>* m_types;
    // Field size check
    static_assert(sizeof(::Array<System::Type*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Int32> m_nameToIndex
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* m_nameToIndex;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, int>*) == 0x8);
    // System.Int32 m_currMember
    // Size: 0x4
    // Offset: 0x30
    int m_currMember;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_currMember and: m_converter
    char __padding4[0x4] = {};
    // System.Runtime.Serialization.IFormatterConverter m_converter
    // Size: 0x8
    // Offset: 0x38
    System::Runtime::Serialization::IFormatterConverter* m_converter;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::IFormatterConverter*) == 0x8);
    // private System.String m_fullTypeName
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* m_fullTypeName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_assemName
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* m_assemName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Type objectType
    // Size: 0x8
    // Offset: 0x50
    System::Type* objectType;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // private System.Boolean isFullTypeNameSetExplicit
    // Size: 0x1
    // Offset: 0x58
    bool isFullTypeNameSetExplicit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isAssemblyNameSetExplicit
    // Size: 0x1
    // Offset: 0x59
    bool isAssemblyNameSetExplicit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean requireSameTokenInPartialTrust
    // Size: 0x1
    // Offset: 0x5A
    bool requireSameTokenInPartialTrust;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: SerializationInfo
    SerializationInfo(::Array<::Il2CppString*>* m_members_ = {}, ::Array<::Il2CppObject*>* m_data_ = {}, ::Array<System::Type*>* m_types_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* m_nameToIndex_ = {}, int m_currMember_ = {}, System::Runtime::Serialization::IFormatterConverter* m_converter_ = {}, ::Il2CppString* m_fullTypeName_ = {}, ::Il2CppString* m_assemName_ = {}, System::Type* objectType_ = {}, bool isFullTypeNameSetExplicit_ = {}, bool isAssemblyNameSetExplicit_ = {}, bool requireSameTokenInPartialTrust_ = {}) noexcept : m_members{m_members_}, m_data{m_data_}, m_types{m_types_}, m_nameToIndex{m_nameToIndex_}, m_currMember{m_currMember_}, m_converter{m_converter_}, m_fullTypeName{m_fullTypeName_}, m_assemName{m_assemName_}, objectType{objectType_}, isFullTypeNameSetExplicit{isFullTypeNameSetExplicit_}, isAssemblyNameSetExplicit{isAssemblyNameSetExplicit_}, requireSameTokenInPartialTrust{requireSameTokenInPartialTrust_} {}
    // static field const value: static private System.Int32 defaultSize
    static constexpr const int defaultSize = 4;
    // Get static field: static private System.Int32 defaultSize
    static int _get_defaultSize();
    // Set static field: static private System.Int32 defaultSize
    static void _set_defaultSize(int value);
    // static field const value: static private System.String s_mscorlibAssemblySimpleName
    static constexpr const char* s_mscorlibAssemblySimpleName = "mscorlib";
    // Get static field: static private System.String s_mscorlibAssemblySimpleName
    static ::Il2CppString* _get_s_mscorlibAssemblySimpleName();
    // Set static field: static private System.String s_mscorlibAssemblySimpleName
    static void _set_s_mscorlibAssemblySimpleName(::Il2CppString* value);
    // static field const value: static private System.String s_mscorlibFileName
    static constexpr const char* s_mscorlibFileName = "mscorlib.dll";
    // Get static field: static private System.String s_mscorlibFileName
    static ::Il2CppString* _get_s_mscorlibFileName();
    // Set static field: static private System.String s_mscorlibFileName
    static void _set_s_mscorlibFileName(::Il2CppString* value);
    // Get instance field reference: System.String[] m_members
    ::Array<::Il2CppString*>*& dyn_m_members();
    // Get instance field reference: System.Object[] m_data
    ::Array<::Il2CppObject*>*& dyn_m_data();
    // Get instance field reference: System.Type[] m_types
    ::Array<System::Type*>*& dyn_m_types();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Int32> m_nameToIndex
    System::Collections::Generic::Dictionary_2<::Il2CppString*, int>*& dyn_m_nameToIndex();
    // Get instance field reference: System.Int32 m_currMember
    int& dyn_m_currMember();
    // Get instance field reference: System.Runtime.Serialization.IFormatterConverter m_converter
    System::Runtime::Serialization::IFormatterConverter*& dyn_m_converter();
    // Get instance field reference: private System.String m_fullTypeName
    ::Il2CppString*& dyn_m_fullTypeName();
    // Get instance field reference: private System.String m_assemName
    ::Il2CppString*& dyn_m_assemName();
    // Get instance field reference: private System.Type objectType
    System::Type*& dyn_objectType();
    // Get instance field reference: private System.Boolean isFullTypeNameSetExplicit
    bool& dyn_isFullTypeNameSetExplicit();
    // Get instance field reference: private System.Boolean isAssemblyNameSetExplicit
    bool& dyn_isAssemblyNameSetExplicit();
    // Get instance field reference: private System.Boolean requireSameTokenInPartialTrust
    bool& dyn_requireSameTokenInPartialTrust();
    // public System.String get_FullTypeName()
    // Offset: 0x16C3F48
    ::Il2CppString* get_FullTypeName();
    // public System.String get_AssemblyName()
    // Offset: 0x16C3F50
    ::Il2CppString* get_AssemblyName();
    // public System.Int32 get_MemberCount()
    // Offset: 0x16C410C
    int get_MemberCount();
    // public System.Type get_ObjectType()
    // Offset: 0x16C4114
    System::Type* get_ObjectType();
    // public System.Boolean get_IsFullTypeNameSetExplicit()
    // Offset: 0x16C411C
    bool get_IsFullTypeNameSetExplicit();
    // public System.Boolean get_IsAssemblyNameSetExplicit()
    // Offset: 0x16C4124
    bool get_IsAssemblyNameSetExplicit();
    // public System.Void .ctor(System.Type type, System.Runtime.Serialization.IFormatterConverter converter)
    // Offset: 0x16C3DA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SerializationInfo* New_ctor(System::Type* type, System::Runtime::Serialization::IFormatterConverter* converter) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Serialization::SerializationInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SerializationInfo*, creationType>(type, converter)));
    }
    // public System.Void .ctor(System.Type type, System.Runtime.Serialization.IFormatterConverter converter, System.Boolean requireSameTokenInPartialTrust)
    // Offset: 0x16C3DAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SerializationInfo* New_ctor(System::Type* type, System::Runtime::Serialization::IFormatterConverter* converter, bool requireSameTokenInPartialTrust) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Serialization::SerializationInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SerializationInfo*, creationType>(type, converter, requireSameTokenInPartialTrust)));
    }
    // public System.Void SetType(System.Type type)
    // Offset: 0x16C274C
    void SetType(System::Type* type);
    // static private System.Boolean Compare(System.Byte[] a, System.Byte[] b)
    // Offset: 0x16C3F5C
    static bool Compare(::Array<uint8_t>* a, ::Array<uint8_t>* b);
    // static System.Void DemandForUnsafeAssemblyNameAssignments(System.String originalAssemblyName, System.String newAssemblyName)
    // Offset: 0x16C3F58
    static void DemandForUnsafeAssemblyNameAssignments(::Il2CppString* originalAssemblyName, ::Il2CppString* newAssemblyName);
    // static System.Boolean IsAssemblyNameAssignmentSafe(System.String originalAssemblyName, System.String newAssemblyName)
    // Offset: 0x16C3FE8
    static bool IsAssemblyNameAssignmentSafe(::Il2CppString* originalAssemblyName, ::Il2CppString* newAssemblyName);
    // public System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator()
    // Offset: 0x16C412C
    System::Runtime::Serialization::SerializationInfoEnumerator* GetEnumerator();
    // private System.Void ExpandArrays()
    // Offset: 0x16C4224
    void ExpandArrays();
    // public System.Void AddValue(System.String name, System.Object value, System.Type type)
    // Offset: 0x16C2680
    void AddValue(::Il2CppString* name, ::Il2CppObject* value, System::Type* type);
    // public System.Void AddValue(System.String name, System.Object value)
    // Offset: 0x16C44F8
    void AddValue(::Il2CppString* name, ::Il2CppObject* value);
    // public System.Void AddValue(System.String name, System.Boolean value)
    // Offset: 0x16C45B4
    void AddValue(::Il2CppString* name, bool value);
    // public System.Void AddValue(System.String name, System.Char value)
    // Offset: 0x16C4678
    void AddValue(::Il2CppString* name, ::Il2CppChar value);
    // public System.Void AddValue(System.String name, System.Byte value)
    // Offset: 0x16C473C
    void AddValue(::Il2CppString* name, uint8_t value);
    // public System.Void AddValue(System.String name, System.Int16 value)
    // Offset: 0x16C4800
    void AddValue(::Il2CppString* name, int16_t value);
    // public System.Void AddValue(System.String name, System.Int32 value)
    // Offset: 0x16C48C4
    void AddValue(::Il2CppString* name, int value);
    // public System.Void AddValue(System.String name, System.Int64 value)
    // Offset: 0x16C4988
    void AddValue(::Il2CppString* name, int64_t value);
    // public System.Void AddValue(System.String name, System.UInt64 value)
    // Offset: 0x16C4A4C
    void AddValue(::Il2CppString* name, uint64_t value);
    // public System.Void AddValue(System.String name, System.Single value)
    // Offset: 0x16C4B10
    void AddValue(::Il2CppString* name, float value);
    // public System.Void AddValue(System.String name, System.DateTime value)
    // Offset: 0x16C4BD4
    void AddValue(::Il2CppString* name, System::DateTime value);
    // System.Void AddValueInternal(System.String name, System.Object value, System.Type type)
    // Offset: 0x16C4320
    void AddValueInternal(::Il2CppString* name, ::Il2CppObject* value, System::Type* type);
    // System.Void UpdateValue(System.String name, System.Object value, System.Type type)
    // Offset: 0x16BFC48
    void UpdateValue(::Il2CppString* name, ::Il2CppObject* value, System::Type* type);
    // private System.Int32 FindElement(System.String name)
    // Offset: 0x16C4C98
    int FindElement(::Il2CppString* name);
    // private System.Object GetElement(System.String name, out System.Type foundType)
    // Offset: 0x16C4D58
    ::Il2CppObject* GetElement(::Il2CppString* name, ByRef<System::Type*> foundType);
    // private System.Object GetElementNoThrow(System.String name, out System.Type foundType)
    // Offset: 0x16C4E94
    ::Il2CppObject* GetElementNoThrow(::Il2CppString* name, ByRef<System::Type*> foundType);
    // public System.Object GetValue(System.String name, System.Type type)
    // Offset: 0x16C2314
    ::Il2CppObject* GetValue(::Il2CppString* name, System::Type* type);
    // System.Object GetValueNoThrow(System.String name, System.Type type)
    // Offset: 0x16C21E8
    ::Il2CppObject* GetValueNoThrow(::Il2CppString* name, System::Type* type);
    // public System.Boolean GetBoolean(System.String name)
    // Offset: 0x16C4F1C
    bool GetBoolean(::Il2CppString* name);
    // public System.Int32 GetInt32(System.String name)
    // Offset: 0x16C5090
    int GetInt32(::Il2CppString* name);
    // public System.Int64 GetInt64(System.String name)
    // Offset: 0x16C51F8
    int64_t GetInt64(::Il2CppString* name);
    // public System.Single GetSingle(System.String name)
    // Offset: 0x16C5360
    float GetSingle(::Il2CppString* name);
    // public System.String GetString(System.String name)
    // Offset: 0x16C54C8
    ::Il2CppString* GetString(::Il2CppString* name);
  }; // System.Runtime.Serialization.SerializationInfo
  #pragma pack(pop)
  static check_size<sizeof(SerializationInfo), 90 + sizeof(bool)> __System_Runtime_Serialization_SerializationInfoSizeCheck;
  static_assert(sizeof(SerializationInfo) == 0x5B);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Serialization::SerializationInfo*, "System.Runtime.Serialization", "SerializationInfo");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::get_FullTypeName
// Il2CppName: get_FullTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Runtime::Serialization::SerializationInfo::*)()>(&System::Runtime::Serialization::SerializationInfo::get_FullTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "get_FullTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::get_AssemblyName
// Il2CppName: get_AssemblyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Runtime::Serialization::SerializationInfo::*)()>(&System::Runtime::Serialization::SerializationInfo::get_AssemblyName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "get_AssemblyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::get_MemberCount
// Il2CppName: get_MemberCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Runtime::Serialization::SerializationInfo::*)()>(&System::Runtime::Serialization::SerializationInfo::get_MemberCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "get_MemberCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::get_ObjectType
// Il2CppName: get_ObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (System::Runtime::Serialization::SerializationInfo::*)()>(&System::Runtime::Serialization::SerializationInfo::get_ObjectType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "get_ObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::get_IsFullTypeNameSetExplicit
// Il2CppName: get_IsFullTypeNameSetExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Runtime::Serialization::SerializationInfo::*)()>(&System::Runtime::Serialization::SerializationInfo::get_IsFullTypeNameSetExplicit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "get_IsFullTypeNameSetExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::get_IsAssemblyNameSetExplicit
// Il2CppName: get_IsAssemblyNameSetExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Runtime::Serialization::SerializationInfo::*)()>(&System::Runtime::Serialization::SerializationInfo::get_IsAssemblyNameSetExplicit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "get_IsAssemblyNameSetExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::SetType
// Il2CppName: SetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(System::Type*)>(&System::Runtime::Serialization::SerializationInfo::SetType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "SetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<uint8_t>*, ::Array<uint8_t>*)>(&System::Runtime::Serialization::SerializationInfo::Compare)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* b = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::DemandForUnsafeAssemblyNameAssignments
// Il2CppName: DemandForUnsafeAssemblyNameAssignments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*)>(&System::Runtime::Serialization::SerializationInfo::DemandForUnsafeAssemblyNameAssignments)> {
  static const MethodInfo* get() {
    static auto* originalAssemblyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newAssemblyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "DemandForUnsafeAssemblyNameAssignments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalAssemblyName, newAssemblyName});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::IsAssemblyNameAssignmentSafe
// Il2CppName: IsAssemblyNameAssignmentSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&System::Runtime::Serialization::SerializationInfo::IsAssemblyNameAssignmentSafe)> {
  static const MethodInfo* get() {
    static auto* originalAssemblyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newAssemblyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "IsAssemblyNameAssignmentSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalAssemblyName, newAssemblyName});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::Serialization::SerializationInfoEnumerator* (System::Runtime::Serialization::SerializationInfo::*)()>(&System::Runtime::Serialization::SerializationInfo::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::ExpandArrays
// Il2CppName: ExpandArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)()>(&System::Runtime::Serialization::SerializationInfo::ExpandArrays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "ExpandArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, ::Il2CppObject*, System::Type*)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value, type});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, ::Il2CppObject*)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, bool)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, ::Il2CppChar)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, uint8_t)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, int16_t)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, int)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, int64_t)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, uint64_t)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, float)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValue
// Il2CppName: AddValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, System::DateTime)>(&System::Runtime::Serialization::SerializationInfo::AddValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::AddValueInternal
// Il2CppName: AddValueInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, ::Il2CppObject*, System::Type*)>(&System::Runtime::Serialization::SerializationInfo::AddValueInternal)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "AddValueInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value, type});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::UpdateValue
// Il2CppName: UpdateValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, ::Il2CppObject*, System::Type*)>(&System::Runtime::Serialization::SerializationInfo::UpdateValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "UpdateValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value, type});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::FindElement
// Il2CppName: FindElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*)>(&System::Runtime::Serialization::SerializationInfo::FindElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "FindElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetElement
// Il2CppName: GetElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, ByRef<System::Type*>)>(&System::Runtime::Serialization::SerializationInfo::GetElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* foundType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, foundType});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetElementNoThrow
// Il2CppName: GetElementNoThrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, ByRef<System::Type*>)>(&System::Runtime::Serialization::SerializationInfo::GetElementNoThrow)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* foundType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetElementNoThrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, foundType});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, System::Type*)>(&System::Runtime::Serialization::SerializationInfo::GetValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, type});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetValueNoThrow
// Il2CppName: GetValueNoThrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*, System::Type*)>(&System::Runtime::Serialization::SerializationInfo::GetValueNoThrow)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetValueNoThrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, type});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetBoolean
// Il2CppName: GetBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*)>(&System::Runtime::Serialization::SerializationInfo::GetBoolean)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetInt32
// Il2CppName: GetInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*)>(&System::Runtime::Serialization::SerializationInfo::GetInt32)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetInt64
// Il2CppName: GetInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*)>(&System::Runtime::Serialization::SerializationInfo::GetInt64)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetSingle
// Il2CppName: GetSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*)>(&System::Runtime::Serialization::SerializationInfo::GetSingle)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::SerializationInfo::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Runtime::Serialization::SerializationInfo::*)(::Il2CppString*)>(&System::Runtime::Serialization::SerializationInfo::GetString)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::SerializationInfo*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
