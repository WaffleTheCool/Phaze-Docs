// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.MarshalByRefObject
#include "System/MarshalByRefObject.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AssemblyLoadEventHandler
  class AssemblyLoadEventHandler;
  // Forward declaring type: ResolveEventHandler
  class ResolveEventHandler;
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: UnhandledExceptionEventHandler
  class UnhandledExceptionEventHandler;
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: FirstChanceExceptionEventArgs
  class FirstChanceExceptionEventArgs;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Security::Principal
namespace System::Security::Principal {
  // Forward declaring type: IPrincipal
  class IPrincipal;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System::Security::Policy
namespace System::Security::Policy {
  // Forward declaring type: Evidence
  class Evidence;
}
// Forward declaring namespace: System::Runtime::Remoting::Contexts
namespace System::Runtime::Remoting::Contexts {
  // Forward declaring type: Context
  class Context;
}
// Forward declaring namespace: System::Runtime::Remoting::Messaging
namespace System::Runtime::Remoting::Messaging {
  // Forward declaring type: CADMethodCallMessage
  class CADMethodCallMessage;
  // Forward declaring type: CADMethodReturnMessage
  class CADMethodReturnMessage;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0xA0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.AppDomain
  // [TokenAttribute] Offset: FFFFFFFF
  // [ClassInterfaceAttribute] Offset: DA031C
  // [ComVisibleAttribute] Offset: DA031C
  class AppDomain : public System::MarshalByRefObject {
    public:
    // private System.IntPtr _mono_app_domain
    // Size: 0x8
    // Offset: 0x18
    System::IntPtr mono_app_domain;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // private System.Object _evidence
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* evidence;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _granted
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* granted;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int32 _principalPolicy
    // Size: 0x4
    // Offset: 0x30
    int principalPolicy;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: principalPolicy and: AssemblyLoad
    char __padding3[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xDA62CC
    // private System.AssemblyLoadEventHandler AssemblyLoad
    // Size: 0x8
    // Offset: 0x38
    System::AssemblyLoadEventHandler* AssemblyLoad;
    // Field size check
    static_assert(sizeof(System::AssemblyLoadEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDA62DC
    // private System.ResolveEventHandler AssemblyResolve
    // Size: 0x8
    // Offset: 0x40
    System::ResolveEventHandler* AssemblyResolve;
    // Field size check
    static_assert(sizeof(System::ResolveEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDA62EC
    // private System.EventHandler DomainUnload
    // Size: 0x8
    // Offset: 0x48
    System::EventHandler* DomainUnload;
    // Field size check
    static_assert(sizeof(System::EventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDA62FC
    // private System.EventHandler ProcessExit
    // Size: 0x8
    // Offset: 0x50
    System::EventHandler* ProcessExit;
    // Field size check
    static_assert(sizeof(System::EventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDA630C
    // private System.ResolveEventHandler ResourceResolve
    // Size: 0x8
    // Offset: 0x58
    System::ResolveEventHandler* ResourceResolve;
    // Field size check
    static_assert(sizeof(System::ResolveEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDA631C
    // private System.ResolveEventHandler TypeResolve
    // Size: 0x8
    // Offset: 0x60
    System::ResolveEventHandler* TypeResolve;
    // Field size check
    static_assert(sizeof(System::ResolveEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDA632C
    // private System.UnhandledExceptionEventHandler UnhandledException
    // Size: 0x8
    // Offset: 0x68
    System::UnhandledExceptionEventHandler* UnhandledException;
    // Field size check
    static_assert(sizeof(System::UnhandledExceptionEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDA633C
    // private System.EventHandler`1<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs> FirstChanceException
    // Size: 0x8
    // Offset: 0x70
    System::EventHandler_1<System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs*>* FirstChanceException;
    // Field size check
    static_assert(sizeof(System::EventHandler_1<System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs*>*) == 0x8);
    // private System.Object _domain_manager
    // Size: 0x8
    // Offset: 0x78
    ::Il2CppObject* domain_manager;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDA634C
    // private System.ResolveEventHandler ReflectionOnlyAssemblyResolve
    // Size: 0x8
    // Offset: 0x80
    System::ResolveEventHandler* ReflectionOnlyAssemblyResolve;
    // Field size check
    static_assert(sizeof(System::ResolveEventHandler*) == 0x8);
    // private System.Object _activation
    // Size: 0x8
    // Offset: 0x88
    ::Il2CppObject* activation;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _applicationIdentity
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppObject* applicationIdentity;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> compatibility_switch
    // Size: 0x8
    // Offset: 0x98
    System::Collections::Generic::List_1<::Il2CppString*>* compatibility_switch;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<::Il2CppString*>*) == 0x8);
    // Creating value type constructor for type: AppDomain
    AppDomain(System::IntPtr mono_app_domain_ = {}, ::Il2CppObject* evidence_ = {}, ::Il2CppObject* granted_ = {}, int principalPolicy_ = {}, System::AssemblyLoadEventHandler* AssemblyLoad_ = {}, System::ResolveEventHandler* AssemblyResolve_ = {}, System::EventHandler* DomainUnload_ = {}, System::EventHandler* ProcessExit_ = {}, System::ResolveEventHandler* ResourceResolve_ = {}, System::ResolveEventHandler* TypeResolve_ = {}, System::UnhandledExceptionEventHandler* UnhandledException_ = {}, System::EventHandler_1<System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs*>* FirstChanceException_ = {}, ::Il2CppObject* domain_manager_ = {}, System::ResolveEventHandler* ReflectionOnlyAssemblyResolve_ = {}, ::Il2CppObject* activation_ = {}, ::Il2CppObject* applicationIdentity_ = {}, System::Collections::Generic::List_1<::Il2CppString*>* compatibility_switch_ = {}) noexcept : mono_app_domain{mono_app_domain_}, evidence{evidence_}, granted{granted_}, principalPolicy{principalPolicy_}, AssemblyLoad{AssemblyLoad_}, AssemblyResolve{AssemblyResolve_}, DomainUnload{DomainUnload_}, ProcessExit{ProcessExit_}, ResourceResolve{ResourceResolve_}, TypeResolve{TypeResolve_}, UnhandledException{UnhandledException_}, FirstChanceException{FirstChanceException_}, domain_manager{domain_manager_}, ReflectionOnlyAssemblyResolve{ReflectionOnlyAssemblyResolve_}, activation{activation_}, applicationIdentity{applicationIdentity_}, compatibility_switch{compatibility_switch_} {}
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // Get static field: static private System.String _process_guid
    static ::Il2CppString* _get__process_guid();
    // Set static field: static private System.String _process_guid
    static void _set__process_guid(::Il2CppString* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Object> type_resolve_in_progress
    static System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* _get_type_resolve_in_progress();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Object> type_resolve_in_progress
    static void _set_type_resolve_in_progress(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Object> assembly_resolve_in_progress
    static System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* _get_assembly_resolve_in_progress();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Object> assembly_resolve_in_progress
    static void _set_assembly_resolve_in_progress(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Object> assembly_resolve_in_progress_refonly
    static System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* _get_assembly_resolve_in_progress_refonly();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Object> assembly_resolve_in_progress_refonly
    static void _set_assembly_resolve_in_progress_refonly(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* value);
    // Get static field: static private System.Object _principal
    static ::Il2CppObject* _get__principal();
    // Set static field: static private System.Object _principal
    static void _set__principal(::Il2CppObject* value);
    // Get static field: static private System.AppDomain default_domain
    static System::AppDomain* _get_default_domain();
    // Set static field: static private System.AppDomain default_domain
    static void _set_default_domain(System::AppDomain* value);
    // Get instance field reference: private System.IntPtr _mono_app_domain
    System::IntPtr& dyn__mono_app_domain();
    // Get instance field reference: private System.Object _evidence
    ::Il2CppObject*& dyn__evidence();
    // Get instance field reference: private System.Object _granted
    ::Il2CppObject*& dyn__granted();
    // Get instance field reference: private System.Int32 _principalPolicy
    int& dyn__principalPolicy();
    // Get instance field reference: private System.AssemblyLoadEventHandler AssemblyLoad
    System::AssemblyLoadEventHandler*& dyn_AssemblyLoad();
    // Get instance field reference: private System.ResolveEventHandler AssemblyResolve
    System::ResolveEventHandler*& dyn_AssemblyResolve();
    // Get instance field reference: private System.EventHandler DomainUnload
    System::EventHandler*& dyn_DomainUnload();
    // Get instance field reference: private System.EventHandler ProcessExit
    System::EventHandler*& dyn_ProcessExit();
    // Get instance field reference: private System.ResolveEventHandler ResourceResolve
    System::ResolveEventHandler*& dyn_ResourceResolve();
    // Get instance field reference: private System.ResolveEventHandler TypeResolve
    System::ResolveEventHandler*& dyn_TypeResolve();
    // Get instance field reference: private System.UnhandledExceptionEventHandler UnhandledException
    System::UnhandledExceptionEventHandler*& dyn_UnhandledException();
    // Get instance field reference: private System.EventHandler`1<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs> FirstChanceException
    System::EventHandler_1<System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs*>*& dyn_FirstChanceException();
    // Get instance field reference: private System.Object _domain_manager
    ::Il2CppObject*& dyn__domain_manager();
    // Get instance field reference: private System.ResolveEventHandler ReflectionOnlyAssemblyResolve
    System::ResolveEventHandler*& dyn_ReflectionOnlyAssemblyResolve();
    // Get instance field reference: private System.Object _activation
    ::Il2CppObject*& dyn__activation();
    // Get instance field reference: private System.Object _applicationIdentity
    ::Il2CppObject*& dyn__applicationIdentity();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> compatibility_switch
    System::Collections::Generic::List_1<::Il2CppString*>*& dyn_compatibility_switch();
    // public System.String get_FriendlyName()
    // Offset: 0x17CCBF8
    ::Il2CppString* get_FriendlyName();
    // System.Security.Principal.IPrincipal get_DefaultPrincipal()
    // Offset: 0x17CCBFC
    System::Security::Principal::IPrincipal* get_DefaultPrincipal();
    // static public System.AppDomain get_CurrentDomain()
    // Offset: 0x17CCD78
    static System::AppDomain* get_CurrentDomain();
    // public System.Void add_DomainUnload(System.EventHandler value)
    // Offset: 0x17CDD3C
    void add_DomainUnload(System::EventHandler* value);
    // public System.Void remove_DomainUnload(System.EventHandler value)
    // Offset: 0x17CDDE0
    void remove_DomainUnload(System::EventHandler* value);
    // public System.Void add_UnhandledException(System.UnhandledExceptionEventHandler value)
    // Offset: 0x17CDE84
    void add_UnhandledException(System::UnhandledExceptionEventHandler* value);
    // public System.Void remove_UnhandledException(System.UnhandledExceptionEventHandler value)
    // Offset: 0x17CDF28
    void remove_UnhandledException(System::UnhandledExceptionEventHandler* value);
    // private System.String getFriendlyName()
    // Offset: 0x17CCBF4
    ::Il2CppString* getFriendlyName();
    // static private System.AppDomain getCurDomain()
    // Offset: 0x17CCD74
    static System::AppDomain* getCurDomain();
    // private System.Reflection.Assembly[] GetAssemblies(System.Boolean refOnly)
    // Offset: 0x17CCD7C
    ::Array<System::Reflection::Assembly*>* GetAssemblies(bool refOnly);
    // public System.Reflection.Assembly[] GetAssemblies()
    // Offset: 0x17CCD84
    ::Array<System::Reflection::Assembly*>* GetAssemblies();
    // public System.Object GetData(System.String name)
    // Offset: 0x17CCD8C
    ::Il2CppObject* GetData(::Il2CppString* name);
    // System.Reflection.Assembly LoadAssembly(System.String assemblyRef, System.Security.Policy.Evidence securityEvidence, System.Boolean refOnly)
    // Offset: 0x17CCD98
    System::Reflection::Assembly* LoadAssembly(::Il2CppString* assemblyRef, System::Security::Policy::Evidence* securityEvidence, bool refOnly);
    // public System.Reflection.Assembly Load(System.String assemblyString)
    // Offset: 0x17CCDA0
    System::Reflection::Assembly* Load(::Il2CppString* assemblyString);
    // System.Reflection.Assembly Load(System.String assemblyString, System.Security.Policy.Evidence assemblySecurity, System.Boolean refonly)
    // Offset: 0x17CCDAC
    System::Reflection::Assembly* Load(::Il2CppString* assemblyString, System::Security::Policy::Evidence* assemblySecurity, bool refonly);
    // static private System.AppDomain InternalSetDomainByID(System.Int32 domain_id)
    // Offset: 0x17CCED8
    static System::AppDomain* InternalSetDomainByID(int domain_id);
    // static private System.AppDomain InternalSetDomain(System.AppDomain context)
    // Offset: 0x17CCEDC
    static System::AppDomain* InternalSetDomain(System::AppDomain* context);
    // static System.Void InternalPushDomainRefByID(System.Int32 domain_id)
    // Offset: 0x17CCEE0
    static void InternalPushDomainRefByID(int domain_id);
    // static System.Void InternalPopDomainRef()
    // Offset: 0x17CCEE4
    static void InternalPopDomainRef();
    // static System.Runtime.Remoting.Contexts.Context InternalSetContext(System.Runtime.Remoting.Contexts.Context context)
    // Offset: 0x17CCEE8
    static System::Runtime::Remoting::Contexts::Context* InternalSetContext(System::Runtime::Remoting::Contexts::Context* context);
    // static System.Runtime.Remoting.Contexts.Context InternalGetContext()
    // Offset: 0x17CCEEC
    static System::Runtime::Remoting::Contexts::Context* InternalGetContext();
    // static System.Runtime.Remoting.Contexts.Context InternalGetDefaultContext()
    // Offset: 0x17CCEF0
    static System::Runtime::Remoting::Contexts::Context* InternalGetDefaultContext();
    // static System.String InternalGetProcessGuid(System.String newguid)
    // Offset: 0x17CCEF4
    static ::Il2CppString* InternalGetProcessGuid(::Il2CppString* newguid);
    // static System.Object InvokeInDomainByID(System.Int32 domain_id, System.Reflection.MethodInfo method, System.Object obj, System.Object[] args)
    // Offset: 0x17CCEF8
    static ::Il2CppObject* InvokeInDomainByID(int domain_id, System::Reflection::MethodInfo* method, ::Il2CppObject* obj, ::Array<::Il2CppObject*>* args);
    // static System.String GetProcessGuid()
    // Offset: 0x17CD054
    static ::Il2CppString* GetProcessGuid();
    // static private System.Boolean InternalIsFinalizingForUnload(System.Int32 domain_id)
    // Offset: 0x17CD108
    static bool InternalIsFinalizingForUnload(int domain_id);
    // public System.Boolean IsFinalizingForUnload()
    // Offset: 0x17CD10C
    bool IsFinalizingForUnload();
    // private System.Int32 getDomainID()
    // Offset: 0x17CD124
    int getDomainID();
    // private System.Void DoAssemblyLoad(System.Reflection.Assembly assembly)
    // Offset: 0x17CD130
    void DoAssemblyLoad(System::Reflection::Assembly* assembly);
    // private System.Reflection.Assembly DoAssemblyResolve(System.String name, System.Reflection.Assembly requestingAssembly, System.Boolean refonly)
    // Offset: 0x17CD620
    System::Reflection::Assembly* DoAssemblyResolve(::Il2CppString* name, System::Reflection::Assembly* requestingAssembly, bool refonly);
    // System.Reflection.Assembly DoTypeResolve(System.Object name_or_tb)
    // Offset: 0x17CD8B4
    System::Reflection::Assembly* DoTypeResolve(::Il2CppObject* name_or_tb);
    // private System.Void DoDomainUnload()
    // Offset: 0x17CDB20
    void DoDomainUnload();
    // System.Byte[] GetMarshalledDomainObjRef()
    // Offset: 0x17CDB3C
    ::Array<uint8_t>* GetMarshalledDomainObjRef();
    // System.Void ProcessMessageInDomain(System.Byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg, out System.Byte[] arrResponse, out System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm)
    // Offset: 0x17CDC14
    void ProcessMessageInDomain(::Array<uint8_t>* arrRequest, System::Runtime::Remoting::Messaging::CADMethodCallMessage* cadMsg, ByRef<::Array<uint8_t>*> arrResponse, ByRef<System::Runtime::Remoting::Messaging::CADMethodReturnMessage*> cadMrm);
    // private System.Void .ctor()
    // Offset: 0x17CCBEC
    // Implemented from: System.MarshalByRefObject
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AppDomain* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::AppDomain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AppDomain*, creationType>()));
    }
    // public override System.Object InitializeLifetimeService()
    // Offset: 0x17CCD90
    // Implemented from: System.MarshalByRefObject
    // Base method: System.Object MarshalByRefObject::InitializeLifetimeService()
    ::Il2CppObject* InitializeLifetimeService();
    // public override System.String ToString()
    // Offset: 0x17CD12C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.AppDomain
  #pragma pack(pop)
  static check_size<sizeof(AppDomain), 152 + sizeof(System::Collections::Generic::List_1<::Il2CppString*>*)> __System_AppDomainSizeCheck;
  static_assert(sizeof(AppDomain) == 0xA0);
}
DEFINE_IL2CPP_ARG_TYPE(System::AppDomain*, "System", "AppDomain");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::AppDomain::get_FriendlyName
// Il2CppName: get_FriendlyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::AppDomain::*)()>(&System::AppDomain::get_FriendlyName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "get_FriendlyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::get_DefaultPrincipal
// Il2CppName: get_DefaultPrincipal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Principal::IPrincipal* (System::AppDomain::*)()>(&System::AppDomain::get_DefaultPrincipal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "get_DefaultPrincipal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::get_CurrentDomain
// Il2CppName: get_CurrentDomain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::AppDomain* (*)()>(&System::AppDomain::get_CurrentDomain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "get_CurrentDomain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::add_DomainUnload
// Il2CppName: add_DomainUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::AppDomain::*)(System::EventHandler*)>(&System::AppDomain::add_DomainUnload)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "EventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "add_DomainUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::AppDomain::remove_DomainUnload
// Il2CppName: remove_DomainUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::AppDomain::*)(System::EventHandler*)>(&System::AppDomain::remove_DomainUnload)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "EventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "remove_DomainUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::AppDomain::add_UnhandledException
// Il2CppName: add_UnhandledException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::AppDomain::*)(System::UnhandledExceptionEventHandler*)>(&System::AppDomain::add_UnhandledException)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UnhandledExceptionEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "add_UnhandledException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::AppDomain::remove_UnhandledException
// Il2CppName: remove_UnhandledException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::AppDomain::*)(System::UnhandledExceptionEventHandler*)>(&System::AppDomain::remove_UnhandledException)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UnhandledExceptionEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "remove_UnhandledException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::AppDomain::getFriendlyName
// Il2CppName: getFriendlyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::AppDomain::*)()>(&System::AppDomain::getFriendlyName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "getFriendlyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::getCurDomain
// Il2CppName: getCurDomain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::AppDomain* (*)()>(&System::AppDomain::getCurDomain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "getCurDomain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::GetAssemblies
// Il2CppName: GetAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::Assembly*>* (System::AppDomain::*)(bool)>(&System::AppDomain::GetAssemblies)> {
  static const MethodInfo* get() {
    static auto* refOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "GetAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{refOnly});
  }
};
// Writing MetadataGetter for method: System::AppDomain::GetAssemblies
// Il2CppName: GetAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::Assembly*>* (System::AppDomain::*)()>(&System::AppDomain::GetAssemblies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "GetAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::AppDomain::*)(::Il2CppString*)>(&System::AppDomain::GetData)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::AppDomain::LoadAssembly
// Il2CppName: LoadAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (System::AppDomain::*)(::Il2CppString*, System::Security::Policy::Evidence*, bool)>(&System::AppDomain::LoadAssembly)> {
  static const MethodInfo* get() {
    static auto* assemblyRef = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* securityEvidence = &::il2cpp_utils::GetClassFromName("System.Security.Policy", "Evidence")->byval_arg;
    static auto* refOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "LoadAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assemblyRef, securityEvidence, refOnly});
  }
};
// Writing MetadataGetter for method: System::AppDomain::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (System::AppDomain::*)(::Il2CppString*)>(&System::AppDomain::Load)> {
  static const MethodInfo* get() {
    static auto* assemblyString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assemblyString});
  }
};
// Writing MetadataGetter for method: System::AppDomain::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (System::AppDomain::*)(::Il2CppString*, System::Security::Policy::Evidence*, bool)>(&System::AppDomain::Load)> {
  static const MethodInfo* get() {
    static auto* assemblyString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assemblySecurity = &::il2cpp_utils::GetClassFromName("System.Security.Policy", "Evidence")->byval_arg;
    static auto* refonly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assemblyString, assemblySecurity, refonly});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalSetDomainByID
// Il2CppName: InternalSetDomainByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::AppDomain* (*)(int)>(&System::AppDomain::InternalSetDomainByID)> {
  static const MethodInfo* get() {
    static auto* domain_id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalSetDomainByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{domain_id});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalSetDomain
// Il2CppName: InternalSetDomain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::AppDomain* (*)(System::AppDomain*)>(&System::AppDomain::InternalSetDomain)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "AppDomain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalSetDomain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalPushDomainRefByID
// Il2CppName: InternalPushDomainRefByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::AppDomain::InternalPushDomainRefByID)> {
  static const MethodInfo* get() {
    static auto* domain_id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalPushDomainRefByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{domain_id});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalPopDomainRef
// Il2CppName: InternalPopDomainRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::AppDomain::InternalPopDomainRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalPopDomainRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalSetContext
// Il2CppName: InternalSetContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::Remoting::Contexts::Context* (*)(System::Runtime::Remoting::Contexts::Context*)>(&System::AppDomain::InternalSetContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Remoting.Contexts", "Context")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalSetContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalGetContext
// Il2CppName: InternalGetContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::Remoting::Contexts::Context* (*)()>(&System::AppDomain::InternalGetContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalGetContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalGetDefaultContext
// Il2CppName: InternalGetDefaultContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::Remoting::Contexts::Context* (*)()>(&System::AppDomain::InternalGetDefaultContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalGetDefaultContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalGetProcessGuid
// Il2CppName: InternalGetProcessGuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&System::AppDomain::InternalGetProcessGuid)> {
  static const MethodInfo* get() {
    static auto* newguid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalGetProcessGuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newguid});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InvokeInDomainByID
// Il2CppName: InvokeInDomainByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(int, System::Reflection::MethodInfo*, ::Il2CppObject*, ::Array<::Il2CppObject*>*)>(&System::AppDomain::InvokeInDomainByID)> {
  static const MethodInfo* get() {
    static auto* domain_id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InvokeInDomainByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{domain_id, method, obj, args});
  }
};
// Writing MetadataGetter for method: System::AppDomain::GetProcessGuid
// Il2CppName: GetProcessGuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&System::AppDomain::GetProcessGuid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "GetProcessGuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::InternalIsFinalizingForUnload
// Il2CppName: InternalIsFinalizingForUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&System::AppDomain::InternalIsFinalizingForUnload)> {
  static const MethodInfo* get() {
    static auto* domain_id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InternalIsFinalizingForUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{domain_id});
  }
};
// Writing MetadataGetter for method: System::AppDomain::IsFinalizingForUnload
// Il2CppName: IsFinalizingForUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::AppDomain::*)()>(&System::AppDomain::IsFinalizingForUnload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "IsFinalizingForUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::getDomainID
// Il2CppName: getDomainID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::AppDomain::*)()>(&System::AppDomain::getDomainID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "getDomainID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::DoAssemblyLoad
// Il2CppName: DoAssemblyLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::AppDomain::*)(System::Reflection::Assembly*)>(&System::AppDomain::DoAssemblyLoad)> {
  static const MethodInfo* get() {
    static auto* assembly = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "DoAssemblyLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assembly});
  }
};
// Writing MetadataGetter for method: System::AppDomain::DoAssemblyResolve
// Il2CppName: DoAssemblyResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (System::AppDomain::*)(::Il2CppString*, System::Reflection::Assembly*, bool)>(&System::AppDomain::DoAssemblyResolve)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestingAssembly = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    static auto* refonly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "DoAssemblyResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, requestingAssembly, refonly});
  }
};
// Writing MetadataGetter for method: System::AppDomain::DoTypeResolve
// Il2CppName: DoTypeResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (System::AppDomain::*)(::Il2CppObject*)>(&System::AppDomain::DoTypeResolve)> {
  static const MethodInfo* get() {
    static auto* name_or_tb = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "DoTypeResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name_or_tb});
  }
};
// Writing MetadataGetter for method: System::AppDomain::DoDomainUnload
// Il2CppName: DoDomainUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::AppDomain::*)()>(&System::AppDomain::DoDomainUnload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "DoDomainUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::GetMarshalledDomainObjRef
// Il2CppName: GetMarshalledDomainObjRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (System::AppDomain::*)()>(&System::AppDomain::GetMarshalledDomainObjRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "GetMarshalledDomainObjRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::ProcessMessageInDomain
// Il2CppName: ProcessMessageInDomain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::AppDomain::*)(::Array<uint8_t>*, System::Runtime::Remoting::Messaging::CADMethodCallMessage*, ByRef<::Array<uint8_t>*>, ByRef<System::Runtime::Remoting::Messaging::CADMethodReturnMessage*>)>(&System::AppDomain::ProcessMessageInDomain)> {
  static const MethodInfo* get() {
    static auto* arrRequest = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* cadMsg = &::il2cpp_utils::GetClassFromName("System.Runtime.Remoting.Messaging", "CADMethodCallMessage")->byval_arg;
    static auto* arrResponse = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* cadMrm = &::il2cpp_utils::GetClassFromName("System.Runtime.Remoting.Messaging", "CADMethodReturnMessage")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "ProcessMessageInDomain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arrRequest, cadMsg, arrResponse, cadMrm});
  }
};
// Writing MetadataGetter for method: System::AppDomain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::AppDomain::InitializeLifetimeService
// Il2CppName: InitializeLifetimeService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::AppDomain::*)()>(&System::AppDomain::InitializeLifetimeService)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "InitializeLifetimeService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::AppDomain::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::AppDomain::*)()>(&System::AppDomain::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::AppDomain*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
