// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: WebConnection
  class WebConnection;
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: WebConnectionData
  class WebConnectionData;
  // Forward declaring type: SimpleAsyncCallback
  class SimpleAsyncCallback;
  // Forward declaring type: SimpleAsyncResult
  class SimpleAsyncResult;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: MemoryStream
  class MemoryStream;
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0xD2
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebConnectionStream
  // [TokenAttribute] Offset: FFFFFFFF
  class WebConnectionStream : public System::IO::Stream {
    public:
    // Nested type: System::Net::WebConnectionStream::$$c__DisplayClass75_0
    class $$c__DisplayClass75_0;
    // Nested type: System::Net::WebConnectionStream::$$c__DisplayClass76_0
    class $$c__DisplayClass76_0;
    // Nested type: System::Net::WebConnectionStream::$$c__DisplayClass80_0
    class $$c__DisplayClass80_0;
    // private System.Boolean isRead
    // Size: 0x1
    // Offset: 0x28
    bool isRead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRead and: cnc
    char __padding0[0x7] = {};
    // private System.Net.WebConnection cnc
    // Size: 0x8
    // Offset: 0x30
    System::Net::WebConnection* cnc;
    // Field size check
    static_assert(sizeof(System::Net::WebConnection*) == 0x8);
    // private System.Net.HttpWebRequest request
    // Size: 0x8
    // Offset: 0x38
    System::Net::HttpWebRequest* request;
    // Field size check
    static_assert(sizeof(System::Net::HttpWebRequest*) == 0x8);
    // private System.Byte[] readBuffer
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint8_t>* readBuffer;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Int32 readBufferOffset
    // Size: 0x4
    // Offset: 0x48
    int readBufferOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 readBufferSize
    // Size: 0x4
    // Offset: 0x4C
    int readBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 stream_length
    // Size: 0x4
    // Offset: 0x50
    int stream_length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: stream_length and: contentLength
    char __padding6[0x4] = {};
    // private System.Int64 contentLength
    // Size: 0x8
    // Offset: 0x58
    int64_t contentLength;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 totalRead
    // Size: 0x8
    // Offset: 0x60
    int64_t totalRead;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 totalWritten
    // Size: 0x8
    // Offset: 0x68
    int64_t totalWritten;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean nextReadCalled
    // Size: 0x1
    // Offset: 0x70
    bool nextReadCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: nextReadCalled and: pendingReads
    char __padding10[0x3] = {};
    // private System.Int32 pendingReads
    // Size: 0x4
    // Offset: 0x74
    int pendingReads;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 pendingWrites
    // Size: 0x4
    // Offset: 0x78
    int pendingWrites;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: pendingWrites and: pending
    char __padding12[0x4] = {};
    // private System.Threading.ManualResetEvent pending
    // Size: 0x8
    // Offset: 0x80
    System::Threading::ManualResetEvent* pending;
    // Field size check
    static_assert(sizeof(System::Threading::ManualResetEvent*) == 0x8);
    // private System.Boolean allowBuffering
    // Size: 0x1
    // Offset: 0x88
    bool allowBuffering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean sendChunked
    // Size: 0x1
    // Offset: 0x89
    bool sendChunked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendChunked and: writeBuffer
    char __padding15[0x6] = {};
    // private System.IO.MemoryStream writeBuffer
    // Size: 0x8
    // Offset: 0x90
    System::IO::MemoryStream* writeBuffer;
    // Field size check
    static_assert(sizeof(System::IO::MemoryStream*) == 0x8);
    // private System.Boolean requestWritten
    // Size: 0x1
    // Offset: 0x98
    bool requestWritten;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: requestWritten and: headers
    char __padding17[0x7] = {};
    // private System.Byte[] headers
    // Size: 0x8
    // Offset: 0xA0
    ::Array<uint8_t>* headers;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0xA8
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean headersSent
    // Size: 0x1
    // Offset: 0xA9
    bool headersSent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: headersSent and: locker
    char __padding20[0x6] = {};
    // private System.Object locker
    // Size: 0x8
    // Offset: 0xB0
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean initRead
    // Size: 0x1
    // Offset: 0xB8
    bool initRead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean read_eof
    // Size: 0x1
    // Offset: 0xB9
    bool read_eof;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean complete_request_written
    // Size: 0x1
    // Offset: 0xBA
    bool complete_request_written;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: complete_request_written and: read_timeout
    char __padding24[0x1] = {};
    // private System.Int32 read_timeout
    // Size: 0x4
    // Offset: 0xBC
    int read_timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 write_timeout
    // Size: 0x4
    // Offset: 0xC0
    int write_timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: write_timeout and: cb_wrapper
    char __padding26[0x4] = {};
    // private System.AsyncCallback cb_wrapper
    // Size: 0x8
    // Offset: 0xC8
    System::AsyncCallback* cb_wrapper;
    // Field size check
    static_assert(sizeof(System::AsyncCallback*) == 0x8);
    // System.Boolean IgnoreIOErrors
    // Size: 0x1
    // Offset: 0xD0
    bool IgnoreIOErrors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <GetResponseOnClose>k__BackingField
    // Size: 0x1
    // Offset: 0xD1
    bool GetResponseOnClose;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: WebConnectionStream
    WebConnectionStream(bool isRead_ = {}, System::Net::WebConnection* cnc_ = {}, System::Net::HttpWebRequest* request_ = {}, ::Array<uint8_t>* readBuffer_ = {}, int readBufferOffset_ = {}, int readBufferSize_ = {}, int stream_length_ = {}, int64_t contentLength_ = {}, int64_t totalRead_ = {}, int64_t totalWritten_ = {}, bool nextReadCalled_ = {}, int pendingReads_ = {}, int pendingWrites_ = {}, System::Threading::ManualResetEvent* pending_ = {}, bool allowBuffering_ = {}, bool sendChunked_ = {}, System::IO::MemoryStream* writeBuffer_ = {}, bool requestWritten_ = {}, ::Array<uint8_t>* headers_ = {}, bool disposed_ = {}, bool headersSent_ = {}, ::Il2CppObject* locker_ = {}, bool initRead_ = {}, bool read_eof_ = {}, bool complete_request_written_ = {}, int read_timeout_ = {}, int write_timeout_ = {}, System::AsyncCallback* cb_wrapper_ = {}, bool IgnoreIOErrors_ = {}, bool GetResponseOnClose_ = {}) noexcept : isRead{isRead_}, cnc{cnc_}, request{request_}, readBuffer{readBuffer_}, readBufferOffset{readBufferOffset_}, readBufferSize{readBufferSize_}, stream_length{stream_length_}, contentLength{contentLength_}, totalRead{totalRead_}, totalWritten{totalWritten_}, nextReadCalled{nextReadCalled_}, pendingReads{pendingReads_}, pendingWrites{pendingWrites_}, pending{pending_}, allowBuffering{allowBuffering_}, sendChunked{sendChunked_}, writeBuffer{writeBuffer_}, requestWritten{requestWritten_}, headers{headers_}, disposed{disposed_}, headersSent{headersSent_}, locker{locker_}, initRead{initRead_}, read_eof{read_eof_}, complete_request_written{complete_request_written_}, read_timeout{read_timeout_}, write_timeout{write_timeout_}, cb_wrapper{cb_wrapper_}, IgnoreIOErrors{IgnoreIOErrors_}, GetResponseOnClose{GetResponseOnClose_} {}
    // Get static field: static private System.Byte[] crlf
    static ::Array<uint8_t>* _get_crlf();
    // Set static field: static private System.Byte[] crlf
    static void _set_crlf(::Array<uint8_t>* value);
    // Get instance field reference: private System.Boolean isRead
    bool& dyn_isRead();
    // Get instance field reference: private System.Net.WebConnection cnc
    System::Net::WebConnection*& dyn_cnc();
    // Get instance field reference: private System.Net.HttpWebRequest request
    System::Net::HttpWebRequest*& dyn_request();
    // Get instance field reference: private System.Byte[] readBuffer
    ::Array<uint8_t>*& dyn_readBuffer();
    // Get instance field reference: private System.Int32 readBufferOffset
    int& dyn_readBufferOffset();
    // Get instance field reference: private System.Int32 readBufferSize
    int& dyn_readBufferSize();
    // Get instance field reference: private System.Int32 stream_length
    int& dyn_stream_length();
    // Get instance field reference: private System.Int64 contentLength
    int64_t& dyn_contentLength();
    // Get instance field reference: private System.Int64 totalRead
    int64_t& dyn_totalRead();
    // Get instance field reference: System.Int64 totalWritten
    int64_t& dyn_totalWritten();
    // Get instance field reference: private System.Boolean nextReadCalled
    bool& dyn_nextReadCalled();
    // Get instance field reference: private System.Int32 pendingReads
    int& dyn_pendingReads();
    // Get instance field reference: private System.Int32 pendingWrites
    int& dyn_pendingWrites();
    // Get instance field reference: private System.Threading.ManualResetEvent pending
    System::Threading::ManualResetEvent*& dyn_pending();
    // Get instance field reference: private System.Boolean allowBuffering
    bool& dyn_allowBuffering();
    // Get instance field reference: private System.Boolean sendChunked
    bool& dyn_sendChunked();
    // Get instance field reference: private System.IO.MemoryStream writeBuffer
    System::IO::MemoryStream*& dyn_writeBuffer();
    // Get instance field reference: private System.Boolean requestWritten
    bool& dyn_requestWritten();
    // Get instance field reference: private System.Byte[] headers
    ::Array<uint8_t>*& dyn_headers();
    // Get instance field reference: private System.Boolean disposed
    bool& dyn_disposed();
    // Get instance field reference: private System.Boolean headersSent
    bool& dyn_headersSent();
    // Get instance field reference: private System.Object locker
    ::Il2CppObject*& dyn_locker();
    // Get instance field reference: private System.Boolean initRead
    bool& dyn_initRead();
    // Get instance field reference: private System.Boolean read_eof
    bool& dyn_read_eof();
    // Get instance field reference: private System.Boolean complete_request_written
    bool& dyn_complete_request_written();
    // Get instance field reference: private System.Int32 read_timeout
    int& dyn_read_timeout();
    // Get instance field reference: private System.Int32 write_timeout
    int& dyn_write_timeout();
    // Get instance field reference: private System.AsyncCallback cb_wrapper
    System::AsyncCallback*& dyn_cb_wrapper();
    // Get instance field reference: System.Boolean IgnoreIOErrors
    bool& dyn_IgnoreIOErrors();
    // Get instance field reference: private System.Boolean <GetResponseOnClose>k__BackingField
    bool& dyn_$GetResponseOnClose$k__BackingField();
    // System.Net.WebConnection get_Connection()
    // Offset: 0x15DC8A4
    System::Net::WebConnection* get_Connection();
    // System.Boolean get_CompleteRequestWritten()
    // Offset: 0x15DC8BC
    bool get_CompleteRequestWritten();
    // System.Void set_SendChunked(System.Boolean value)
    // Offset: 0x15DC8C4
    void set_SendChunked(bool value);
    // System.Void set_ReadBuffer(System.Byte[] value)
    // Offset: 0x15DC8D0
    void set_ReadBuffer(::Array<uint8_t>* value);
    // System.Void set_ReadBufferOffset(System.Int32 value)
    // Offset: 0x15DC8D8
    void set_ReadBufferOffset(int value);
    // System.Void set_ReadBufferSize(System.Int32 value)
    // Offset: 0x15DC8E0
    void set_ReadBufferSize(int value);
    // System.Byte[] get_WriteBuffer()
    // Offset: 0x15DC8E8
    ::Array<uint8_t>* get_WriteBuffer();
    // System.Int32 get_WriteBufferLength()
    // Offset: 0x15DC90C
    int get_WriteBufferLength();
    // System.Boolean get_RequestWritten()
    // Offset: 0x15DE6EC
    bool get_RequestWritten();
    // System.Boolean get_GetResponseOnClose()
    // Offset: 0x15DE8C4
    bool get_GetResponseOnClose();
    // public System.Void .ctor(System.Net.WebConnection cnc, System.Net.WebConnectionData data)
    // Offset: 0x15D7E00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebConnectionStream* New_ctor(System::Net::WebConnection* cnc, System::Net::WebConnectionData* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebConnectionStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebConnectionStream*, creationType>(cnc, data)));
    }
    // public System.Void .ctor(System.Net.WebConnection cnc, System.Net.HttpWebRequest request)
    // Offset: 0x15D87F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebConnectionStream* New_ctor(System::Net::WebConnection* cnc, System::Net::HttpWebRequest* request) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebConnectionStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebConnectionStream*, creationType>(cnc, request)));
    }
    // private System.Boolean CheckAuthHeader(System.String headerName)
    // Offset: 0x15DC80C
    bool CheckAuthHeader(::Il2CppString* headerName);
    // private System.Boolean IsNtlmAuth()
    // Offset: 0x15DC2F4
    bool IsNtlmAuth();
    // System.Void CheckResponseInBuffer()
    // Offset: 0x15D8180
    void CheckResponseInBuffer();
    // System.Void ForceCompletion()
    // Offset: 0x15D81D4
    void ForceCompletion();
    // System.Void CheckComplete()
    // Offset: 0x15DC938
    void CheckComplete();
    // System.Void ReadAll()
    // Offset: 0x15DC438
    void ReadAll();
    // private System.Void WriteCallbackWrapper(System.IAsyncResult r)
    // Offset: 0x15DC97C
    void WriteCallbackWrapper(System::IAsyncResult* r);
    // private System.Void ReadCallbackWrapper(System.IAsyncResult r)
    // Offset: 0x15DCBC0
    void ReadCallbackWrapper(System::IAsyncResult* r);
    // private System.Void WriteAsyncCB(System.IAsyncResult r)
    // Offset: 0x15DD5A4
    void WriteAsyncCB(System::IAsyncResult* r);
    // private System.Void CheckWriteOverflow(System.Int64 contentLength, System.Int64 totalWritten, System.Int64 size)
    // Offset: 0x15DDEF4
    void CheckWriteOverflow(int64_t contentLength, int64_t totalWritten, int64_t size);
    // System.Void SetHeadersAsync(System.Boolean setInternalLength, System.Net.SimpleAsyncCallback callback)
    // Offset: 0x15DE338
    void SetHeadersAsync(bool setInternalLength, System::Net::SimpleAsyncCallback* callback);
    // private System.Boolean SetHeadersAsync(System.Net.SimpleAsyncResult result, System.Boolean setInternalLength)
    // Offset: 0x15DE400
    bool SetHeadersAsync(System::Net::SimpleAsyncResult* result, bool setInternalLength);
    // System.Boolean WriteRequestAsync(System.Net.SimpleAsyncResult result)
    // Offset: 0x15DE6F4
    bool WriteRequestAsync(System::Net::SimpleAsyncResult* result);
    // System.Void InternalClose()
    // Offset: 0x15DE8B8
    void InternalClose();
    // System.Void KillBuffer()
    // Offset: 0x15DD874
    void KillBuffer();
    // public override System.Int32 get_ReadTimeout()
    // Offset: 0x15DC8AC
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_ReadTimeout()
    int get_ReadTimeout();
    // public override System.Int32 get_WriteTimeout()
    // Offset: 0x15DC8B4
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_WriteTimeout()
    int get_WriteTimeout();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x15DEC98
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanRead()
    // Offset: 0x15DECA0
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x15DECC0
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Int64 get_Length()
    // Offset: 0x15DECE0
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x15DED5C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x15DEDBC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // static private System.Void .cctor()
    // Offset: 0x15DEE1C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::.cctor()
    static void _cctor();
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x15DCDCC
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    int Read(::Array<uint8_t>* buffer, int offset, int size);
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback cb, System.Object state)
    // Offset: 0x15DCF44
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback cb, System.Object state)
    System::IAsyncResult* BeginRead(::Array<uint8_t>* buffer, int offset, int size, System::AsyncCallback* cb, ::Il2CppObject* state);
    // public override System.Int32 EndRead(System.IAsyncResult r)
    // Offset: 0x15DD25C
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::EndRead(System.IAsyncResult r)
    int EndRead(System::IAsyncResult* r);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback cb, System.Object state)
    // Offset: 0x15DD87C
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback cb, System.Object state)
    System::IAsyncResult* BeginWrite(::Array<uint8_t>* buffer, int offset, int size, System::AsyncCallback* cb, ::Il2CppObject* state);
    // public override System.Void EndWrite(System.IAsyncResult r)
    // Offset: 0x15DDFC4
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::EndWrite(System.IAsyncResult r)
    void EndWrite(System::IAsyncResult* r);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x15DE1B8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    void Write(::Array<uint8_t>* buffer, int offset, int size);
    // public override System.Void Flush()
    // Offset: 0x15DE334
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Void Close()
    // Offset: 0x15DE8CC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Close()
    void Close();
    // public override System.Int64 Seek(System.Int64 a, System.IO.SeekOrigin b)
    // Offset: 0x15DEBD8
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 a, System.IO.SeekOrigin b)
    int64_t Seek(int64_t a, System::IO::SeekOrigin b);
    // public override System.Void SetLength(System.Int64 a)
    // Offset: 0x15DEC38
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 a)
    void SetLength(int64_t a);
  }; // System.Net.WebConnectionStream
  #pragma pack(pop)
  static check_size<sizeof(WebConnectionStream), 209 + sizeof(bool)> __System_Net_WebConnectionStreamSizeCheck;
  static_assert(sizeof(WebConnectionStream) == 0xD2);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::WebConnectionStream*, "System.Net", "WebConnectionStream");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_Connection
// Il2CppName: get_Connection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::WebConnection* (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_Connection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_Connection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_CompleteRequestWritten
// Il2CppName: get_CompleteRequestWritten
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_CompleteRequestWritten)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_CompleteRequestWritten", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::set_SendChunked
// Il2CppName: set_SendChunked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(bool)>(&System::Net::WebConnectionStream::set_SendChunked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "set_SendChunked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::set_ReadBuffer
// Il2CppName: set_ReadBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(::Array<uint8_t>*)>(&System::Net::WebConnectionStream::set_ReadBuffer)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "set_ReadBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::set_ReadBufferOffset
// Il2CppName: set_ReadBufferOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(int)>(&System::Net::WebConnectionStream::set_ReadBufferOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "set_ReadBufferOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::set_ReadBufferSize
// Il2CppName: set_ReadBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(int)>(&System::Net::WebConnectionStream::set_ReadBufferSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "set_ReadBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_WriteBuffer
// Il2CppName: get_WriteBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_WriteBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_WriteBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_WriteBufferLength
// Il2CppName: get_WriteBufferLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_WriteBufferLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_WriteBufferLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_RequestWritten
// Il2CppName: get_RequestWritten
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_RequestWritten)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_RequestWritten", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_GetResponseOnClose
// Il2CppName: get_GetResponseOnClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_GetResponseOnClose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_GetResponseOnClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebConnectionStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebConnectionStream::CheckAuthHeader
// Il2CppName: CheckAuthHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)(::Il2CppString*)>(&System::Net::WebConnectionStream::CheckAuthHeader)> {
  static const MethodInfo* get() {
    static auto* headerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "CheckAuthHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headerName});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::IsNtlmAuth
// Il2CppName: IsNtlmAuth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::IsNtlmAuth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "IsNtlmAuth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::CheckResponseInBuffer
// Il2CppName: CheckResponseInBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::CheckResponseInBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "CheckResponseInBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::ForceCompletion
// Il2CppName: ForceCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::ForceCompletion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "ForceCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::CheckComplete
// Il2CppName: CheckComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::CheckComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "CheckComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::ReadAll
// Il2CppName: ReadAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::ReadAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "ReadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::WriteCallbackWrapper
// Il2CppName: WriteCallbackWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(System::IAsyncResult*)>(&System::Net::WebConnectionStream::WriteCallbackWrapper)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "WriteCallbackWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::ReadCallbackWrapper
// Il2CppName: ReadCallbackWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(System::IAsyncResult*)>(&System::Net::WebConnectionStream::ReadCallbackWrapper)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "ReadCallbackWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::WriteAsyncCB
// Il2CppName: WriteAsyncCB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(System::IAsyncResult*)>(&System::Net::WebConnectionStream::WriteAsyncCB)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "WriteAsyncCB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::CheckWriteOverflow
// Il2CppName: CheckWriteOverflow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(int64_t, int64_t, int64_t)>(&System::Net::WebConnectionStream::CheckWriteOverflow)> {
  static const MethodInfo* get() {
    static auto* contentLength = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* totalWritten = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "CheckWriteOverflow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentLength, totalWritten, size});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::SetHeadersAsync
// Il2CppName: SetHeadersAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(bool, System::Net::SimpleAsyncCallback*)>(&System::Net::WebConnectionStream::SetHeadersAsync)> {
  static const MethodInfo* get() {
    static auto* setInternalLength = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System.Net", "SimpleAsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "SetHeadersAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setInternalLength, callback});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::SetHeadersAsync
// Il2CppName: SetHeadersAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)(System::Net::SimpleAsyncResult*, bool)>(&System::Net::WebConnectionStream::SetHeadersAsync)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Net", "SimpleAsyncResult")->byval_arg;
    static auto* setInternalLength = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "SetHeadersAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, setInternalLength});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::WriteRequestAsync
// Il2CppName: WriteRequestAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)(System::Net::SimpleAsyncResult*)>(&System::Net::WebConnectionStream::WriteRequestAsync)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Net", "SimpleAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "WriteRequestAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::InternalClose
// Il2CppName: InternalClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::InternalClose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "InternalClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::KillBuffer
// Il2CppName: KillBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::KillBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "KillBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_ReadTimeout
// Il2CppName: get_ReadTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_ReadTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_ReadTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_WriteTimeout
// Il2CppName: get_WriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_WriteTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_WriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(int64_t)>(&System::Net::WebConnectionStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::WebConnectionStream::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebConnectionStream::*)(::Array<uint8_t>*, int, int)>(&System::Net::WebConnectionStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (System::Net::WebConnectionStream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::WebConnectionStream::BeginRead)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, cb, state});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebConnectionStream::*)(System::IAsyncResult*)>(&System::Net::WebConnectionStream::EndRead)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (System::Net::WebConnectionStream::*)(::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::WebConnectionStream::BeginWrite)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, cb, state});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(System::IAsyncResult*)>(&System::Net::WebConnectionStream::EndWrite)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(::Array<uint8_t>*, int, int)>(&System::Net::WebConnectionStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)()>(&System::Net::WebConnectionStream::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::WebConnectionStream::*)(int64_t, System::IO::SeekOrigin)>(&System::Net::WebConnectionStream::Seek)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnectionStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnectionStream::*)(int64_t)>(&System::Net::WebConnectionStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnectionStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
