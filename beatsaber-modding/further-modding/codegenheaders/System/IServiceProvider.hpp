// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.IServiceProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class IServiceProvider {
    public:
    // Creating value type constructor for type: IServiceProvider
    IServiceProvider() noexcept {}
    // public System.Object GetService(System.Type serviceType)
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* GetService(System::Type* serviceType);
  }; // System.IServiceProvider
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::IServiceProvider*, "System", "IServiceProvider");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IServiceProvider::GetService
// Il2CppName: GetService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::IServiceProvider::*)(System::Type*)>(&System::IServiceProvider::GetService)> {
  static const MethodInfo* get() {
    static auto* serviceType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IServiceProvider*), "GetService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serviceType});
  }
};
