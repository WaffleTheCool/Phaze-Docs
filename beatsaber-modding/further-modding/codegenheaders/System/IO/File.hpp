// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StreamWriter
  class StreamWriter;
  // Forward declaring type: FileStream
  class FileStream;
  // Forward declaring type: FileAttributes
  struct FileAttributes;
  // Forward declaring type: FileMode
  struct FileMode;
  // Forward declaring type: FileAccess
  struct FileAccess;
  // Forward declaring type: FileShare
  struct FileShare;
  // Forward declaring type: StreamReader
  class StreamReader;
  // Forward declaring type: MonoIOStat
  struct MonoIOStat;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.File
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: DA1B80
  class File : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: File
    File() noexcept {}
    // Get static field: static private System.Nullable`1<System.DateTime> defaultLocalFileTime
    static System::Nullable_1<System::DateTime> _get_defaultLocalFileTime();
    // Set static field: static private System.Nullable`1<System.DateTime> defaultLocalFileTime
    static void _set_defaultLocalFileTime(System::Nullable_1<System::DateTime> value);
    // static private System.DateTime get_DefaultLocalFileTime()
    // Offset: 0x1973900
    static System::DateTime get_DefaultLocalFileTime();
    // static public System.IO.StreamWriter AppendText(System.String path)
    // Offset: 0x1972F9C
    static System::IO::StreamWriter* AppendText(::Il2CppString* path);
    // static public System.IO.FileStream Create(System.String path)
    // Offset: 0x197308C
    static System::IO::FileStream* Create(::Il2CppString* path);
    // static public System.IO.FileStream Create(System.String path, System.Int32 bufferSize)
    // Offset: 0x1973094
    static System::IO::FileStream* Create(::Il2CppString* path, int bufferSize);
    // static public System.IO.StreamWriter CreateText(System.String path)
    // Offset: 0x1973144
    static System::IO::StreamWriter* CreateText(::Il2CppString* path);
    // static public System.Void Delete(System.String path)
    // Offset: 0x1971AF4
    static void Delete(::Il2CppString* path);
    // static public System.Boolean Exists(System.String path)
    // Offset: 0x19709F8
    static bool Exists(::Il2CppString* path);
    // static public System.IO.FileAttributes GetAttributes(System.String path)
    // Offset: 0x19735D0
    static System::IO::FileAttributes GetAttributes(::Il2CppString* path);
    // static public System.DateTime GetCreationTime(System.String path)
    // Offset: 0x197373C
    static System::DateTime GetCreationTime(::Il2CppString* path);
    // static public System.DateTime GetLastWriteTime(System.String path)
    // Offset: 0x19739D4
    static System::DateTime GetLastWriteTime(::Il2CppString* path);
    // static public System.IO.FileStream Open(System.String path, System.IO.FileMode mode)
    // Offset: 0x1973B0C
    static System::IO::FileStream* Open(::Il2CppString* path, System::IO::FileMode mode);
    // static public System.IO.FileStream Open(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
    // Offset: 0x1973BCC
    static System::IO::FileStream* Open(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);
    // static public System.IO.FileStream OpenRead(System.String path)
    // Offset: 0x1973C68
    static System::IO::FileStream* OpenRead(::Il2CppString* path);
    // static public System.IO.StreamReader OpenText(System.String path)
    // Offset: 0x1973CE8
    static System::IO::StreamReader* OpenText(::Il2CppString* path);
    // static public System.Void Replace(System.String sourceFileName, System.String destinationFileName, System.String destinationBackupFileName)
    // Offset: 0x1973D54
    static void Replace(::Il2CppString* sourceFileName, ::Il2CppString* destinationFileName, ::Il2CppString* destinationBackupFileName);
    // static public System.Void Replace(System.String sourceFileName, System.String destinationFileName, System.String destinationBackupFileName, System.Boolean ignoreMetadataErrors)
    // Offset: 0x1973D5C
    static void Replace(::Il2CppString* sourceFileName, ::Il2CppString* destinationFileName, ::Il2CppString* destinationBackupFileName, bool ignoreMetadataErrors);
    // static public System.Byte[] ReadAllBytes(System.String path)
    // Offset: 0x197448C
    static ::Array<uint8_t>* ReadAllBytes(::Il2CppString* path);
    // static public System.String[] ReadAllLines(System.String path)
    // Offset: 0x19746C0
    static ::Array<::Il2CppString*>* ReadAllLines(::Il2CppString* path);
    // static private System.String[] ReadAllLines(System.IO.StreamReader reader)
    // Offset: 0x19747C4
    static ::Array<::Il2CppString*>* ReadAllLines(System::IO::StreamReader* reader);
    // static public System.String ReadAllText(System.String path)
    // Offset: 0x19748F8
    static ::Il2CppString* ReadAllText(::Il2CppString* path);
    // static public System.Void WriteAllBytes(System.String path, System.Byte[] bytes)
    // Offset: 0x1974A24
    static void WriteAllBytes(::Il2CppString* path, ::Array<uint8_t>* bytes);
    // static public System.Void WriteAllLines(System.String path, System.String[] contents)
    // Offset: 0x1974B4C
    static void WriteAllLines(::Il2CppString* path, ::Array<::Il2CppString*>* contents);
    // static private System.Void WriteAllLines(System.IO.StreamWriter writer, System.String[] contents)
    // Offset: 0x1974CE8
    static void WriteAllLines(System::IO::StreamWriter* writer, ::Array<::Il2CppString*>* contents);
    // static public System.Void WriteAllText(System.String path, System.String contents)
    // Offset: 0x1974D70
    static void WriteAllText(::Il2CppString* path, ::Il2CppString* contents);
    // static public System.Void WriteAllText(System.String path, System.String contents, System.Text.Encoding encoding)
    // Offset: 0x1974DF0
    static void WriteAllText(::Il2CppString* path, ::Il2CppString* contents, System::Text::Encoding* encoding);
    // static public System.Void AppendAllLines(System.String path, System.Collections.Generic.IEnumerable`1<System.String> contents)
    // Offset: 0x1974F38
    static void AppendAllLines(::Il2CppString* path, System::Collections::Generic::IEnumerable_1<::Il2CppString*>* contents);
    // static System.Int32 FillAttributeInfo(System.String path, ref System.IO.MonoIOStat data, System.Boolean tryagain, System.Boolean returnErrorOnNotFound)
    // Offset: 0x1975290
    static int FillAttributeInfo(::Il2CppString* path, ByRef<System::IO::MonoIOStat> data, bool tryagain, bool returnErrorOnNotFound);
  }; // System.IO.File
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::IO::File*, "System.IO", "File");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::File::get_DefaultLocalFileTime
// Il2CppName: get_DefaultLocalFileTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)()>(&System::IO::File::get_DefaultLocalFileTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "get_DefaultLocalFileTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::File::AppendText
// Il2CppName: AppendText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamWriter* (*)(::Il2CppString*)>(&System::IO::File::AppendText)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "AppendText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*)>(&System::IO::File::Create)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, int)>(&System::IO::File::Create)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, bufferSize});
  }
};
// Writing MetadataGetter for method: System::IO::File::CreateText
// Il2CppName: CreateText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamWriter* (*)(::Il2CppString*)>(&System::IO::File::CreateText)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "CreateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&System::IO::File::Delete)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::Exists
// Il2CppName: Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&System::IO::File::Exists)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileAttributes (*)(::Il2CppString*)>(&System::IO::File::GetAttributes)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::GetCreationTime
// Il2CppName: GetCreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)(::Il2CppString*)>(&System::IO::File::GetCreationTime)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "GetCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::GetLastWriteTime
// Il2CppName: GetLastWriteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)(::Il2CppString*)>(&System::IO::File::GetLastWriteTime)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "GetLastWriteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, System::IO::FileMode)>(&System::IO::File::Open)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.IO", "FileMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, mode});
  }
};
// Writing MetadataGetter for method: System::IO::File::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, System::IO::FileMode, System::IO::FileAccess, System::IO::FileShare)>(&System::IO::File::Open)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.IO", "FileMode")->byval_arg;
    static auto* access = &::il2cpp_utils::GetClassFromName("System.IO", "FileAccess")->byval_arg;
    static auto* share = &::il2cpp_utils::GetClassFromName("System.IO", "FileShare")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, mode, access, share});
  }
};
// Writing MetadataGetter for method: System::IO::File::OpenRead
// Il2CppName: OpenRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*)>(&System::IO::File::OpenRead)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "OpenRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::OpenText
// Il2CppName: OpenText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamReader* (*)(::Il2CppString*)>(&System::IO::File::OpenText)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "OpenText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&System::IO::File::Replace)> {
  static const MethodInfo* get() {
    static auto* sourceFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destinationFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destinationBackupFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceFileName, destinationFileName, destinationBackupFileName});
  }
};
// Writing MetadataGetter for method: System::IO::File::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool)>(&System::IO::File::Replace)> {
  static const MethodInfo* get() {
    static auto* sourceFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destinationFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destinationBackupFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ignoreMetadataErrors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceFileName, destinationFileName, destinationBackupFileName, ignoreMetadataErrors});
  }
};
// Writing MetadataGetter for method: System::IO::File::ReadAllBytes
// Il2CppName: ReadAllBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Il2CppString*)>(&System::IO::File::ReadAllBytes)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "ReadAllBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::ReadAllLines
// Il2CppName: ReadAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*)>(&System::IO::File::ReadAllLines)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "ReadAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::ReadAllLines
// Il2CppName: ReadAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(System::IO::StreamReader*)>(&System::IO::File::ReadAllLines)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "StreamReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "ReadAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::IO::File::ReadAllText
// Il2CppName: ReadAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&System::IO::File::ReadAllText)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "ReadAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::File::WriteAllBytes
// Il2CppName: WriteAllBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<uint8_t>*)>(&System::IO::File::WriteAllBytes)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "WriteAllBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, bytes});
  }
};
// Writing MetadataGetter for method: System::IO::File::WriteAllLines
// Il2CppName: WriteAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&System::IO::File::WriteAllLines)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* contents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "WriteAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, contents});
  }
};
// Writing MetadataGetter for method: System::IO::File::WriteAllLines
// Il2CppName: WriteAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IO::StreamWriter*, ::Array<::Il2CppString*>*)>(&System::IO::File::WriteAllLines)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.IO", "StreamWriter")->byval_arg;
    static auto* contents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "WriteAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, contents});
  }
};
// Writing MetadataGetter for method: System::IO::File::WriteAllText
// Il2CppName: WriteAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*)>(&System::IO::File::WriteAllText)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* contents = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "WriteAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, contents});
  }
};
// Writing MetadataGetter for method: System::IO::File::WriteAllText
// Il2CppName: WriteAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, System::Text::Encoding*)>(&System::IO::File::WriteAllText)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* contents = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "WriteAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, contents, encoding});
  }
};
// Writing MetadataGetter for method: System::IO::File::AppendAllLines
// Il2CppName: AppendAllLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&System::IO::File::AppendAllLines)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* contents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "AppendAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, contents});
  }
};
// Writing MetadataGetter for method: System::IO::File::FillAttributeInfo
// Il2CppName: FillAttributeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ByRef<System::IO::MonoIOStat>, bool, bool)>(&System::IO::File::FillAttributeInfo)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOStat")->this_arg;
    static auto* tryagain = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* returnErrorOnNotFound = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::File*), "FillAttributeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, data, tryagain, returnErrorOnNotFound});
  }
};
