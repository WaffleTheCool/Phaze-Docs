// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: System.Collections.Concurrent
namespace System::Collections::Concurrent {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.Concurrent.IProducerConsumerCollection`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IProducerConsumerCollection_1/*, public System::Collections::Generic::IEnumerable_1<T>, public System::Collections::ICollection*/ {
    public:
    // Creating value type constructor for type: IProducerConsumerCollection_1
    IProducerConsumerCollection_1() noexcept {}
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerable_1<T>
    operator System::Collections::Generic::IEnumerable_1<T>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerable_1<T>*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::ICollection
    operator System::Collections::ICollection() noexcept {
      return *reinterpret_cast<System::Collections::ICollection*>(this);
    }
    // public System.Boolean TryAdd(T item)
    // Offset: 0xFFFFFFFF
    bool TryAdd(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Concurrent::IProducerConsumerCollection_1::TryAdd");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, item);
    }
    // public System.Boolean TryTake(out T item)
    // Offset: 0xFFFFFFFF
    bool TryTake(ByRef<T> item) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Concurrent::IProducerConsumerCollection_1::TryTake");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryTake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T&>()})));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___internal__method, byref(item));
    }
    // public T[] ToArray()
    // Offset: 0xFFFFFFFF
    ::Array<T>* ToArray() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Concurrent::IProducerConsumerCollection_1::ToArray");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(___instance_arg, ___internal__method);
    }
  }; // System.Collections.Concurrent.IProducerConsumerCollection`1
  // Could not write size check! Type: System.Collections.Concurrent.IProducerConsumerCollection`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::Concurrent::IProducerConsumerCollection_1, "System.Collections.Concurrent", "IProducerConsumerCollection`1");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
