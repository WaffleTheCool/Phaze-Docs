// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: EaseType
  struct EaseType;
}
// Completed forward declares
// Type namespace: Tweening
namespace Tweening {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Tweening.Interpolation
  // [TokenAttribute] Offset: FFFFFFFF
  class Interpolation : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Interpolation
    Interpolation() noexcept {}
    // static public System.Single Interpolate(System.Single t, Tweening.EaseType easeType)
    // Offset: 0x12938F8
    static float Interpolate(float t, Tweening::EaseType easeType);
  }; // Tweening.Interpolation
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Tweening::Interpolation*, "Tweening", "Interpolation");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tweening::Interpolation::Interpolate
// Il2CppName: Interpolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, Tweening::EaseType)>(&Tweening::Interpolation::Interpolate)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easeType = &::il2cpp_utils::GetClassFromName("Tweening", "EaseType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tweening::Interpolation*), "Interpolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, easeType});
  }
};
