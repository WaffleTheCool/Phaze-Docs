// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VertexAttributeDescriptor
#include "UnityEngine/Rendering/VertexAttributeDescriptor.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: UnityEngine.BoneWeight1
#include "UnityEngine/BoneWeight1.hpp"
// Including type: UnityEngine.CombineInstance
#include "UnityEngine/CombineInstance.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Rendering.MeshUpdateFlags
#include "UnityEngine/Rendering/MeshUpdateFlags.hpp"
// Including type: UnityEngine.MeshTopology
#include "UnityEngine/MeshTopology.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IndexFormat
  struct IndexFormat;
  // Forward declaring type: SubMeshDescriptor
  struct SubMeshDescriptor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
  // Forward declaring type: Array
  class Array;
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Mesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: DB4414
  // [NativeHeaderAttribute] Offset: DB4414
  class Mesh : public UnityEngine::Object {
    public:
    // Creating value type constructor for type: Mesh
    Mesh() noexcept {}
    // public UnityEngine.Rendering.IndexFormat get_indexFormat()
    // Offset: 0x1D00224
    UnityEngine::Rendering::IndexFormat get_indexFormat();
    // public System.Void set_indexFormat(UnityEngine.Rendering.IndexFormat value)
    // Offset: 0x1D00264
    void set_indexFormat(UnityEngine::Rendering::IndexFormat value);
    // public System.Int32 get_vertexBufferCount()
    // Offset: 0x1D00F9C
    int get_vertexBufferCount();
    // public System.Int32 get_blendShapeCount()
    // Offset: 0x1D0106C
    int get_blendShapeCount();
    // public UnityEngine.Matrix4x4[] get_bindposes()
    // Offset: 0x1D01838
    ::Array<UnityEngine::Matrix4x4>* get_bindposes();
    // public System.Void set_bindposes(UnityEngine.Matrix4x4[] value)
    // Offset: 0x1D01878
    void set_bindposes(::Array<UnityEngine::Matrix4x4>* value);
    // public System.Boolean get_isReadable()
    // Offset: 0x1D01968
    bool get_isReadable();
    // System.Boolean get_canAccess()
    // Offset: 0x1D019A8
    bool get_canAccess();
    // public System.Int32 get_vertexCount()
    // Offset: 0x1D01778
    int get_vertexCount();
    // public System.Int32 get_subMeshCount()
    // Offset: 0x1D019E8
    int get_subMeshCount();
    // public System.Void set_subMeshCount(System.Int32 value)
    // Offset: 0x1D01A28
    void set_subMeshCount(int value);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x1D01C20
    UnityEngine::Bounds get_bounds();
    // public System.Void set_bounds(UnityEngine.Bounds value)
    // Offset: 0x1D01CDC
    void set_bounds(UnityEngine::Bounds value);
    // public UnityEngine.Vector3[] get_vertices()
    // Offset: 0x1D0278C
    ::Array<UnityEngine::Vector3>* get_vertices();
    // public System.Void set_vertices(UnityEngine.Vector3[] value)
    // Offset: 0x1D027E0
    void set_vertices(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector3[] get_normals()
    // Offset: 0x1D02844
    ::Array<UnityEngine::Vector3>* get_normals();
    // public System.Void set_normals(UnityEngine.Vector3[] value)
    // Offset: 0x1D02898
    void set_normals(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector4[] get_tangents()
    // Offset: 0x1D028FC
    ::Array<UnityEngine::Vector4>* get_tangents();
    // public System.Void set_tangents(UnityEngine.Vector4[] value)
    // Offset: 0x1D02950
    void set_tangents(::Array<UnityEngine::Vector4>* value);
    // public UnityEngine.Vector2[] get_uv()
    // Offset: 0x1D029B4
    ::Array<UnityEngine::Vector2>* get_uv();
    // public System.Void set_uv(UnityEngine.Vector2[] value)
    // Offset: 0x1D02A08
    void set_uv(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv2()
    // Offset: 0x1D02A6C
    ::Array<UnityEngine::Vector2>* get_uv2();
    // public System.Void set_uv2(UnityEngine.Vector2[] value)
    // Offset: 0x1D02AC0
    void set_uv2(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv3()
    // Offset: 0x1D02B24
    ::Array<UnityEngine::Vector2>* get_uv3();
    // public System.Void set_uv3(UnityEngine.Vector2[] value)
    // Offset: 0x1D02B78
    void set_uv3(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv4()
    // Offset: 0x1D02BDC
    ::Array<UnityEngine::Vector2>* get_uv4();
    // public System.Void set_uv4(UnityEngine.Vector2[] value)
    // Offset: 0x1D02C30
    void set_uv4(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv5()
    // Offset: 0x1D02C94
    ::Array<UnityEngine::Vector2>* get_uv5();
    // public System.Void set_uv5(UnityEngine.Vector2[] value)
    // Offset: 0x1D02CE8
    void set_uv5(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv6()
    // Offset: 0x1D02D4C
    ::Array<UnityEngine::Vector2>* get_uv6();
    // public System.Void set_uv6(UnityEngine.Vector2[] value)
    // Offset: 0x1D02DA0
    void set_uv6(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv7()
    // Offset: 0x1D02E04
    ::Array<UnityEngine::Vector2>* get_uv7();
    // public System.Void set_uv7(UnityEngine.Vector2[] value)
    // Offset: 0x1D02E58
    void set_uv7(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv8()
    // Offset: 0x1D02EBC
    ::Array<UnityEngine::Vector2>* get_uv8();
    // public System.Void set_uv8(UnityEngine.Vector2[] value)
    // Offset: 0x1D02F10
    void set_uv8(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Color[] get_colors()
    // Offset: 0x1D02F74
    ::Array<UnityEngine::Color>* get_colors();
    // public System.Void set_colors(UnityEngine.Color[] value)
    // Offset: 0x1D02FC8
    void set_colors(::Array<UnityEngine::Color>* value);
    // public UnityEngine.Color32[] get_colors32()
    // Offset: 0x1D0302C
    ::Array<UnityEngine::Color32>* get_colors32();
    // public System.Void set_colors32(UnityEngine.Color32[] value)
    // Offset: 0x1D03088
    void set_colors32(::Array<UnityEngine::Color32>* value);
    // public System.Int32 get_vertexAttributeCount()
    // Offset: 0x1D045C0
    int get_vertexAttributeCount();
    // public System.Int32[] get_triangles()
    // Offset: 0x1D0498C
    ::Array<int>* get_triangles();
    // public System.Void set_triangles(System.Int32[] value)
    // Offset: 0x1D04A48
    void set_triangles(::Array<int>* value);
    // public UnityEngine.BoneWeight[] get_boneWeights()
    // Offset: 0x1D0663C
    ::Array<UnityEngine::BoneWeight>* get_boneWeights();
    // public System.Void set_boneWeights(UnityEngine.BoneWeight[] value)
    // Offset: 0x1D0667C
    void set_boneWeights(::Array<UnityEngine::BoneWeight>* value);
    // static private System.Void Internal_Create(UnityEngine.Mesh mono)
    // Offset: 0x1D00114
    static void Internal_Create(UnityEngine::Mesh* mono);
    // static UnityEngine.Mesh FromInstanceID(System.Int32 id)
    // Offset: 0x1D001E4
    static UnityEngine::Mesh* FromInstanceID(int id);
    // public System.Void SetIndexBufferParams(System.Int32 indexCount, UnityEngine.Rendering.IndexFormat format)
    // Offset: 0x1D002B4
    void SetIndexBufferParams(int indexCount, UnityEngine::Rendering::IndexFormat format);
    // private System.Void InternalSetIndexBufferData(System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1D0030C
    void InternalSetIndexBufferData(System::IntPtr data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void InternalSetIndexBufferDataFromArray(System.Array data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1D00394
    void InternalSetIndexBufferDataFromArray(System::Array* data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1D0041C
    void SetVertexBufferParams(int vertexCount, ::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // Creating initializer_list -> params proxy for: System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    void SetVertexBufferParams(int vertexCount, std::initializer_list<UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // Creating TArgs -> initializer_list proxy for: System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    template<class ...TParams>
    void SetVertexBufferParams(int vertexCount, TParams&&... attributes) {
      SetVertexBufferParams(vertexCount, {attributes...});
    }
    // private System.Void InternalSetVertexBufferData(System.Int32 stream, System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1D00474
    void InternalSetVertexBufferData(int stream, System::IntPtr data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void InternalSetVertexBufferDataFromArray(System.Int32 stream, System.Array data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1D0050C
    void InternalSetVertexBufferDataFromArray(int stream, System::Array* data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Array GetVertexAttributesAlloc()
    // Offset: 0x1D005A4
    System::Array* GetVertexAttributesAlloc();
    // private System.Int32 GetVertexAttributesArray(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1D005E4
    int GetVertexAttributesArray(::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // private System.Int32 GetVertexAttributesList(System.Collections.Generic.List`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x1D00634
    int GetVertexAttributesList(System::Collections::Generic::List_1<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // private System.Int32 GetVertexAttributeCountImpl()
    // Offset: 0x1D00684
    int GetVertexAttributeCountImpl();
    // public UnityEngine.Rendering.VertexAttributeDescriptor GetVertexAttribute(System.Int32 index)
    // Offset: 0x1D006C4
    UnityEngine::Rendering::VertexAttributeDescriptor GetVertexAttribute(int index);
    // private System.UInt32 GetIndexStartImpl(System.Int32 submesh)
    // Offset: 0x1D00784
    uint GetIndexStartImpl(int submesh);
    // private System.UInt32 GetIndexCountImpl(System.Int32 submesh)
    // Offset: 0x1D007D4
    uint GetIndexCountImpl(int submesh);
    // private System.UInt32 GetTrianglesCountImpl(System.Int32 submesh)
    // Offset: 0x1D00824
    uint GetTrianglesCountImpl(int submesh);
    // private System.UInt32 GetBaseVertexImpl(System.Int32 submesh)
    // Offset: 0x1D00874
    uint GetBaseVertexImpl(int submesh);
    // private System.Int32[] GetTrianglesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D008C4
    ::Array<int>* GetTrianglesImpl(int submesh, bool applyBaseVertex);
    // private System.Int32[] GetIndicesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D0091C
    ::Array<int>* GetIndicesImpl(int submesh, bool applyBaseVertex);
    // private System.Void SetIndicesImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D00974
    void SetIndicesImpl(int submesh, UnityEngine::MeshTopology topology, UnityEngine::Rendering::IndexFormat indicesFormat, System::Array* indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void SetIndicesNativeArrayImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.IntPtr indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D00A14
    void SetIndicesNativeArrayImpl(int submesh, UnityEngine::MeshTopology topology, UnityEngine::Rendering::IndexFormat indicesFormat, System::IntPtr indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void GetTrianglesNonAllocImpl(out System.Int32[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D00AB4
    void GetTrianglesNonAllocImpl(ByRef<::Array<int>*> values, int submesh, bool applyBaseVertex);
    // private System.Void GetTrianglesNonAllocImpl16(out System.UInt16[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D00B1C
    void GetTrianglesNonAllocImpl16(ByRef<::Array<uint16_t>*> values, int submesh, bool applyBaseVertex);
    // private System.Void GetIndicesNonAllocImpl(out System.Int32[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D00B84
    void GetIndicesNonAllocImpl(ByRef<::Array<int>*> values, int submesh, bool applyBaseVertex);
    // private System.Void GetIndicesNonAllocImpl16(out System.UInt16[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D00BEC
    void GetIndicesNonAllocImpl16(ByRef<::Array<uint16_t>*> values, int submesh, bool applyBaseVertex);
    // private System.Void PrintErrorCantAccessChannel(UnityEngine.Rendering.VertexAttribute ch)
    // Offset: 0x1D00C54
    void PrintErrorCantAccessChannel(UnityEngine::Rendering::VertexAttribute ch);
    // public System.Boolean HasVertexAttribute(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1D00CA4
    bool HasVertexAttribute(UnityEngine::Rendering::VertexAttribute attr);
    // public System.Int32 GetVertexAttributeDimension(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1D00CF4
    int GetVertexAttributeDimension(UnityEngine::Rendering::VertexAttribute attr);
    // public UnityEngine.Rendering.VertexAttributeFormat GetVertexAttributeFormat(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1D00D44
    UnityEngine::Rendering::VertexAttributeFormat GetVertexAttributeFormat(UnityEngine::Rendering::VertexAttribute attr);
    // private System.Void SetArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1D00D94
    void SetArrayForChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values, int arraySize, int valuesStart, int valuesCount);
    // private System.Void SetNativeArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.IntPtr values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1D00E2C
    void SetNativeArrayForChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::IntPtr values, int arraySize, int valuesStart, int valuesCount);
    // private System.Array GetAllocArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0x1D00EC4
    System::Array* GetAllocArrayFromChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim);
    // private System.Void GetArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values)
    // Offset: 0x1D00F2C
    void GetArrayFromChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values);
    // public System.IntPtr GetNativeVertexBufferPtr(System.Int32 index)
    // Offset: 0x1D00FDC
    System::IntPtr GetNativeVertexBufferPtr(int index);
    // public System.IntPtr GetNativeIndexBufferPtr()
    // Offset: 0x1D0102C
    System::IntPtr GetNativeIndexBufferPtr();
    // public System.Void ClearBlendShapes()
    // Offset: 0x1D010AC
    void ClearBlendShapes();
    // public System.String GetBlendShapeName(System.Int32 shapeIndex)
    // Offset: 0x1D010EC
    ::Il2CppString* GetBlendShapeName(int shapeIndex);
    // public System.Int32 GetBlendShapeIndex(System.String blendShapeName)
    // Offset: 0x1D0113C
    int GetBlendShapeIndex(::Il2CppString* blendShapeName);
    // public System.Int32 GetBlendShapeFrameCount(System.Int32 shapeIndex)
    // Offset: 0x1D0118C
    int GetBlendShapeFrameCount(int shapeIndex);
    // public System.Single GetBlendShapeFrameWeight(System.Int32 shapeIndex, System.Int32 frameIndex)
    // Offset: 0x1D011DC
    float GetBlendShapeFrameWeight(int shapeIndex, int frameIndex);
    // public System.Void GetBlendShapeFrameVertices(System.Int32 shapeIndex, System.Int32 frameIndex, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents)
    // Offset: 0x1D01234
    void GetBlendShapeFrameVertices(int shapeIndex, int frameIndex, ::Array<UnityEngine::Vector3>* deltaVertices, ::Array<UnityEngine::Vector3>* deltaNormals, ::Array<UnityEngine::Vector3>* deltaTangents);
    // public System.Void AddBlendShapeFrame(System.String shapeName, System.Single frameWeight, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents)
    // Offset: 0x1D012B4
    void AddBlendShapeFrame(::Il2CppString* shapeName, float frameWeight, ::Array<UnityEngine::Vector3>* deltaVertices, ::Array<UnityEngine::Vector3>* deltaNormals, ::Array<UnityEngine::Vector3>* deltaTangents);
    // private System.Boolean HasBoneWeights()
    // Offset: 0x1D01334
    bool HasBoneWeights();
    // private UnityEngine.BoneWeight[] GetBoneWeightsImpl()
    // Offset: 0x1D01374
    ::Array<UnityEngine::BoneWeight>* GetBoneWeightsImpl();
    // private System.Void SetBoneWeightsImpl(UnityEngine.BoneWeight[] weights)
    // Offset: 0x1D013B4
    void SetBoneWeightsImpl(::Array<UnityEngine::BoneWeight>* weights);
    // public System.Void SetBoneWeights(Unity.Collections.NativeArray`1<System.Byte> bonesPerVertex, Unity.Collections.NativeArray`1<UnityEngine.BoneWeight1> weights)
    // Offset: 0x1D01404
    void SetBoneWeights(Unity::Collections::NativeArray_1<uint8_t> bonesPerVertex, Unity::Collections::NativeArray_1<UnityEngine::BoneWeight1> weights);
    // private System.Void InternalSetBoneWeights(System.IntPtr bonesPerVertex, System.Int32 bonesPerVertexSize, System.IntPtr weights, System.Int32 weightsSize)
    // Offset: 0x1D014E0
    void InternalSetBoneWeights(System::IntPtr bonesPerVertex, int bonesPerVertexSize, System::IntPtr weights, int weightsSize);
    // public Unity.Collections.NativeArray`1<UnityEngine.BoneWeight1> GetAllBoneWeights()
    // Offset: 0x1D01550
    Unity::Collections::NativeArray_1<UnityEngine::BoneWeight1> GetAllBoneWeights();
    // public Unity.Collections.NativeArray`1<System.Byte> GetBonesPerVertex()
    // Offset: 0x1D0168C
    Unity::Collections::NativeArray_1<uint8_t> GetBonesPerVertex();
    // private System.Int32 GetAllBoneWeightsArraySize()
    // Offset: 0x1D0164C
    int GetAllBoneWeightsArraySize();
    // private System.IntPtr GetAllBoneWeightsArray()
    // Offset: 0x1D0160C
    System::IntPtr GetAllBoneWeightsArray();
    // private System.IntPtr GetBonesPerVertexArray()
    // Offset: 0x1D017B8
    System::IntPtr GetBonesPerVertexArray();
    // private System.Int32 GetBindposeCount()
    // Offset: 0x1D017F8
    int GetBindposeCount();
    // private System.Void GetBoneWeightsNonAllocImpl(out UnityEngine.BoneWeight[] values)
    // Offset: 0x1D018C8
    void GetBoneWeightsNonAllocImpl(ByRef<::Array<UnityEngine::BoneWeight>*> values);
    // private System.Void GetBindposesNonAllocImpl(out UnityEngine.Matrix4x4[] values)
    // Offset: 0x1D01918
    void GetBindposesNonAllocImpl(ByRef<::Array<UnityEngine::Matrix4x4>*> values);
    // public System.Void SetSubMesh(System.Int32 index, UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1D01A78
    void SetSubMesh(int index, UnityEngine::Rendering::SubMeshDescriptor desc, UnityEngine::Rendering::MeshUpdateFlags flags);
    // public UnityEngine.Rendering.SubMeshDescriptor GetSubMesh(System.Int32 index)
    // Offset: 0x1D01B48
    UnityEngine::Rendering::SubMeshDescriptor GetSubMesh(int index);
    // private System.Void ClearImpl(System.Boolean keepVertexLayout)
    // Offset: 0x1D01D7C
    void ClearImpl(bool keepVertexLayout);
    // private System.Void RecalculateBoundsImpl()
    // Offset: 0x1D01DCC
    void RecalculateBoundsImpl();
    // private System.Void RecalculateNormalsImpl()
    // Offset: 0x1D01E0C
    void RecalculateNormalsImpl();
    // private System.Void RecalculateTangentsImpl()
    // Offset: 0x1D01E4C
    void RecalculateTangentsImpl();
    // private System.Void MarkDynamicImpl()
    // Offset: 0x1D01E8C
    void MarkDynamicImpl();
    // public System.Void MarkModified()
    // Offset: 0x1D01ECC
    void MarkModified();
    // private System.Void UploadMeshDataImpl(System.Boolean markNoLongerReadable)
    // Offset: 0x1D01F0C
    void UploadMeshDataImpl(bool markNoLongerReadable);
    // private UnityEngine.MeshTopology GetTopologyImpl(System.Int32 submesh)
    // Offset: 0x1D01F5C
    UnityEngine::MeshTopology GetTopologyImpl(int submesh);
    // public System.Single GetUVDistributionMetric(System.Int32 uvSetIndex)
    // Offset: 0x1D01FAC
    float GetUVDistributionMetric(int uvSetIndex);
    // private System.Void CombineMeshesImpl(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)
    // Offset: 0x1D01FFC
    void CombineMeshesImpl(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
    // private System.Void OptimizeImpl()
    // Offset: 0x1D0206C
    void OptimizeImpl();
    // private System.Void OptimizeIndexBuffersImpl()
    // Offset: 0x1D020AC
    void OptimizeIndexBuffersImpl();
    // private System.Void OptimizeReorderVertexBufferImpl()
    // Offset: 0x1D020EC
    void OptimizeReorderVertexBufferImpl();
    // UnityEngine.Rendering.VertexAttribute GetUVChannel(System.Int32 uvIndex)
    // Offset: 0x1D0212C
    UnityEngine::Rendering::VertexAttribute GetUVChannel(int uvIndex);
    // static System.Int32 DefaultDimensionForChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0x1D021C0
    static int DefaultDimensionForChannel(UnityEngine::Rendering::VertexAttribute channel);
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetAllocArrayFromChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(___instance_arg, ___generic__method, channel, format, dim);
    }
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetAllocArrayFromChannel(UnityEngine::Rendering::VertexAttribute channel) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(___instance_arg, ___generic__method, channel);
    }
    // private System.Void SetSizedArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1D0227C
    void SetSizedArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values, int valuesArrayLength, int valuesStart, int valuesCount);
    // private System.Void SetSizedNativeArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.IntPtr values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1D02508
    void SetSizedNativeArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::IntPtr values, int valuesArrayLength, int valuesStart, int valuesCount);
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, T[] values)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::Array<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, channel, format, dim, values);
    }
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, T[] values)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, ::Array<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, channel, values);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetListForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Collections::Generic::List_1<T>* values, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, channel, format, dim, values, start, length);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetListForChannel(UnityEngine::Rendering::VertexAttribute channel, System::Collections::Generic::List_1<T>* values, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, channel, values, start, length);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetListForChannel(System::Collections::Generic::List_1<T>* buffer, int capacity, UnityEngine::Rendering::VertexAttribute channel, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, buffer, capacity, channel, dim);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim, UnityEngine.Rendering.VertexAttributeFormat channelType)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetListForChannel(System::Collections::Generic::List_1<T>* buffer, int capacity, UnityEngine::Rendering::VertexAttribute channel, int dim, UnityEngine::Rendering::VertexAttributeFormat channelType) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(channelType)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, buffer, capacity, channel, dim, channelType);
    }
    // public System.Void GetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> vertices)
    // Offset: 0x1D030F4
    void GetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* vertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices)
    // Offset: 0x1D031FC
    void SetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* inVertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x1D0326C
    void SetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* inVertices, int start, int length);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices)
    // Offset: 0x1D032E8
    void SetVertices(::Array<UnityEngine::Vector3>* inVertices);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x1D03340
    void SetVertices(::Array<UnityEngine::Vector3>* inVertices, int start, int length);
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertices(Unity::Collections::NativeArray_1<T> inVertices) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, inVertices);
    }
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertices(Unity::Collections::NativeArray_1<T> inVertices, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, inVertices, start, length);
    }
    // public System.Void GetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> normals)
    // Offset: 0x1D033E0
    void GetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* normals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals)
    // Offset: 0x1D034E8
    void SetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* inNormals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x1D03558
    void SetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* inNormals, int start, int length);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals)
    // Offset: 0x1D035D4
    void SetNormals(::Array<UnityEngine::Vector3>* inNormals);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x1D0361C
    void SetNormals(::Array<UnityEngine::Vector3>* inNormals, int start, int length);
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetNormals(Unity::Collections::NativeArray_1<T> inNormals) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, inNormals);
    }
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetNormals(Unity::Collections::NativeArray_1<T> inNormals, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, inNormals, start, length);
    }
    // public System.Void GetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> tangents)
    // Offset: 0x1D036BC
    void GetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* tangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents)
    // Offset: 0x1D037C4
    void SetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* inTangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x1D03834
    void SetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* inTangents, int start, int length);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents)
    // Offset: 0x1D038B0
    void SetTangents(::Array<UnityEngine::Vector4>* inTangents);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x1D038F8
    void SetTangents(::Array<UnityEngine::Vector4>* inTangents, int start, int length);
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetTangents(Unity::Collections::NativeArray_1<T> inTangents) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, inTangents);
    }
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetTangents(Unity::Collections::NativeArray_1<T> inTangents, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, inTangents, start, length);
    }
    // public System.Void GetColors(System.Collections.Generic.List`1<UnityEngine.Color> colors)
    // Offset: 0x1D03998
    void GetColors(System::Collections::Generic::List_1<UnityEngine::Color>* colors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors)
    // Offset: 0x1D03AA0
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1D03B10
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color>* inColors, int start, int length);
    // public System.Void SetColors(UnityEngine.Color[] inColors)
    // Offset: 0x1D03B8C
    void SetColors(::Array<UnityEngine::Color>* inColors);
    // public System.Void SetColors(UnityEngine.Color[] inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1D03BD4
    void SetColors(::Array<UnityEngine::Color>* inColors, int start, int length);
    // public System.Void GetColors(System.Collections.Generic.List`1<UnityEngine.Color32> colors)
    // Offset: 0x1D03C74
    void GetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* colors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors)
    // Offset: 0x1D03D58
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1D03DC8
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* inColors, int start, int length);
    // public System.Void SetColors(UnityEngine.Color32[] inColors)
    // Offset: 0x1D03E4C
    void SetColors(::Array<UnityEngine::Color32>* inColors);
    // public System.Void SetColors(UnityEngine.Color32[] inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1D03E94
    void SetColors(::Array<UnityEngine::Color32>* inColors, int start, int length);
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetColors(Unity::Collections::NativeArray_1<T> inColors) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, inColors);
    }
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetColors(Unity::Collections::NativeArray_1<T> inColors, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, inColors, start, length);
    }
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Collections.Generic.List`1<T> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUvsImpl(int uvIndex, int dim, System::Collections::Generic::List_1<T>* uvs, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUvsImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUvsImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvIndex), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, uvIndex, dim, uvs, start, length);
    }
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x1D03F08
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x1D04004
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1D04100
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1D03F80
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1D0407C
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1D04178
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs, int start, int length);
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Array uvs, System.Int32 arrayStart, System.Int32 arraySize)
    // Offset: 0x1D041FC
    void SetUvsImpl(int uvIndex, int dim, System::Array* uvs, int arrayStart, int arraySize);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs)
    // Offset: 0x1D0432C
    void SetUVs(int channel, ::Array<UnityEngine::Vector2>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs)
    // Offset: 0x1D0439C
    void SetUVs(int channel, ::Array<UnityEngine::Vector3>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs)
    // Offset: 0x1D0440C
    void SetUVs(int channel, ::Array<UnityEngine::Vector4>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1D04388
    void SetUVs(int channel, ::Array<UnityEngine::Vector2>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1D043F8
    void SetUVs(int channel, ::Array<UnityEngine::Vector3>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1D04468
    void SetUVs(int channel, ::Array<UnityEngine::Vector4>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUVs(int channel, Unity::Collections::NativeArray_1<T> uvs) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, channel, uvs);
    }
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUVs(int channel, Unity::Collections::NativeArray_1<T> uvs, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, channel, uvs, start, length);
    }
    // private System.Void GetUVsImpl(System.Int32 uvIndex, System.Collections.Generic.List`1<T> uvs, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetUVsImpl(int uvIndex, System::Collections::Generic::List_1<T>* uvs, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetUVsImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUVsImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvIndex), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, uvIndex, uvs, dim);
    }
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x1D0447C
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x1D044E8
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1D04554
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public UnityEngine.Rendering.VertexAttributeDescriptor[] GetVertexAttributes()
    // Offset: 0x1D04600
    ::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* GetVertexAttributes();
    // public System.Int32 GetVertexAttributes(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1D04694
    int GetVertexAttributes(::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // public System.Int32 GetVertexAttributes(System.Collections.Generic.List`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x1D046E4
    int GetVertexAttributes(System::Collections::Generic::List_1<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // public System.Void SetVertexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(Unity::Collections::NativeArray_1<T> data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // public System.Void SetVertexBufferData(T[] data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(::Array<T>* data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // public System.Void SetVertexBufferData(System.Collections.Generic.List`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(System::Collections::Generic::List_1<T>* data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // private System.Void PrintErrorCantAccessIndices()
    // Offset: 0x1D04734
    void PrintErrorCantAccessIndices();
    // private System.Boolean CheckCanAccessSubmesh(System.Int32 submesh, System.Boolean errorAboutTriangles)
    // Offset: 0x1D0484C
    bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles);
    // private System.Boolean CheckCanAccessSubmeshTriangles(System.Int32 submesh)
    // Offset: 0x1D0497C
    bool CheckCanAccessSubmeshTriangles(int submesh);
    // private System.Boolean CheckCanAccessSubmeshIndices(System.Int32 submesh)
    // Offset: 0x1D04984
    bool CheckCanAccessSubmeshIndices(int submesh);
    // public System.Int32[] GetTriangles(System.Int32 submesh)
    // Offset: 0x1D04BBC
    ::Array<int>* GetTriangles(int submesh);
    // public System.Int32[] GetTriangles(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D04BC4
    ::Array<int>* GetTriangles(int submesh, bool applyBaseVertex);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x1D04C74
    void GetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D04C7C
    void GetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool applyBaseVertex);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D04E10
    void GetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int submesh, bool applyBaseVertex);
    // public System.Int32[] GetIndices(System.Int32 submesh)
    // Offset: 0x1D04FA4
    ::Array<int>* GetIndices(int submesh);
    // public System.Int32[] GetIndices(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D04FAC
    ::Array<int>* GetIndices(int submesh, bool applyBaseVertex);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 submesh)
    // Offset: 0x1D0505C
    void GetIndices(System::Collections::Generic::List_1<int>* indices, int submesh);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D05064
    void GetIndices(System::Collections::Generic::List_1<int>* indices, int submesh, bool applyBaseVertex);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.UInt16> indices, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1D052BC
    void GetIndices(System::Collections::Generic::List_1<uint16_t>* indices, int submesh, bool applyBaseVertex);
    // public System.Void SetIndexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(Unity::Collections::NativeArray_1<T> data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.Void SetIndexBufferData(T[] data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(::Array<T>* data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.Void SetIndexBufferData(System.Collections.Generic.List`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(System::Collections::Generic::List_1<T>* data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.UInt32 GetIndexStart(System.Int32 submesh)
    // Offset: 0x1D05430
    uint GetIndexStart(int submesh);
    // public System.UInt32 GetIndexCount(System.Int32 submesh)
    // Offset: 0x1D051D8
    uint GetIndexCount(int submesh);
    // public System.UInt32 GetBaseVertex(System.Int32 submesh)
    // Offset: 0x1D05514
    uint GetBaseVertex(int submesh);
    // private System.Void CheckIndicesArrayRange(System.Int32 valuesLength, System.Int32 start, System.Int32 length)
    // Offset: 0x1D055F8
    void CheckIndicesArrayRange(int valuesLength, int start, int length);
    // private System.Void SetTrianglesImpl(System.Int32 submesh, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array triangles, System.Int32 trianglesArrayLength, System.Int32 start, System.Int32 length, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D04B10
    void SetTrianglesImpl(int submesh, UnityEngine::Rendering::IndexFormat indicesFormat, System::Array* triangles, int trianglesArrayLength, int start, int length, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh)
    // Offset: 0x1D057A8
    void SetTriangles(::Array<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1D05824
    void SetTriangles(::Array<int>* triangles, int submesh, bool calculateBounds);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D057B4
    void SetTriangles(::Array<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05830
    void SetTriangles(::Array<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.UInt16[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D058D4
    void SetTriangles(::Array<uint16_t>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.UInt16[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05944
    void SetTriangles(::Array<uint16_t>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x1D059E8
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1D05A84
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D059F4
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05A90
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05B84
    void SetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05C14
    void SetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh)
    // Offset: 0x1D05D08
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1D05D98
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05D14
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05DA4
    void SetIndices(::Array<int>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.UInt16[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05E94
    void SetIndices(::Array<uint16_t>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.UInt16[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D05F18
    void SetIndices(::Array<uint16_t>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndices(Unity::Collections::NativeArray_1<T> indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices), ::il2cpp_utils::ExtractType(topology), ::il2cpp_utils::ExtractType(submesh), ::il2cpp_utils::ExtractType(calculateBounds), ::il2cpp_utils::ExtractType(baseVertex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, indices, topology, submesh, calculateBounds, baseVertex);
    }
    // public System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndices(Unity::Collections::NativeArray_1<T> indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices), ::il2cpp_utils::ExtractType(indicesStart), ::il2cpp_utils::ExtractType(indicesLength), ::il2cpp_utils::ExtractType(topology), ::il2cpp_utils::ExtractType(submesh), ::il2cpp_utils::ExtractType(calculateBounds), ::il2cpp_utils::ExtractType(baseVertex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex);
    }
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D06008
    void SetIndices(System::Collections::Generic::List_1<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D060B4
    void SetIndices(System::Collections::Generic::List_1<int>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.UInt16> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D061F4
    void SetIndices(System::Collections::Generic::List_1<uint16_t>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.UInt16> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1D062A0
    void SetIndices(System::Collections::Generic::List_1<uint16_t>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void GetBindposes(System.Collections.Generic.List`1<UnityEngine.Matrix4x4> bindposes)
    // Offset: 0x1D063E0
    void GetBindposes(System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* bindposes);
    // public System.Void GetBoneWeights(System.Collections.Generic.List`1<UnityEngine.BoneWeight> boneWeights)
    // Offset: 0x1D064F8
    void GetBoneWeights(System::Collections::Generic::List_1<UnityEngine::BoneWeight>* boneWeights);
    // public System.Void Clear(System.Boolean keepVertexLayout)
    // Offset: 0x1D066CC
    void Clear(bool keepVertexLayout);
    // public System.Void Clear()
    // Offset: 0x1D0671C
    void Clear();
    // public System.Void RecalculateBounds()
    // Offset: 0x1D06760
    void RecalculateBounds();
    // public System.Void RecalculateNormals()
    // Offset: 0x1D06850
    void RecalculateNormals();
    // public System.Void RecalculateTangents()
    // Offset: 0x1D06940
    void RecalculateTangents();
    // public System.Void MarkDynamic()
    // Offset: 0x1D06A30
    void MarkDynamic();
    // public System.Void UploadMeshData(System.Boolean markNoLongerReadable)
    // Offset: 0x1D06AA8
    void UploadMeshData(bool markNoLongerReadable);
    // public System.Void Optimize()
    // Offset: 0x1D06B34
    void Optimize();
    // public System.Void OptimizeIndexBuffers()
    // Offset: 0x1D06C24
    void OptimizeIndexBuffers();
    // public System.Void OptimizeReorderVertexBuffer()
    // Offset: 0x1D06D14
    void OptimizeReorderVertexBuffer();
    // public UnityEngine.MeshTopology GetTopology(System.Int32 submesh)
    // Offset: 0x1D06E04
    UnityEngine::MeshTopology GetTopology(int submesh);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)
    // Offset: 0x1D06F28
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices)
    // Offset: 0x1D06F98
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes)
    // Offset: 0x1D07004
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine)
    // Offset: 0x1D07064
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine);
    // private System.Void GetVertexAttribute_Injected(System.Int32 index, out UnityEngine.Rendering.VertexAttributeDescriptor ret)
    // Offset: 0x1D0072C
    void GetVertexAttribute_Injected(int index, ByRef<UnityEngine::Rendering::VertexAttributeDescriptor> ret);
    // private System.Void SetSubMesh_Injected(System.Int32 index, ref UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1D01AE0
    void SetSubMesh_Injected(int index, ByRef<UnityEngine::Rendering::SubMeshDescriptor> desc, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void GetSubMesh_Injected(System.Int32 index, out UnityEngine.Rendering.SubMeshDescriptor ret)
    // Offset: 0x1D01BC8
    void GetSubMesh_Injected(int index, ByRef<UnityEngine::Rendering::SubMeshDescriptor> ret);
    // private System.Void get_bounds_Injected(out UnityEngine.Bounds ret)
    // Offset: 0x1D01C8C
    void get_bounds_Injected(ByRef<UnityEngine::Bounds> ret);
    // private System.Void set_bounds_Injected(ref UnityEngine.Bounds value)
    // Offset: 0x1D01D2C
    void set_bounds_Injected(ByRef<UnityEngine::Bounds> value);
    // public System.Void .ctor()
    // Offset: 0x1D00154
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mesh*, creationType>()));
    }
  }; // UnityEngine.Mesh
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Mesh*, "UnityEngine", "Mesh");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Mesh::get_indexFormat
// Il2CppName: get_indexFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::IndexFormat (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_indexFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_indexFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_indexFormat
// Il2CppName: set_indexFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(UnityEngine::Rendering::IndexFormat)>(&UnityEngine::Mesh::set_indexFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_indexFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexBufferCount
// Il2CppName: get_vertexBufferCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertexBufferCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertexBufferCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_blendShapeCount
// Il2CppName: get_blendShapeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_blendShapeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_blendShapeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bindposes
// Il2CppName: get_bindposes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Matrix4x4>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_bindposes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_bindposes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bindposes
// Il2CppName: set_bindposes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Matrix4x4>*)>(&UnityEngine::Mesh::set_bindposes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_bindposes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_isReadable
// Il2CppName: get_isReadable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_isReadable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_isReadable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_canAccess
// Il2CppName: get_canAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_canAccess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_canAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexCount
// Il2CppName: get_vertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_subMeshCount
// Il2CppName: get_subMeshCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_subMeshCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_subMeshCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_subMeshCount
// Il2CppName: set_subMeshCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::set_subMeshCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_subMeshCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bounds
// Il2CppName: set_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(UnityEngine::Bounds)>(&UnityEngine::Mesh::set_bounds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertices
// Il2CppName: get_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector3>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_vertices
// Il2CppName: set_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::set_vertices)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_normals
// Il2CppName: get_normals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector3>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_normals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_normals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_normals
// Il2CppName: set_normals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::set_normals)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_normals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_tangents
// Il2CppName: get_tangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector4>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_tangents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_tangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_tangents
// Il2CppName: set_tangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector4>*)>(&UnityEngine::Mesh::set_tangents)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_tangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv
// Il2CppName: get_uv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector2>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv
// Il2CppName: set_uv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::set_uv)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv2
// Il2CppName: get_uv2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector2>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv2
// Il2CppName: set_uv2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::set_uv2)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv3
// Il2CppName: get_uv3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector2>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv3
// Il2CppName: set_uv3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::set_uv3)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv4
// Il2CppName: get_uv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector2>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv4
// Il2CppName: set_uv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::set_uv4)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv5
// Il2CppName: get_uv5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector2>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv5)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv5
// Il2CppName: set_uv5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::set_uv5)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv6
// Il2CppName: get_uv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector2>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv6
// Il2CppName: set_uv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::set_uv6)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv7
// Il2CppName: get_uv7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector2>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv7)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv7
// Il2CppName: set_uv7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::set_uv7)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv8
// Il2CppName: get_uv8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector2>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_uv8)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_uv8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv8
// Il2CppName: set_uv8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::set_uv8)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_uv8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_colors
// Il2CppName: get_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Color>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_colors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_colors
// Il2CppName: set_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Color>*)>(&UnityEngine::Mesh::set_colors)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_colors32
// Il2CppName: get_colors32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Color32>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_colors32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_colors32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_colors32
// Il2CppName: set_colors32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Color32>*)>(&UnityEngine::Mesh::set_colors32)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_colors32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexAttributeCount
// Il2CppName: get_vertexAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_vertexAttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_vertexAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_triangles
// Il2CppName: get_triangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_triangles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_triangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_triangles
// Il2CppName: set_triangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*)>(&UnityEngine::Mesh::set_triangles)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_triangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_boneWeights
// Il2CppName: get_boneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::BoneWeight>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::get_boneWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_boneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_boneWeights
// Il2CppName: set_boneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::BoneWeight>*)>(&UnityEngine::Mesh::set_boneWeights)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_boneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::Internal_Create
// Il2CppName: Internal_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Mesh*)>(&UnityEngine::Mesh::Internal_Create)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "Internal_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::FromInstanceID
// Il2CppName: FromInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (*)(int)>(&UnityEngine::Mesh::FromInstanceID)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "FromInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferParams
// Il2CppName: SetIndexBufferParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, UnityEngine::Rendering::IndexFormat)>(&UnityEngine::Mesh::SetIndexBufferParams)> {
  static const MethodInfo* get() {
    static auto* indexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndexBufferParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexCount, format});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetIndexBufferData
// Il2CppName: InternalSetIndexBufferData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::IntPtr, int, int, int, int, UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::InternalSetIndexBufferData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshBufferStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetIndexBufferData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataStart, meshBufferStart, count, elemSize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetIndexBufferDataFromArray
// Il2CppName: InternalSetIndexBufferDataFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Array*, int, int, int, int, UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::InternalSetIndexBufferDataFromArray)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshBufferStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetIndexBufferDataFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataStart, meshBufferStart, count, elemSize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferParams
// Il2CppName: SetVertexBufferParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::Array<UnityEngine::Rendering::VertexAttributeDescriptor>*)>(&UnityEngine::Mesh::SetVertexBufferParams)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertexBufferParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetVertexBufferData
// Il2CppName: InternalSetVertexBufferData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::IntPtr, int, int, int, int, UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::InternalSetVertexBufferData)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshBufferStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetVertexBufferData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, data, dataStart, meshBufferStart, count, elemSize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetVertexBufferDataFromArray
// Il2CppName: InternalSetVertexBufferDataFromArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Array*, int, int, int, int, UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::InternalSetVertexBufferDataFromArray)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshBufferStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elemSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetVertexBufferDataFromArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, data, dataStart, meshBufferStart, count, elemSize, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesAlloc
// Il2CppName: GetVertexAttributesAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Array* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetVertexAttributesAlloc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributesAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesArray
// Il2CppName: GetVertexAttributesArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::Array<UnityEngine::Rendering::VertexAttributeDescriptor>*)>(&UnityEngine::Mesh::GetVertexAttributesArray)> {
  static const MethodInfo* get() {
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributesArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesList
// Il2CppName: GetVertexAttributesList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Rendering::VertexAttributeDescriptor>*)>(&UnityEngine::Mesh::GetVertexAttributesList)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributesList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeCountImpl
// Il2CppName: GetVertexAttributeCountImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetVertexAttributeCountImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributeCountImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttribute
// Il2CppName: GetVertexAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::VertexAttributeDescriptor (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetVertexAttribute)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexStartImpl
// Il2CppName: GetIndexStartImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndexStartImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexStartImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexCountImpl
// Il2CppName: GetIndexCountImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndexCountImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexCountImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesCountImpl
// Il2CppName: GetTrianglesCountImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetTrianglesCountImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTrianglesCountImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBaseVertexImpl
// Il2CppName: GetBaseVertexImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBaseVertexImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBaseVertexImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesImpl
// Il2CppName: GetTrianglesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::GetTrianglesImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTrianglesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesImpl
// Il2CppName: GetIndicesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::GetIndicesImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndicesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndicesImpl
// Il2CppName: SetIndicesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, UnityEngine::MeshTopology, UnityEngine::Rendering::IndexFormat, System::Array*, int, int, bool, int)>(&UnityEngine::Mesh::SetIndicesImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* indicesFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    static auto* indices = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndicesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, topology, indicesFormat, indices, arrayStart, arraySize, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndicesNativeArrayImpl
// Il2CppName: SetIndicesNativeArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, UnityEngine::MeshTopology, UnityEngine::Rendering::IndexFormat, System::IntPtr, int, int, bool, int)>(&UnityEngine::Mesh::SetIndicesNativeArrayImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* indicesFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    static auto* indices = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* arrayStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndicesNativeArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, topology, indicesFormat, indices, arrayStart, arraySize, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesNonAllocImpl
// Il2CppName: GetTrianglesNonAllocImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::Array<int>*>, int, bool)>(&UnityEngine::Mesh::GetTrianglesNonAllocImpl)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTrianglesNonAllocImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesNonAllocImpl16
// Il2CppName: GetTrianglesNonAllocImpl16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::Array<uint16_t>*>, int, bool)>(&UnityEngine::Mesh::GetTrianglesNonAllocImpl16)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->this_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTrianglesNonAllocImpl16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesNonAllocImpl
// Il2CppName: GetIndicesNonAllocImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::Array<int>*>, int, bool)>(&UnityEngine::Mesh::GetIndicesNonAllocImpl)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndicesNonAllocImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesNonAllocImpl16
// Il2CppName: GetIndicesNonAllocImpl16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::Array<uint16_t>*>, int, bool)>(&UnityEngine::Mesh::GetIndicesNonAllocImpl16)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->this_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndicesNonAllocImpl16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::PrintErrorCantAccessChannel
// Il2CppName: PrintErrorCantAccessChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::PrintErrorCantAccessChannel)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "PrintErrorCantAccessChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::HasVertexAttribute
// Il2CppName: HasVertexAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::HasVertexAttribute)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "HasVertexAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeDimension
// Il2CppName: GetVertexAttributeDimension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::GetVertexAttributeDimension)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributeDimension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeFormat
// Il2CppName: GetVertexAttributeFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::VertexAttributeFormat (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::GetVertexAttributeFormat)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributeFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannelImpl
// Il2CppName: SetArrayForChannelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute, UnityEngine::Rendering::VertexAttributeFormat, int, System::Array*, int, int, int)>(&UnityEngine::Mesh::SetArrayForChannelImpl)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetArrayForChannelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values, arraySize, valuesStart, valuesCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNativeArrayForChannelImpl
// Il2CppName: SetNativeArrayForChannelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute, UnityEngine::Rendering::VertexAttributeFormat, int, System::IntPtr, int, int, int)>(&UnityEngine::Mesh::SetNativeArrayForChannelImpl)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNativeArrayForChannelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values, arraySize, valuesStart, valuesCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannelImpl
// Il2CppName: GetAllocArrayFromChannelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Array* (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute, UnityEngine::Rendering::VertexAttributeFormat, int)>(&UnityEngine::Mesh::GetAllocArrayFromChannelImpl)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetAllocArrayFromChannelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetArrayFromChannelImpl
// Il2CppName: GetArrayFromChannelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute, UnityEngine::Rendering::VertexAttributeFormat, int, System::Array*)>(&UnityEngine::Mesh::GetArrayFromChannelImpl)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetArrayFromChannelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNativeVertexBufferPtr
// Il2CppName: GetNativeVertexBufferPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetNativeVertexBufferPtr)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetNativeVertexBufferPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNativeIndexBufferPtr
// Il2CppName: GetNativeIndexBufferPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetNativeIndexBufferPtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetNativeIndexBufferPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::ClearBlendShapes
// Il2CppName: ClearBlendShapes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::ClearBlendShapes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "ClearBlendShapes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeName
// Il2CppName: GetBlendShapeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBlendShapeName)> {
  static const MethodInfo* get() {
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeIndex
// Il2CppName: GetBlendShapeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::Il2CppString*)>(&UnityEngine::Mesh::GetBlendShapeIndex)> {
  static const MethodInfo* get() {
    static auto* blendShapeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendShapeName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameCount
// Il2CppName: GetBlendShapeFrameCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBlendShapeFrameCount)> {
  static const MethodInfo* get() {
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeFrameCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameWeight
// Il2CppName: GetBlendShapeFrameWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Mesh::*)(int, int)>(&UnityEngine::Mesh::GetBlendShapeFrameWeight)> {
  static const MethodInfo* get() {
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeFrameWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIndex, frameIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameVertices
// Il2CppName: GetBlendShapeFrameVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, int, ::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::GetBlendShapeFrameVertices)> {
  static const MethodInfo* get() {
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* deltaVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* deltaNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* deltaTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBlendShapeFrameVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeIndex, frameIndex, deltaVertices, deltaNormals, deltaTangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::AddBlendShapeFrame
// Il2CppName: AddBlendShapeFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Il2CppString*, float, ::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::AddBlendShapeFrame)> {
  static const MethodInfo* get() {
    static auto* shapeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* frameWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* deltaNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* deltaTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "AddBlendShapeFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapeName, frameWeight, deltaVertices, deltaNormals, deltaTangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::HasBoneWeights
// Il2CppName: HasBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::HasBoneWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "HasBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightsImpl
// Il2CppName: GetBoneWeightsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::BoneWeight>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBoneWeightsImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeightsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetBoneWeightsImpl
// Il2CppName: SetBoneWeightsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::BoneWeight>*)>(&UnityEngine::Mesh::SetBoneWeightsImpl)> {
  static const MethodInfo* get() {
    static auto* weights = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetBoneWeightsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{weights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetBoneWeights
// Il2CppName: SetBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(Unity::Collections::NativeArray_1<uint8_t>, Unity::Collections::NativeArray_1<UnityEngine::BoneWeight1>)>(&UnityEngine::Mesh::SetBoneWeights)> {
  static const MethodInfo* get() {
    static auto* bonesPerVertex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* weights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight1")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bonesPerVertex, weights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetBoneWeights
// Il2CppName: InternalSetBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::IntPtr, int, System::IntPtr, int)>(&UnityEngine::Mesh::InternalSetBoneWeights)> {
  static const MethodInfo* get() {
    static auto* bonesPerVertex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bonesPerVertexSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* weights = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* weightsSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "InternalSetBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bonesPerVertex, bonesPerVertexSize, weights, weightsSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeights
// Il2CppName: GetAllBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Unity::Collections::NativeArray_1<UnityEngine::BoneWeight1> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetAllBoneWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetAllBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBonesPerVertex
// Il2CppName: GetBonesPerVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Unity::Collections::NativeArray_1<uint8_t> (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBonesPerVertex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBonesPerVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeightsArraySize
// Il2CppName: GetAllBoneWeightsArraySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetAllBoneWeightsArraySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetAllBoneWeightsArraySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeightsArray
// Il2CppName: GetAllBoneWeightsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetAllBoneWeightsArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetAllBoneWeightsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBonesPerVertexArray
// Il2CppName: GetBonesPerVertexArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBonesPerVertexArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBonesPerVertexArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposeCount
// Il2CppName: GetBindposeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetBindposeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBindposeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightsNonAllocImpl
// Il2CppName: GetBoneWeightsNonAllocImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::Array<UnityEngine::BoneWeight>*>)>(&UnityEngine::Mesh::GetBoneWeightsNonAllocImpl)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeightsNonAllocImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposesNonAllocImpl
// Il2CppName: GetBindposesNonAllocImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<::Array<UnityEngine::Matrix4x4>*>)>(&UnityEngine::Mesh::GetBindposesNonAllocImpl)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBindposesNonAllocImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMesh
// Il2CppName: SetSubMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, UnityEngine::Rendering::SubMeshDescriptor, UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSubMesh)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSubMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, desc, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetSubMesh
// Il2CppName: GetSubMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::SubMeshDescriptor (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetSubMesh)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetSubMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::ClearImpl
// Il2CppName: ClearImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(bool)>(&UnityEngine::Mesh::ClearImpl)> {
  static const MethodInfo* get() {
    static auto* keepVertexLayout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "ClearImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keepVertexLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateBoundsImpl
// Il2CppName: RecalculateBoundsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateBoundsImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateBoundsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateNormalsImpl
// Il2CppName: RecalculateNormalsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateNormalsImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateNormalsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateTangentsImpl
// Il2CppName: RecalculateTangentsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateTangentsImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateTangentsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkDynamicImpl
// Il2CppName: MarkDynamicImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::MarkDynamicImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "MarkDynamicImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkModified
// Il2CppName: MarkModified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::MarkModified)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "MarkModified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::UploadMeshDataImpl
// Il2CppName: UploadMeshDataImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(bool)>(&UnityEngine::Mesh::UploadMeshDataImpl)> {
  static const MethodInfo* get() {
    static auto* markNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "UploadMeshDataImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTopologyImpl
// Il2CppName: GetTopologyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::MeshTopology (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetTopologyImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTopologyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVDistributionMetric
// Il2CppName: GetUVDistributionMetric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetUVDistributionMetric)> {
  static const MethodInfo* get() {
    static auto* uvSetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVDistributionMetric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvSetIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshesImpl
// Il2CppName: CombineMeshesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::CombineInstance>*, bool, bool, bool)>(&UnityEngine::Mesh::CombineMeshesImpl)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    static auto* mergeSubMeshes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasLightmapData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine, mergeSubMeshes, useMatrices, hasLightmapData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeImpl
// Il2CppName: OptimizeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeIndexBuffersImpl
// Il2CppName: OptimizeIndexBuffersImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeIndexBuffersImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeIndexBuffersImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeReorderVertexBufferImpl
// Il2CppName: OptimizeReorderVertexBufferImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeReorderVertexBufferImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeReorderVertexBufferImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVChannel
// Il2CppName: GetUVChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::VertexAttribute (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetUVChannel)> {
  static const MethodInfo* get() {
    static auto* uvIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::DefaultDimensionForChannel
// Il2CppName: DefaultDimensionForChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Rendering::VertexAttribute)>(&UnityEngine::Mesh::DefaultDimensionForChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "DefaultDimensionForChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannel
// Il2CppName: GetAllocArrayFromChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannel
// Il2CppName: GetAllocArrayFromChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSizedArrayForChannel
// Il2CppName: SetSizedArrayForChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute, UnityEngine::Rendering::VertexAttributeFormat, int, System::Array*, int, int, int)>(&UnityEngine::Mesh::SetSizedArrayForChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* valuesArrayLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSizedArrayForChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values, valuesArrayLength, valuesStart, valuesCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSizedNativeArrayForChannel
// Il2CppName: SetSizedNativeArrayForChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(UnityEngine::Rendering::VertexAttribute, UnityEngine::Rendering::VertexAttributeFormat, int, System::IntPtr, int, int, int)>(&UnityEngine::Mesh::SetSizedNativeArrayForChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttribute")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeFormat")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* valuesArrayLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSizedNativeArrayForChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, format, dim, values, valuesArrayLength, valuesStart, valuesCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannel
// Il2CppName: SetArrayForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannel
// Il2CppName: SetArrayForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetListForChannel
// Il2CppName: SetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetListForChannel
// Il2CppName: SetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetListForChannel
// Il2CppName: GetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetListForChannel
// Il2CppName: GetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertices
// Il2CppName: GetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::GetVertices)> {
  static const MethodInfo* get() {
    static auto* vertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetVertices)> {
  static const MethodInfo* get() {
    static auto* inVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inVertices, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNormals
// Il2CppName: GetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::GetNormals)> {
  static const MethodInfo* get() {
    static auto* normals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normals});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetNormals)> {
  static const MethodInfo* get() {
    static auto* inNormals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inNormals, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTangents
// Il2CppName: GetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector4>*)>(&UnityEngine::Mesh::GetTangents)> {
  static const MethodInfo* get() {
    static auto* tangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector4>*)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Vector4>*, int, int)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector4>*)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Vector4>*, int, int)>(&UnityEngine::Mesh::SetTangents)> {
  static const MethodInfo* get() {
    static auto* inTangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTangents, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetColors
// Il2CppName: GetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Color>*)>(&UnityEngine::Mesh::GetColors)> {
  static const MethodInfo* get() {
    static auto* colors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Color>*)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Color>*, int, int)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Color>*)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Color>*, int, int)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetColors
// Il2CppName: GetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Color32>*)>(&UnityEngine::Mesh::GetColors)> {
  static const MethodInfo* get() {
    static auto* colors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Color32>*)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Color32>*, int, int)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Color32>*)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::Color32>*, int, int)>(&UnityEngine::Mesh::SetColors)> {
  static const MethodInfo* get() {
    static auto* inColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inColors, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUvsImpl
// Il2CppName: SetUvsImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector4>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector2>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector4>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUvsImpl
// Il2CppName: SetUvsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, int, System::Array*, int, int)>(&UnityEngine::Mesh::SetUvsImpl)> {
  static const MethodInfo* get() {
    static auto* uvIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUvsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvIndex, dim, uvs, arrayStart, arraySize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::Array<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::Array<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::Array<UnityEngine::Vector4>*)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::Array<UnityEngine::Vector2>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::Array<UnityEngine::Vector3>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ::Array<UnityEngine::Vector4>*, int, int)>(&UnityEngine::Mesh::SetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVsImpl
// Il2CppName: GetUVsImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector2>*)>(&UnityEngine::Mesh::GetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector3>*)>(&UnityEngine::Mesh::GetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, System::Collections::Generic::List_1<UnityEngine::Vector4>*)>(&UnityEngine::Mesh::GetUVs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, uvs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::GetVertexAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(::Array<UnityEngine::Rendering::VertexAttributeDescriptor>*)>(&UnityEngine::Mesh::GetVertexAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Rendering::VertexAttributeDescriptor>*)>(&UnityEngine::Mesh::GetVertexAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::PrintErrorCantAccessIndices
// Il2CppName: PrintErrorCantAccessIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::PrintErrorCantAccessIndices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "PrintErrorCantAccessIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmesh
// Il2CppName: CheckCanAccessSubmesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::CheckCanAccessSubmesh)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorAboutTriangles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CheckCanAccessSubmesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, errorAboutTriangles});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmeshTriangles
// Il2CppName: CheckCanAccessSubmeshTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::CheckCanAccessSubmeshTriangles)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CheckCanAccessSubmeshTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmeshIndices
// Il2CppName: CheckCanAccessSubmeshIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::CheckCanAccessSubmeshIndices)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CheckCanAccessSubmeshIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int, bool)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<uint16_t>*, int, bool)>(&UnityEngine::Mesh::GetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (UnityEngine::Mesh::*)(int, bool)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int, bool)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<uint16_t>*, int, bool)>(&UnityEngine::Mesh::GetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* applyBaseVertex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, submesh, applyBaseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexStart
// Il2CppName: GetIndexStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndexStart)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexCount
// Il2CppName: GetIndexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetIndexCount)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetIndexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBaseVertex
// Il2CppName: GetBaseVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetBaseVertex)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBaseVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckIndicesArrayRange
// Il2CppName: CheckIndicesArrayRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, int, int)>(&UnityEngine::Mesh::CheckIndicesArrayRange)> {
  static const MethodInfo* get() {
    static auto* valuesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CheckIndicesArrayRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{valuesLength, start, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTrianglesImpl
// Il2CppName: SetTrianglesImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, UnityEngine::Rendering::IndexFormat, System::Array*, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTrianglesImpl)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesFormat = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "IndexFormat")->byval_arg;
    static auto* triangles = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* trianglesArrayLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTrianglesImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh, indicesFormat, triangles, trianglesArrayLength, start, length, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*, int, bool)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* trianglesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trianglesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, trianglesStart, trianglesLength, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<uint16_t>*, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<uint16_t>*, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* trianglesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trianglesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, trianglesStart, trianglesLength, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int, bool)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* trianglesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trianglesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, trianglesStart, trianglesLength, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<uint16_t>*, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<uint16_t>*, int, int, int, bool, int)>(&UnityEngine::Mesh::SetTriangles)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* trianglesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trianglesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, trianglesStart, trianglesLength, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*, UnityEngine::MeshTopology, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*, UnityEngine::MeshTopology, int, bool)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*, UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<int>*, int, int, UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* indicesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<uint16_t>*, UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<uint16_t>*, int, int, UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* indicesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<int>*, int, int, UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* indicesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<uint16_t>*, UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<uint16_t>*, int, int, UnityEngine::MeshTopology, int, bool, int)>(&UnityEngine::Mesh::SetIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    static auto* indicesStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indicesLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* topology = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshTopology")->byval_arg;
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* calculateBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* baseVertex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposes
// Il2CppName: GetBindposes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::Matrix4x4>*)>(&UnityEngine::Mesh::GetBindposes)> {
  static const MethodInfo* get() {
    static auto* bindposes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBindposes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindposes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeights
// Il2CppName: GetBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(System::Collections::Generic::List_1<UnityEngine::BoneWeight>*)>(&UnityEngine::Mesh::GetBoneWeights)> {
  static const MethodInfo* get() {
    static auto* boneWeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneWeights});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(bool)>(&UnityEngine::Mesh::Clear)> {
  static const MethodInfo* get() {
    static auto* keepVertexLayout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keepVertexLayout});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateNormals
// Il2CppName: RecalculateNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateTangents
// Il2CppName: RecalculateTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::RecalculateTangents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "RecalculateTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkDynamic
// Il2CppName: MarkDynamic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::MarkDynamic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "MarkDynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::UploadMeshData
// Il2CppName: UploadMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(bool)>(&UnityEngine::Mesh::UploadMeshData)> {
  static const MethodInfo* get() {
    static auto* markNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "UploadMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::Optimize
// Il2CppName: Optimize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::Optimize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "Optimize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeIndexBuffers
// Il2CppName: OptimizeIndexBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeIndexBuffers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeIndexBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeReorderVertexBuffer
// Il2CppName: OptimizeReorderVertexBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)()>(&UnityEngine::Mesh::OptimizeReorderVertexBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "OptimizeReorderVertexBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTopology
// Il2CppName: GetTopology
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::MeshTopology (UnityEngine::Mesh::*)(int)>(&UnityEngine::Mesh::GetTopology)> {
  static const MethodInfo* get() {
    static auto* submesh = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetTopology", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submesh});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::CombineInstance>*, bool, bool, bool)>(&UnityEngine::Mesh::CombineMeshes)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    static auto* mergeSubMeshes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasLightmapData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine, mergeSubMeshes, useMatrices, hasLightmapData});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::CombineInstance>*, bool, bool)>(&UnityEngine::Mesh::CombineMeshes)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    static auto* mergeSubMeshes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useMatrices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine, mergeSubMeshes, useMatrices});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::CombineInstance>*, bool)>(&UnityEngine::Mesh::CombineMeshes)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    static auto* mergeSubMeshes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine, mergeSubMeshes});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(::Array<UnityEngine::CombineInstance>*)>(&UnityEngine::Mesh::CombineMeshes)> {
  static const MethodInfo* get() {
    static auto* combine = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "CombineInstance"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combine});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttribute_Injected
// Il2CppName: GetVertexAttribute_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ByRef<UnityEngine::Rendering::VertexAttributeDescriptor>)>(&UnityEngine::Mesh::GetVertexAttribute_Injected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "VertexAttributeDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetVertexAttribute_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMesh_Injected
// Il2CppName: SetSubMesh_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ByRef<UnityEngine::Rendering::SubMeshDescriptor>, UnityEngine::Rendering::MeshUpdateFlags)>(&UnityEngine::Mesh::SetSubMesh_Injected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->this_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "MeshUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "SetSubMesh_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, desc, flags});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::GetSubMesh_Injected
// Il2CppName: GetSubMesh_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(int, ByRef<UnityEngine::Rendering::SubMeshDescriptor>)>(&UnityEngine::Mesh::GetSubMesh_Injected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SubMeshDescriptor")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "GetSubMesh_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bounds_Injected
// Il2CppName: get_bounds_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<UnityEngine::Bounds>)>(&UnityEngine::Mesh::get_bounds_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "get_bounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bounds_Injected
// Il2CppName: set_bounds_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Mesh::*)(ByRef<UnityEngine::Bounds>)>(&UnityEngine::Mesh::set_bounds_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Mesh*), "set_bounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Mesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
