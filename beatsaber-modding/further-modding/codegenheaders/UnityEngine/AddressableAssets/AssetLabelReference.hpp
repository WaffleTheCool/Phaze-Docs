// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.AddressableAssets.IKeyEvaluator
#include "UnityEngine/AddressableAssets/IKeyEvaluator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.AddressableAssets
namespace UnityEngine::AddressableAssets {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AddressableAssets.AssetLabelReference
  // [TokenAttribute] Offset: FFFFFFFF
  class AssetLabelReference : public ::Il2CppObject/*, public UnityEngine::AddressableAssets::IKeyEvaluator*/ {
    public:
    // [FormerlySerializedAsAttribute] Offset: 0xE24C48
    // private System.String m_LabelString
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* m_LabelString;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: AssetLabelReference
    AssetLabelReference(::Il2CppString* m_LabelString_ = {}) noexcept : m_LabelString{m_LabelString_} {}
    // Creating interface conversion operator: operator UnityEngine::AddressableAssets::IKeyEvaluator
    operator UnityEngine::AddressableAssets::IKeyEvaluator() noexcept {
      return *reinterpret_cast<UnityEngine::AddressableAssets::IKeyEvaluator*>(this);
    }
    // Creating conversion operator: operator ::Il2CppString*
    constexpr operator ::Il2CppString*() const noexcept {
      return m_LabelString;
    }
    // Get instance field reference: private System.String m_LabelString
    ::Il2CppString*& dyn_m_LabelString();
    // public System.String get_labelString()
    // Offset: 0x144B1A4
    ::Il2CppString* get_labelString();
    // public System.Void set_labelString(System.String value)
    // Offset: 0x144B1AC
    void set_labelString(::Il2CppString* value);
    // public System.Object get_RuntimeKey()
    // Offset: 0x144B1B4
    ::Il2CppObject* get_RuntimeKey();
    // public System.Boolean RuntimeKeyIsValid()
    // Offset: 0x144B214
    bool RuntimeKeyIsValid();
    // public System.Void .ctor()
    // Offset: 0x144B26C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssetLabelReference* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AddressableAssets::AssetLabelReference::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssetLabelReference*, creationType>()));
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0x144B24C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.AddressableAssets.AssetLabelReference
  #pragma pack(pop)
  static check_size<sizeof(AssetLabelReference), 16 + sizeof(::Il2CppString*)> __UnityEngine_AddressableAssets_AssetLabelReferenceSizeCheck;
  static_assert(sizeof(AssetLabelReference) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::AddressableAssets::AssetLabelReference*, "UnityEngine.AddressableAssets", "AssetLabelReference");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::AssetLabelReference::get_labelString
// Il2CppName: get_labelString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnityEngine::AddressableAssets::AssetLabelReference::*)()>(&UnityEngine::AddressableAssets::AssetLabelReference::get_labelString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::AssetLabelReference*), "get_labelString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::AssetLabelReference::set_labelString
// Il2CppName: set_labelString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AddressableAssets::AssetLabelReference::*)(::Il2CppString*)>(&UnityEngine::AddressableAssets::AssetLabelReference::set_labelString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::AssetLabelReference*), "set_labelString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::AssetLabelReference::get_RuntimeKey
// Il2CppName: get_RuntimeKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::AddressableAssets::AssetLabelReference::*)()>(&UnityEngine::AddressableAssets::AssetLabelReference::get_RuntimeKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::AssetLabelReference*), "get_RuntimeKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::AssetLabelReference::RuntimeKeyIsValid
// Il2CppName: RuntimeKeyIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AddressableAssets::AssetLabelReference::*)()>(&UnityEngine::AddressableAssets::AssetLabelReference::RuntimeKeyIsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::AssetLabelReference*), "RuntimeKeyIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::AssetLabelReference::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::AssetLabelReference::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AddressableAssets::AssetLabelReference::*)()>(&UnityEngine::AddressableAssets::AssetLabelReference::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::AssetLabelReference*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
