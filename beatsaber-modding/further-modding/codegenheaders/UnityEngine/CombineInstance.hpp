// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x68
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.CombineInstance
  // [TokenAttribute] Offset: FFFFFFFF
  struct CombineInstance/*, public System::ValueType*/ {
    public:
    // private System.Int32 m_MeshInstanceID
    // Size: 0x4
    // Offset: 0x0
    int m_MeshInstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_SubMeshIndex
    // Size: 0x4
    // Offset: 0x4
    int m_SubMeshIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Matrix4x4 m_Transform
    // Size: 0x40
    // Offset: 0x8
    UnityEngine::Matrix4x4 m_Transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Vector4 m_LightmapScaleOffset
    // Size: 0x10
    // Offset: 0x48
    UnityEngine::Vector4 m_LightmapScaleOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 m_RealtimeLightmapScaleOffset
    // Size: 0x10
    // Offset: 0x58
    UnityEngine::Vector4 m_RealtimeLightmapScaleOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // Creating value type constructor for type: CombineInstance
    constexpr CombineInstance(int m_MeshInstanceID_ = {}, int m_SubMeshIndex_ = {}, UnityEngine::Matrix4x4 m_Transform_ = {}, UnityEngine::Vector4 m_LightmapScaleOffset_ = {}, UnityEngine::Vector4 m_RealtimeLightmapScaleOffset_ = {}) noexcept : m_MeshInstanceID{m_MeshInstanceID_}, m_SubMeshIndex{m_SubMeshIndex_}, m_Transform{m_Transform_}, m_LightmapScaleOffset{m_LightmapScaleOffset_}, m_RealtimeLightmapScaleOffset{m_RealtimeLightmapScaleOffset_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 m_MeshInstanceID
    int& dyn_m_MeshInstanceID();
    // Get instance field reference: private System.Int32 m_SubMeshIndex
    int& dyn_m_SubMeshIndex();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_Transform
    UnityEngine::Matrix4x4& dyn_m_Transform();
    // Get instance field reference: private UnityEngine.Vector4 m_LightmapScaleOffset
    UnityEngine::Vector4& dyn_m_LightmapScaleOffset();
    // Get instance field reference: private UnityEngine.Vector4 m_RealtimeLightmapScaleOffset
    UnityEngine::Vector4& dyn_m_RealtimeLightmapScaleOffset();
  }; // UnityEngine.CombineInstance
  #pragma pack(pop)
  static check_size<sizeof(CombineInstance), 88 + sizeof(UnityEngine::Vector4)> __UnityEngine_CombineInstanceSizeCheck;
  static_assert(sizeof(CombineInstance) == 0x68);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::CombineInstance, "UnityEngine", "CombineInstance");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
