// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.CachedAssetBundle
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: DB32E4
  struct CachedAssetBundle/*, public System::ValueType*/ {
    public:
    // private System.String m_Name
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* m_Name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private UnityEngine.Hash128 m_Hash
    // Size: 0x10
    // Offset: 0x8
    UnityEngine::Hash128 m_Hash;
    // Field size check
    static_assert(sizeof(UnityEngine::Hash128) == 0x10);
    // Creating value type constructor for type: CachedAssetBundle
    constexpr CachedAssetBundle(::Il2CppString* m_Name_ = {}, UnityEngine::Hash128 m_Hash_ = {}) noexcept : m_Name{m_Name_}, m_Hash{m_Hash_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: private System.String m_Name
    ::Il2CppString*& dyn_m_Name();
    // Get instance field reference: private UnityEngine.Hash128 m_Hash
    UnityEngine::Hash128& dyn_m_Hash();
    // public System.String get_name()
    // Offset: 0x1C49E14
    ::Il2CppString* get_name();
    // public UnityEngine.Hash128 get_hash()
    // Offset: 0x1C49E1C
    UnityEngine::Hash128 get_hash();
    // public System.Void .ctor(System.String name, UnityEngine.Hash128 hash)
    // Offset: 0x1C49E08
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  CachedAssetBundle(::Il2CppString* name, UnityEngine::Hash128 hash)
  }; // UnityEngine.CachedAssetBundle
  #pragma pack(pop)
  static check_size<sizeof(CachedAssetBundle), 8 + sizeof(UnityEngine::Hash128)> __UnityEngine_CachedAssetBundleSizeCheck;
  static_assert(sizeof(CachedAssetBundle) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::CachedAssetBundle, "UnityEngine", "CachedAssetBundle");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::CachedAssetBundle::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnityEngine::CachedAssetBundle::*)()>(&UnityEngine::CachedAssetBundle::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::CachedAssetBundle), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::CachedAssetBundle::get_hash
// Il2CppName: get_hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Hash128 (UnityEngine::CachedAssetBundle::*)()>(&UnityEngine::CachedAssetBundle::get_hash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::CachedAssetBundle), "get_hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::CachedAssetBundle::CachedAssetBundle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
