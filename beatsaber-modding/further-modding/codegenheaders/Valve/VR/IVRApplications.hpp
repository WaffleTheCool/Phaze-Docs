// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0xF8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.IVRApplications
  // [TokenAttribute] Offset: FFFFFFFF
  struct IVRApplications/*, public System::ValueType*/ {
    public:
    // Nested type: Valve::VR::IVRApplications::_AddApplicationManifest
    class _AddApplicationManifest;
    // Nested type: Valve::VR::IVRApplications::_RemoveApplicationManifest
    class _RemoveApplicationManifest;
    // Nested type: Valve::VR::IVRApplications::_IsApplicationInstalled
    class _IsApplicationInstalled;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationCount
    class _GetApplicationCount;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationKeyByIndex
    class _GetApplicationKeyByIndex;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationKeyByProcessId
    class _GetApplicationKeyByProcessId;
    // Nested type: Valve::VR::IVRApplications::_LaunchApplication
    class _LaunchApplication;
    // Nested type: Valve::VR::IVRApplications::_LaunchTemplateApplication
    class _LaunchTemplateApplication;
    // Nested type: Valve::VR::IVRApplications::_LaunchApplicationFromMimeType
    class _LaunchApplicationFromMimeType;
    // Nested type: Valve::VR::IVRApplications::_LaunchDashboardOverlay
    class _LaunchDashboardOverlay;
    // Nested type: Valve::VR::IVRApplications::_CancelApplicationLaunch
    class _CancelApplicationLaunch;
    // Nested type: Valve::VR::IVRApplications::_IdentifyApplication
    class _IdentifyApplication;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationProcessId
    class _GetApplicationProcessId;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum
    class _GetApplicationsErrorNameFromEnum;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationPropertyString
    class _GetApplicationPropertyString;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationPropertyBool
    class _GetApplicationPropertyBool;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationPropertyUint64
    class _GetApplicationPropertyUint64;
    // Nested type: Valve::VR::IVRApplications::_SetApplicationAutoLaunch
    class _SetApplicationAutoLaunch;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationAutoLaunch
    class _GetApplicationAutoLaunch;
    // Nested type: Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType
    class _SetDefaultApplicationForMimeType;
    // Nested type: Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType
    class _GetDefaultApplicationForMimeType;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes
    class _GetApplicationSupportedMimeTypes;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType
    class _GetApplicationsThatSupportMimeType;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationLaunchArguments
    class _GetApplicationLaunchArguments;
    // Nested type: Valve::VR::IVRApplications::_GetStartingApplication
    class _GetStartingApplication;
    // Nested type: Valve::VR::IVRApplications::_GetTransitionState
    class _GetTransitionState;
    // Nested type: Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck
    class _PerformApplicationPrelaunchCheck;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum
    class _GetApplicationsTransitionStateNameFromEnum;
    // Nested type: Valve::VR::IVRApplications::_IsQuitUserPromptRequested
    class _IsQuitUserPromptRequested;
    // Nested type: Valve::VR::IVRApplications::_LaunchInternalProcess
    class _LaunchInternalProcess;
    // Nested type: Valve::VR::IVRApplications::_GetCurrentSceneProcessId
    class _GetCurrentSceneProcessId;
    // Valve.VR.IVRApplications/Valve.VR._AddApplicationManifest AddApplicationManifest
    // Size: 0x8
    // Offset: 0x0
    Valve::VR::IVRApplications::_AddApplicationManifest* AddApplicationManifest;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_AddApplicationManifest*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._RemoveApplicationManifest RemoveApplicationManifest
    // Size: 0x8
    // Offset: 0x8
    Valve::VR::IVRApplications::_RemoveApplicationManifest* RemoveApplicationManifest;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_RemoveApplicationManifest*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._IsApplicationInstalled IsApplicationInstalled
    // Size: 0x8
    // Offset: 0x10
    Valve::VR::IVRApplications::_IsApplicationInstalled* IsApplicationInstalled;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_IsApplicationInstalled*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationCount GetApplicationCount
    // Size: 0x8
    // Offset: 0x18
    Valve::VR::IVRApplications::_GetApplicationCount* GetApplicationCount;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationCount*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationKeyByIndex GetApplicationKeyByIndex
    // Size: 0x8
    // Offset: 0x20
    Valve::VR::IVRApplications::_GetApplicationKeyByIndex* GetApplicationKeyByIndex;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationKeyByIndex*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationKeyByProcessId GetApplicationKeyByProcessId
    // Size: 0x8
    // Offset: 0x28
    Valve::VR::IVRApplications::_GetApplicationKeyByProcessId* GetApplicationKeyByProcessId;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationKeyByProcessId*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._LaunchApplication LaunchApplication
    // Size: 0x8
    // Offset: 0x30
    Valve::VR::IVRApplications::_LaunchApplication* LaunchApplication;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_LaunchApplication*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._LaunchTemplateApplication LaunchTemplateApplication
    // Size: 0x8
    // Offset: 0x38
    Valve::VR::IVRApplications::_LaunchTemplateApplication* LaunchTemplateApplication;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_LaunchTemplateApplication*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._LaunchApplicationFromMimeType LaunchApplicationFromMimeType
    // Size: 0x8
    // Offset: 0x40
    Valve::VR::IVRApplications::_LaunchApplicationFromMimeType* LaunchApplicationFromMimeType;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_LaunchApplicationFromMimeType*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._LaunchDashboardOverlay LaunchDashboardOverlay
    // Size: 0x8
    // Offset: 0x48
    Valve::VR::IVRApplications::_LaunchDashboardOverlay* LaunchDashboardOverlay;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_LaunchDashboardOverlay*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._CancelApplicationLaunch CancelApplicationLaunch
    // Size: 0x8
    // Offset: 0x50
    Valve::VR::IVRApplications::_CancelApplicationLaunch* CancelApplicationLaunch;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_CancelApplicationLaunch*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._IdentifyApplication IdentifyApplication
    // Size: 0x8
    // Offset: 0x58
    Valve::VR::IVRApplications::_IdentifyApplication* IdentifyApplication;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_IdentifyApplication*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationProcessId GetApplicationProcessId
    // Size: 0x8
    // Offset: 0x60
    Valve::VR::IVRApplications::_GetApplicationProcessId* GetApplicationProcessId;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationProcessId*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum
    // Size: 0x8
    // Offset: 0x68
    Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum* GetApplicationsErrorNameFromEnum;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationPropertyString GetApplicationPropertyString
    // Size: 0x8
    // Offset: 0x70
    Valve::VR::IVRApplications::_GetApplicationPropertyString* GetApplicationPropertyString;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationPropertyString*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationPropertyBool GetApplicationPropertyBool
    // Size: 0x8
    // Offset: 0x78
    Valve::VR::IVRApplications::_GetApplicationPropertyBool* GetApplicationPropertyBool;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationPropertyBool*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationPropertyUint64 GetApplicationPropertyUint64
    // Size: 0x8
    // Offset: 0x80
    Valve::VR::IVRApplications::_GetApplicationPropertyUint64* GetApplicationPropertyUint64;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationPropertyUint64*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._SetApplicationAutoLaunch SetApplicationAutoLaunch
    // Size: 0x8
    // Offset: 0x88
    Valve::VR::IVRApplications::_SetApplicationAutoLaunch* SetApplicationAutoLaunch;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_SetApplicationAutoLaunch*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationAutoLaunch GetApplicationAutoLaunch
    // Size: 0x8
    // Offset: 0x90
    Valve::VR::IVRApplications::_GetApplicationAutoLaunch* GetApplicationAutoLaunch;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationAutoLaunch*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType
    // Size: 0x8
    // Offset: 0x98
    Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType* SetDefaultApplicationForMimeType;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType
    // Size: 0x8
    // Offset: 0xA0
    Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType* GetDefaultApplicationForMimeType;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes
    // Size: 0x8
    // Offset: 0xA8
    Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes* GetApplicationSupportedMimeTypes;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType
    // Size: 0x8
    // Offset: 0xB0
    Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType* GetApplicationsThatSupportMimeType;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationLaunchArguments GetApplicationLaunchArguments
    // Size: 0x8
    // Offset: 0xB8
    Valve::VR::IVRApplications::_GetApplicationLaunchArguments* GetApplicationLaunchArguments;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationLaunchArguments*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetStartingApplication GetStartingApplication
    // Size: 0x8
    // Offset: 0xC0
    Valve::VR::IVRApplications::_GetStartingApplication* GetStartingApplication;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetStartingApplication*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetTransitionState GetTransitionState
    // Size: 0x8
    // Offset: 0xC8
    Valve::VR::IVRApplications::_GetTransitionState* GetTransitionState;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetTransitionState*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck
    // Size: 0x8
    // Offset: 0xD0
    Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck* PerformApplicationPrelaunchCheck;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum
    // Size: 0x8
    // Offset: 0xD8
    Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum* GetApplicationsTransitionStateNameFromEnum;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._IsQuitUserPromptRequested IsQuitUserPromptRequested
    // Size: 0x8
    // Offset: 0xE0
    Valve::VR::IVRApplications::_IsQuitUserPromptRequested* IsQuitUserPromptRequested;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_IsQuitUserPromptRequested*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._LaunchInternalProcess LaunchInternalProcess
    // Size: 0x8
    // Offset: 0xE8
    Valve::VR::IVRApplications::_LaunchInternalProcess* LaunchInternalProcess;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_LaunchInternalProcess*) == 0x8);
    // Valve.VR.IVRApplications/Valve.VR._GetCurrentSceneProcessId GetCurrentSceneProcessId
    // Size: 0x8
    // Offset: 0xF0
    Valve::VR::IVRApplications::_GetCurrentSceneProcessId* GetCurrentSceneProcessId;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRApplications::_GetCurrentSceneProcessId*) == 0x8);
    // Creating value type constructor for type: IVRApplications
    constexpr IVRApplications(Valve::VR::IVRApplications::_AddApplicationManifest* AddApplicationManifest_ = {}, Valve::VR::IVRApplications::_RemoveApplicationManifest* RemoveApplicationManifest_ = {}, Valve::VR::IVRApplications::_IsApplicationInstalled* IsApplicationInstalled_ = {}, Valve::VR::IVRApplications::_GetApplicationCount* GetApplicationCount_ = {}, Valve::VR::IVRApplications::_GetApplicationKeyByIndex* GetApplicationKeyByIndex_ = {}, Valve::VR::IVRApplications::_GetApplicationKeyByProcessId* GetApplicationKeyByProcessId_ = {}, Valve::VR::IVRApplications::_LaunchApplication* LaunchApplication_ = {}, Valve::VR::IVRApplications::_LaunchTemplateApplication* LaunchTemplateApplication_ = {}, Valve::VR::IVRApplications::_LaunchApplicationFromMimeType* LaunchApplicationFromMimeType_ = {}, Valve::VR::IVRApplications::_LaunchDashboardOverlay* LaunchDashboardOverlay_ = {}, Valve::VR::IVRApplications::_CancelApplicationLaunch* CancelApplicationLaunch_ = {}, Valve::VR::IVRApplications::_IdentifyApplication* IdentifyApplication_ = {}, Valve::VR::IVRApplications::_GetApplicationProcessId* GetApplicationProcessId_ = {}, Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum* GetApplicationsErrorNameFromEnum_ = {}, Valve::VR::IVRApplications::_GetApplicationPropertyString* GetApplicationPropertyString_ = {}, Valve::VR::IVRApplications::_GetApplicationPropertyBool* GetApplicationPropertyBool_ = {}, Valve::VR::IVRApplications::_GetApplicationPropertyUint64* GetApplicationPropertyUint64_ = {}, Valve::VR::IVRApplications::_SetApplicationAutoLaunch* SetApplicationAutoLaunch_ = {}, Valve::VR::IVRApplications::_GetApplicationAutoLaunch* GetApplicationAutoLaunch_ = {}, Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType* SetDefaultApplicationForMimeType_ = {}, Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType* GetDefaultApplicationForMimeType_ = {}, Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes* GetApplicationSupportedMimeTypes_ = {}, Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType* GetApplicationsThatSupportMimeType_ = {}, Valve::VR::IVRApplications::_GetApplicationLaunchArguments* GetApplicationLaunchArguments_ = {}, Valve::VR::IVRApplications::_GetStartingApplication* GetStartingApplication_ = {}, Valve::VR::IVRApplications::_GetTransitionState* GetTransitionState_ = {}, Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck* PerformApplicationPrelaunchCheck_ = {}, Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum* GetApplicationsTransitionStateNameFromEnum_ = {}, Valve::VR::IVRApplications::_IsQuitUserPromptRequested* IsQuitUserPromptRequested_ = {}, Valve::VR::IVRApplications::_LaunchInternalProcess* LaunchInternalProcess_ = {}, Valve::VR::IVRApplications::_GetCurrentSceneProcessId* GetCurrentSceneProcessId_ = {}) noexcept : AddApplicationManifest{AddApplicationManifest_}, RemoveApplicationManifest{RemoveApplicationManifest_}, IsApplicationInstalled{IsApplicationInstalled_}, GetApplicationCount{GetApplicationCount_}, GetApplicationKeyByIndex{GetApplicationKeyByIndex_}, GetApplicationKeyByProcessId{GetApplicationKeyByProcessId_}, LaunchApplication{LaunchApplication_}, LaunchTemplateApplication{LaunchTemplateApplication_}, LaunchApplicationFromMimeType{LaunchApplicationFromMimeType_}, LaunchDashboardOverlay{LaunchDashboardOverlay_}, CancelApplicationLaunch{CancelApplicationLaunch_}, IdentifyApplication{IdentifyApplication_}, GetApplicationProcessId{GetApplicationProcessId_}, GetApplicationsErrorNameFromEnum{GetApplicationsErrorNameFromEnum_}, GetApplicationPropertyString{GetApplicationPropertyString_}, GetApplicationPropertyBool{GetApplicationPropertyBool_}, GetApplicationPropertyUint64{GetApplicationPropertyUint64_}, SetApplicationAutoLaunch{SetApplicationAutoLaunch_}, GetApplicationAutoLaunch{GetApplicationAutoLaunch_}, SetDefaultApplicationForMimeType{SetDefaultApplicationForMimeType_}, GetDefaultApplicationForMimeType{GetDefaultApplicationForMimeType_}, GetApplicationSupportedMimeTypes{GetApplicationSupportedMimeTypes_}, GetApplicationsThatSupportMimeType{GetApplicationsThatSupportMimeType_}, GetApplicationLaunchArguments{GetApplicationLaunchArguments_}, GetStartingApplication{GetStartingApplication_}, GetTransitionState{GetTransitionState_}, PerformApplicationPrelaunchCheck{PerformApplicationPrelaunchCheck_}, GetApplicationsTransitionStateNameFromEnum{GetApplicationsTransitionStateNameFromEnum_}, IsQuitUserPromptRequested{IsQuitUserPromptRequested_}, LaunchInternalProcess{LaunchInternalProcess_}, GetCurrentSceneProcessId{GetCurrentSceneProcessId_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._AddApplicationManifest AddApplicationManifest
    Valve::VR::IVRApplications::_AddApplicationManifest*& dyn_AddApplicationManifest();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._RemoveApplicationManifest RemoveApplicationManifest
    Valve::VR::IVRApplications::_RemoveApplicationManifest*& dyn_RemoveApplicationManifest();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._IsApplicationInstalled IsApplicationInstalled
    Valve::VR::IVRApplications::_IsApplicationInstalled*& dyn_IsApplicationInstalled();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationCount GetApplicationCount
    Valve::VR::IVRApplications::_GetApplicationCount*& dyn_GetApplicationCount();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationKeyByIndex GetApplicationKeyByIndex
    Valve::VR::IVRApplications::_GetApplicationKeyByIndex*& dyn_GetApplicationKeyByIndex();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationKeyByProcessId GetApplicationKeyByProcessId
    Valve::VR::IVRApplications::_GetApplicationKeyByProcessId*& dyn_GetApplicationKeyByProcessId();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._LaunchApplication LaunchApplication
    Valve::VR::IVRApplications::_LaunchApplication*& dyn_LaunchApplication();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._LaunchTemplateApplication LaunchTemplateApplication
    Valve::VR::IVRApplications::_LaunchTemplateApplication*& dyn_LaunchTemplateApplication();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._LaunchApplicationFromMimeType LaunchApplicationFromMimeType
    Valve::VR::IVRApplications::_LaunchApplicationFromMimeType*& dyn_LaunchApplicationFromMimeType();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._LaunchDashboardOverlay LaunchDashboardOverlay
    Valve::VR::IVRApplications::_LaunchDashboardOverlay*& dyn_LaunchDashboardOverlay();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._CancelApplicationLaunch CancelApplicationLaunch
    Valve::VR::IVRApplications::_CancelApplicationLaunch*& dyn_CancelApplicationLaunch();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._IdentifyApplication IdentifyApplication
    Valve::VR::IVRApplications::_IdentifyApplication*& dyn_IdentifyApplication();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationProcessId GetApplicationProcessId
    Valve::VR::IVRApplications::_GetApplicationProcessId*& dyn_GetApplicationProcessId();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum
    Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum*& dyn_GetApplicationsErrorNameFromEnum();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationPropertyString GetApplicationPropertyString
    Valve::VR::IVRApplications::_GetApplicationPropertyString*& dyn_GetApplicationPropertyString();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationPropertyBool GetApplicationPropertyBool
    Valve::VR::IVRApplications::_GetApplicationPropertyBool*& dyn_GetApplicationPropertyBool();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationPropertyUint64 GetApplicationPropertyUint64
    Valve::VR::IVRApplications::_GetApplicationPropertyUint64*& dyn_GetApplicationPropertyUint64();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._SetApplicationAutoLaunch SetApplicationAutoLaunch
    Valve::VR::IVRApplications::_SetApplicationAutoLaunch*& dyn_SetApplicationAutoLaunch();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationAutoLaunch GetApplicationAutoLaunch
    Valve::VR::IVRApplications::_GetApplicationAutoLaunch*& dyn_GetApplicationAutoLaunch();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType
    Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType*& dyn_SetDefaultApplicationForMimeType();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType
    Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType*& dyn_GetDefaultApplicationForMimeType();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes
    Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes*& dyn_GetApplicationSupportedMimeTypes();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType
    Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType*& dyn_GetApplicationsThatSupportMimeType();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationLaunchArguments GetApplicationLaunchArguments
    Valve::VR::IVRApplications::_GetApplicationLaunchArguments*& dyn_GetApplicationLaunchArguments();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetStartingApplication GetStartingApplication
    Valve::VR::IVRApplications::_GetStartingApplication*& dyn_GetStartingApplication();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetTransitionState GetTransitionState
    Valve::VR::IVRApplications::_GetTransitionState*& dyn_GetTransitionState();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck
    Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck*& dyn_PerformApplicationPrelaunchCheck();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum
    Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum*& dyn_GetApplicationsTransitionStateNameFromEnum();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._IsQuitUserPromptRequested IsQuitUserPromptRequested
    Valve::VR::IVRApplications::_IsQuitUserPromptRequested*& dyn_IsQuitUserPromptRequested();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._LaunchInternalProcess LaunchInternalProcess
    Valve::VR::IVRApplications::_LaunchInternalProcess*& dyn_LaunchInternalProcess();
    // Get instance field reference: Valve.VR.IVRApplications/Valve.VR._GetCurrentSceneProcessId GetCurrentSceneProcessId
    Valve::VR::IVRApplications::_GetCurrentSceneProcessId*& dyn_GetCurrentSceneProcessId();
  }; // Valve.VR.IVRApplications
  #pragma pack(pop)
  static check_size<sizeof(IVRApplications), 240 + sizeof(Valve::VR::IVRApplications::_GetCurrentSceneProcessId*)> __Valve_VR_IVRApplicationsSizeCheck;
  static_assert(sizeof(IVRApplications) == 0xF8);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::IVRApplications, "Valve.VR", "IVRApplications");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
