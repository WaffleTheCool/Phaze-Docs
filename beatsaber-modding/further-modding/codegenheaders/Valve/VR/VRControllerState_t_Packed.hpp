// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Valve.VR.VRControllerAxis_t
#include "Valve/VR/VRControllerAxis_t.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x3C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.VRControllerState_t_Packed
  // [TokenAttribute] Offset: FFFFFFFF
  struct VRControllerState_t_Packed/*, public System::ValueType*/ {
    public:
    // public System.UInt32 unPacketNum
    // Size: 0x4
    // Offset: 0x0
    uint unPacketNum;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt64 ulButtonPressed
    // Size: 0x8
    // Offset: 0x4
    uint64_t ulButtonPressed;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 ulButtonTouched
    // Size: 0x8
    // Offset: 0xC
    uint64_t ulButtonTouched;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public Valve.VR.VRControllerAxis_t rAxis0
    // Size: 0x8
    // Offset: 0x14
    Valve::VR::VRControllerAxis_t rAxis0;
    // Field size check
    static_assert(sizeof(Valve::VR::VRControllerAxis_t) == 0x8);
    // public Valve.VR.VRControllerAxis_t rAxis1
    // Size: 0x8
    // Offset: 0x1C
    Valve::VR::VRControllerAxis_t rAxis1;
    // Field size check
    static_assert(sizeof(Valve::VR::VRControllerAxis_t) == 0x8);
    // public Valve.VR.VRControllerAxis_t rAxis2
    // Size: 0x8
    // Offset: 0x24
    Valve::VR::VRControllerAxis_t rAxis2;
    // Field size check
    static_assert(sizeof(Valve::VR::VRControllerAxis_t) == 0x8);
    // public Valve.VR.VRControllerAxis_t rAxis3
    // Size: 0x8
    // Offset: 0x2C
    Valve::VR::VRControllerAxis_t rAxis3;
    // Field size check
    static_assert(sizeof(Valve::VR::VRControllerAxis_t) == 0x8);
    // public Valve.VR.VRControllerAxis_t rAxis4
    // Size: 0x8
    // Offset: 0x34
    Valve::VR::VRControllerAxis_t rAxis4;
    // Field size check
    static_assert(sizeof(Valve::VR::VRControllerAxis_t) == 0x8);
    // Creating value type constructor for type: VRControllerState_t_Packed
    constexpr VRControllerState_t_Packed(uint unPacketNum_ = {}, uint64_t ulButtonPressed_ = {}, uint64_t ulButtonTouched_ = {}, Valve::VR::VRControllerAxis_t rAxis0_ = {}, Valve::VR::VRControllerAxis_t rAxis1_ = {}, Valve::VR::VRControllerAxis_t rAxis2_ = {}, Valve::VR::VRControllerAxis_t rAxis3_ = {}, Valve::VR::VRControllerAxis_t rAxis4_ = {}) noexcept : unPacketNum{unPacketNum_}, ulButtonPressed{ulButtonPressed_}, ulButtonTouched{ulButtonTouched_}, rAxis0{rAxis0_}, rAxis1{rAxis1_}, rAxis2{rAxis2_}, rAxis3{rAxis3_}, rAxis4{rAxis4_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 unPacketNum
    uint& dyn_unPacketNum();
    // Get instance field reference: public System.UInt64 ulButtonPressed
    uint64_t& dyn_ulButtonPressed();
    // Get instance field reference: public System.UInt64 ulButtonTouched
    uint64_t& dyn_ulButtonTouched();
    // Get instance field reference: public Valve.VR.VRControllerAxis_t rAxis0
    Valve::VR::VRControllerAxis_t& dyn_rAxis0();
    // Get instance field reference: public Valve.VR.VRControllerAxis_t rAxis1
    Valve::VR::VRControllerAxis_t& dyn_rAxis1();
    // Get instance field reference: public Valve.VR.VRControllerAxis_t rAxis2
    Valve::VR::VRControllerAxis_t& dyn_rAxis2();
    // Get instance field reference: public Valve.VR.VRControllerAxis_t rAxis3
    Valve::VR::VRControllerAxis_t& dyn_rAxis3();
    // Get instance field reference: public Valve.VR.VRControllerAxis_t rAxis4
    Valve::VR::VRControllerAxis_t& dyn_rAxis4();
    // public System.Void .ctor(Valve.VR.VRControllerState_t unpacked)
    // Offset: 0x23D091C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    VRControllerState_t_Packed(Valve::VR::VRControllerState_t unpacked) {
      static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRControllerState_t_Packed::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, unpacked);
    }
    // public System.Void Unpack(ref Valve.VR.VRControllerState_t unpacked)
    // Offset: 0x23D0960
    void Unpack(ByRef<Valve::VR::VRControllerState_t> unpacked);
  }; // Valve.VR.VRControllerState_t_Packed
  #pragma pack(pop)
  static check_size<sizeof(VRControllerState_t_Packed), 52 + sizeof(Valve::VR::VRControllerAxis_t)> __Valve_VR_VRControllerState_t_PackedSizeCheck;
  static_assert(sizeof(VRControllerState_t_Packed) == 0x3C);
}
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::VRControllerState_t_Packed, "Valve.VR", "VRControllerState_t_Packed");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::VRControllerState_t_Packed::VRControllerState_t_Packed
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::VRControllerState_t_Packed::Unpack
// Il2CppName: Unpack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::VRControllerState_t_Packed::*)(ByRef<Valve::VR::VRControllerState_t>)>(&Valve::VR::VRControllerState_t_Packed::Unpack)> {
  static const MethodInfo* get() {
    static auto* unpacked = &::il2cpp_utils::GetClassFromName("Valve.VR", "VRControllerState_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::VRControllerState_t_Packed), "Unpack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unpacked});
  }
};
