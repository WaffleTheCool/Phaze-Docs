// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.IVRTrackedCamera
  // [TokenAttribute] Offset: FFFFFFFF
  struct IVRTrackedCamera/*, public System::ValueType*/ {
    public:
    // Nested type: Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum
    class _GetCameraErrorNameFromEnum;
    // Nested type: Valve::VR::IVRTrackedCamera::_HasCamera
    class _HasCamera;
    // Nested type: Valve::VR::IVRTrackedCamera::_GetCameraFrameSize
    class _GetCameraFrameSize;
    // Nested type: Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics
    class _GetCameraIntrinsics;
    // Nested type: Valve::VR::IVRTrackedCamera::_GetCameraProjection
    class _GetCameraProjection;
    // Nested type: Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService
    class _AcquireVideoStreamingService;
    // Nested type: Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService
    class _ReleaseVideoStreamingService;
    // Nested type: Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer
    class _GetVideoStreamFrameBuffer;
    // Nested type: Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize
    class _GetVideoStreamTextureSize;
    // Nested type: Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11
    class _GetVideoStreamTextureD3D11;
    // Nested type: Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL
    class _GetVideoStreamTextureGL;
    // Nested type: Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL
    class _ReleaseVideoStreamTextureGL;
    // Valve.VR.IVRTrackedCamera/Valve.VR._GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum
    // Size: 0x8
    // Offset: 0x0
    Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum* GetCameraErrorNameFromEnum;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._HasCamera HasCamera
    // Size: 0x8
    // Offset: 0x8
    Valve::VR::IVRTrackedCamera::_HasCamera* HasCamera;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_HasCamera*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._GetCameraFrameSize GetCameraFrameSize
    // Size: 0x8
    // Offset: 0x10
    Valve::VR::IVRTrackedCamera::_GetCameraFrameSize* GetCameraFrameSize;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_GetCameraFrameSize*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._GetCameraIntrinsics GetCameraIntrinsics
    // Size: 0x8
    // Offset: 0x18
    Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics* GetCameraIntrinsics;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._GetCameraProjection GetCameraProjection
    // Size: 0x8
    // Offset: 0x20
    Valve::VR::IVRTrackedCamera::_GetCameraProjection* GetCameraProjection;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_GetCameraProjection*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._AcquireVideoStreamingService AcquireVideoStreamingService
    // Size: 0x8
    // Offset: 0x28
    Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService* AcquireVideoStreamingService;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._ReleaseVideoStreamingService ReleaseVideoStreamingService
    // Size: 0x8
    // Offset: 0x30
    Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService* ReleaseVideoStreamingService;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer
    // Size: 0x8
    // Offset: 0x38
    Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer* GetVideoStreamFrameBuffer;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._GetVideoStreamTextureSize GetVideoStreamTextureSize
    // Size: 0x8
    // Offset: 0x40
    Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize* GetVideoStreamTextureSize;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11
    // Size: 0x8
    // Offset: 0x48
    Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11* GetVideoStreamTextureD3D11;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._GetVideoStreamTextureGL GetVideoStreamTextureGL
    // Size: 0x8
    // Offset: 0x50
    Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL* GetVideoStreamTextureGL;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL*) == 0x8);
    // Valve.VR.IVRTrackedCamera/Valve.VR._ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL
    // Size: 0x8
    // Offset: 0x58
    Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL* ReleaseVideoStreamTextureGL;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL*) == 0x8);
    // Creating value type constructor for type: IVRTrackedCamera
    constexpr IVRTrackedCamera(Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum* GetCameraErrorNameFromEnum_ = {}, Valve::VR::IVRTrackedCamera::_HasCamera* HasCamera_ = {}, Valve::VR::IVRTrackedCamera::_GetCameraFrameSize* GetCameraFrameSize_ = {}, Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics* GetCameraIntrinsics_ = {}, Valve::VR::IVRTrackedCamera::_GetCameraProjection* GetCameraProjection_ = {}, Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService* AcquireVideoStreamingService_ = {}, Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService* ReleaseVideoStreamingService_ = {}, Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer* GetVideoStreamFrameBuffer_ = {}, Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize* GetVideoStreamTextureSize_ = {}, Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11* GetVideoStreamTextureD3D11_ = {}, Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL* GetVideoStreamTextureGL_ = {}, Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL* ReleaseVideoStreamTextureGL_ = {}) noexcept : GetCameraErrorNameFromEnum{GetCameraErrorNameFromEnum_}, HasCamera{HasCamera_}, GetCameraFrameSize{GetCameraFrameSize_}, GetCameraIntrinsics{GetCameraIntrinsics_}, GetCameraProjection{GetCameraProjection_}, AcquireVideoStreamingService{AcquireVideoStreamingService_}, ReleaseVideoStreamingService{ReleaseVideoStreamingService_}, GetVideoStreamFrameBuffer{GetVideoStreamFrameBuffer_}, GetVideoStreamTextureSize{GetVideoStreamTextureSize_}, GetVideoStreamTextureD3D11{GetVideoStreamTextureD3D11_}, GetVideoStreamTextureGL{GetVideoStreamTextureGL_}, ReleaseVideoStreamTextureGL{ReleaseVideoStreamTextureGL_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum
    Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum*& dyn_GetCameraErrorNameFromEnum();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._HasCamera HasCamera
    Valve::VR::IVRTrackedCamera::_HasCamera*& dyn_HasCamera();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._GetCameraFrameSize GetCameraFrameSize
    Valve::VR::IVRTrackedCamera::_GetCameraFrameSize*& dyn_GetCameraFrameSize();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._GetCameraIntrinsics GetCameraIntrinsics
    Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics*& dyn_GetCameraIntrinsics();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._GetCameraProjection GetCameraProjection
    Valve::VR::IVRTrackedCamera::_GetCameraProjection*& dyn_GetCameraProjection();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._AcquireVideoStreamingService AcquireVideoStreamingService
    Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService*& dyn_AcquireVideoStreamingService();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._ReleaseVideoStreamingService ReleaseVideoStreamingService
    Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService*& dyn_ReleaseVideoStreamingService();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer
    Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer*& dyn_GetVideoStreamFrameBuffer();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._GetVideoStreamTextureSize GetVideoStreamTextureSize
    Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize*& dyn_GetVideoStreamTextureSize();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11
    Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11*& dyn_GetVideoStreamTextureD3D11();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._GetVideoStreamTextureGL GetVideoStreamTextureGL
    Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL*& dyn_GetVideoStreamTextureGL();
    // Get instance field reference: Valve.VR.IVRTrackedCamera/Valve.VR._ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL
    Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL*& dyn_ReleaseVideoStreamTextureGL();
  }; // Valve.VR.IVRTrackedCamera
  #pragma pack(pop)
  static check_size<sizeof(IVRTrackedCamera), 88 + sizeof(Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL*)> __Valve_VR_IVRTrackedCameraSizeCheck;
  static_assert(sizeof(IVRTrackedCamera) == 0x60);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::IVRTrackedCamera, "Valve.VR", "IVRTrackedCamera");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
