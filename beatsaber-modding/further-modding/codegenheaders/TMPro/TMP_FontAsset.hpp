// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: TMPro.TMP_Asset
#include "TMPro/TMP_Asset.hpp"
// Including type: TMPro.AtlasPopulationMode
#include "TMPro/AtlasPopulationMode.hpp"
// Including type: UnityEngine.TextCore.FaceInfo
#include "UnityEngine/TextCore/FaceInfo.hpp"
// Including type: UnityEngine.TextCore.GlyphRect
#include "UnityEngine/TextCore/GlyphRect.hpp"
// Including type: UnityEngine.TextCore.LowLevel.GlyphRenderMode
#include "UnityEngine/TextCore/LowLevel/GlyphRenderMode.hpp"
// Including type: TMPro.FontAssetCreationSettings
#include "TMPro/FontAssetCreationSettings.hpp"
// Including type: TMPro.TMP_FontWeightPair
#include "TMPro/TMP_FontWeightPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Character
  class TMP_Character;
  // Forward declaring type: FaceInfo_Legacy
  class FaceInfo_Legacy;
  // Forward declaring type: TMP_Glyph
  class TMP_Glyph;
  // Forward declaring type: KerningTable
  class KerningTable;
  // Forward declaring type: TMP_FontFeatureTable
  class TMP_FontFeatureTable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Font
  class Font;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::TextCore
namespace UnityEngine::TextCore {
  // Forward declaring type: Glyph
  class Glyph;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x1E8
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_FontAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class TMP_FontAsset : public TMPro::TMP_Asset {
    public:
    // Writing base type padding for base size: 0x2C to desired offset: 0x30
    char ___base_padding[0x4] = {};
    // Nested type: TMPro::TMP_FontAsset::$$c
    class $$c;
    // private System.String m_Version
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* m_Version;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String m_SourceFontFileGUID
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* m_SourceFontFileGUID;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private UnityEngine.Font m_SourceFontFile
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Font* m_SourceFontFile;
    // Field size check
    static_assert(sizeof(UnityEngine::Font*) == 0x8);
    // private TMPro.AtlasPopulationMode m_AtlasPopulationMode
    // Size: 0x4
    // Offset: 0x48
    TMPro::AtlasPopulationMode m_AtlasPopulationMode;
    // Field size check
    static_assert(sizeof(TMPro::AtlasPopulationMode) == 0x4);
    // Padding between fields: m_AtlasPopulationMode and: m_FaceInfo
    char __padding3[0x4] = {};
    // private UnityEngine.TextCore.FaceInfo m_FaceInfo
    // Size: 0x5C
    // Offset: 0x50
    UnityEngine::TextCore::FaceInfo m_FaceInfo;
    // Field size check
    static_assert(sizeof(UnityEngine::TextCore::FaceInfo) == 0x5C);
    // Padding between fields: m_FaceInfo and: m_GlyphTable
    char __padding4[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphTable
    // Size: 0x8
    // Offset: 0xB0
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* m_GlyphTable;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.TextCore.Glyph> m_GlyphLookupDictionary
    // Size: 0x8
    // Offset: 0xB8
    System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>* m_GlyphLookupDictionary;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>*) == 0x8);
    // private System.Collections.Generic.List`1<TMPro.TMP_Character> m_CharacterTable
    // Size: 0x8
    // Offset: 0xC0
    System::Collections::Generic::List_1<TMPro::TMP_Character*>* m_CharacterTable;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<TMPro::TMP_Character*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.UInt32,TMPro.TMP_Character> m_CharacterLookupDictionary
    // Size: 0x8
    // Offset: 0xC8
    System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>* m_CharacterLookupDictionary;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>*) == 0x8);
    // private UnityEngine.Texture2D m_AtlasTexture
    // Size: 0x8
    // Offset: 0xD0
    UnityEngine::Texture2D* m_AtlasTexture;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Texture2D[] m_AtlasTextures
    // Size: 0x8
    // Offset: 0xD8
    ::Array<UnityEngine::Texture2D*>* m_AtlasTextures;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Texture2D*>*) == 0x8);
    // System.Int32 m_AtlasTextureIndex
    // Size: 0x4
    // Offset: 0xE0
    int m_AtlasTextureIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_AtlasTextureIndex and: m_UsedGlyphRects
    char __padding11[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> m_UsedGlyphRects
    // Size: 0x8
    // Offset: 0xE8
    System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* m_UsedGlyphRects;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> m_FreeGlyphRects
    // Size: 0x8
    // Offset: 0xF0
    System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* m_FreeGlyphRects;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*) == 0x8);
    // private TMPro.FaceInfo_Legacy m_fontInfo
    // Size: 0x8
    // Offset: 0xF8
    TMPro::FaceInfo_Legacy* m_fontInfo;
    // Field size check
    static_assert(sizeof(TMPro::FaceInfo_Legacy*) == 0x8);
    // public UnityEngine.Texture2D atlas
    // Size: 0x8
    // Offset: 0x100
    UnityEngine::Texture2D* atlas;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture2D*) == 0x8);
    // private System.Int32 m_AtlasWidth
    // Size: 0x4
    // Offset: 0x108
    int m_AtlasWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_AtlasHeight
    // Size: 0x4
    // Offset: 0x10C
    int m_AtlasHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_AtlasPadding
    // Size: 0x4
    // Offset: 0x110
    int m_AtlasPadding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.TextCore.LowLevel.GlyphRenderMode m_AtlasRenderMode
    // Size: 0x4
    // Offset: 0x114
    UnityEngine::TextCore::LowLevel::GlyphRenderMode m_AtlasRenderMode;
    // Field size check
    static_assert(sizeof(UnityEngine::TextCore::LowLevel::GlyphRenderMode) == 0x4);
    // System.Collections.Generic.List`1<TMPro.TMP_Glyph> m_glyphInfoList
    // Size: 0x8
    // Offset: 0x118
    System::Collections::Generic::List_1<TMPro::TMP_Glyph*>* m_glyphInfoList;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<TMPro::TMP_Glyph*>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xDFA584
    // TMPro.KerningTable m_KerningTable
    // Size: 0x8
    // Offset: 0x120
    TMPro::KerningTable* m_KerningTable;
    // Field size check
    static_assert(sizeof(TMPro::KerningTable*) == 0x8);
    // private TMPro.TMP_FontFeatureTable m_FontFeatureTable
    // Size: 0x8
    // Offset: 0x128
    TMPro::TMP_FontFeatureTable* m_FontFeatureTable;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontFeatureTable*) == 0x8);
    // private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> fallbackFontAssets
    // Size: 0x8
    // Offset: 0x130
    System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* fallbackFontAssets;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*) == 0x8);
    // public System.Collections.Generic.List`1<TMPro.TMP_FontAsset> m_FallbackFontAssetTable
    // Size: 0x8
    // Offset: 0x138
    System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* m_FallbackFontAssetTable;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*) == 0x8);
    // TMPro.FontAssetCreationSettings m_CreationSettings
    // Size: 0x55
    // Offset: 0x140
    TMPro::FontAssetCreationSettings m_CreationSettings;
    // Field size check
    static_assert(sizeof(TMPro::FontAssetCreationSettings) == 0x55);
    // Padding between fields: m_CreationSettings and: m_FontWeightTable
    char __padding25[0x3] = {};
    // private TMPro.TMP_FontWeightPair[] m_FontWeightTable
    // Size: 0x8
    // Offset: 0x198
    ::Array<TMPro::TMP_FontWeightPair>* m_FontWeightTable;
    // Field size check
    static_assert(sizeof(::Array<TMPro::TMP_FontWeightPair>*) == 0x8);
    // private TMPro.TMP_FontWeightPair[] fontWeights
    // Size: 0x8
    // Offset: 0x1A0
    ::Array<TMPro::TMP_FontWeightPair>* fontWeights;
    // Field size check
    static_assert(sizeof(::Array<TMPro::TMP_FontWeightPair>*) == 0x8);
    // public System.Single normalStyle
    // Size: 0x4
    // Offset: 0x1A8
    float normalStyle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single normalSpacingOffset
    // Size: 0x4
    // Offset: 0x1AC
    float normalSpacingOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single boldStyle
    // Size: 0x4
    // Offset: 0x1B0
    float boldStyle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single boldSpacing
    // Size: 0x4
    // Offset: 0x1B4
    float boldSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Byte italicStyle
    // Size: 0x1
    // Offset: 0x1B8
    uint8_t italicStyle;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte tabSize
    // Size: 0x1
    // Offset: 0x1B9
    uint8_t tabSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_oldTabSize
    // Size: 0x1
    // Offset: 0x1BA
    uint8_t m_oldTabSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Boolean m_IsFontAssetLookupTablesDirty
    // Size: 0x1
    // Offset: 0x1BB
    bool m_IsFontAssetLookupTablesDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsFontAssetLookupTablesDirty and: m_GlyphsToPack
    char __padding35[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsToPack
    // Size: 0x8
    // Offset: 0x1C0
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* m_GlyphsToPack;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsPacked
    // Size: 0x8
    // Offset: 0x1C8
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* m_GlyphsPacked;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsToRender
    // Size: 0x8
    // Offset: 0x1D0
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* m_GlyphsToRender;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.UInt32> m_GlyphIndexList
    // Size: 0x8
    // Offset: 0x1D8
    System::Collections::Generic::List_1<uint>* m_GlyphIndexList;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<uint>*) == 0x8);
    // private System.Collections.Generic.List`1<TMPro.TMP_Character> m_CharactersToAdd
    // Size: 0x8
    // Offset: 0x1E0
    System::Collections::Generic::List_1<TMPro::TMP_Character*>* m_CharactersToAdd;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<TMPro::TMP_Character*>*) == 0x8);
    // Creating value type constructor for type: TMP_FontAsset
    TMP_FontAsset(::Il2CppString* m_Version_ = {}, ::Il2CppString* m_SourceFontFileGUID_ = {}, UnityEngine::Font* m_SourceFontFile_ = {}, TMPro::AtlasPopulationMode m_AtlasPopulationMode_ = {}, UnityEngine::TextCore::FaceInfo m_FaceInfo_ = {}, System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* m_GlyphTable_ = {}, System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>* m_GlyphLookupDictionary_ = {}, System::Collections::Generic::List_1<TMPro::TMP_Character*>* m_CharacterTable_ = {}, System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>* m_CharacterLookupDictionary_ = {}, UnityEngine::Texture2D* m_AtlasTexture_ = {}, ::Array<UnityEngine::Texture2D*>* m_AtlasTextures_ = {}, int m_AtlasTextureIndex_ = {}, System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* m_UsedGlyphRects_ = {}, System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* m_FreeGlyphRects_ = {}, TMPro::FaceInfo_Legacy* m_fontInfo_ = {}, UnityEngine::Texture2D* atlas_ = {}, int m_AtlasWidth_ = {}, int m_AtlasHeight_ = {}, int m_AtlasPadding_ = {}, UnityEngine::TextCore::LowLevel::GlyphRenderMode m_AtlasRenderMode_ = {}, System::Collections::Generic::List_1<TMPro::TMP_Glyph*>* m_glyphInfoList_ = {}, TMPro::KerningTable* m_KerningTable_ = {}, TMPro::TMP_FontFeatureTable* m_FontFeatureTable_ = {}, System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* fallbackFontAssets_ = {}, System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* m_FallbackFontAssetTable_ = {}, TMPro::FontAssetCreationSettings m_CreationSettings_ = {}, ::Array<TMPro::TMP_FontWeightPair>* m_FontWeightTable_ = {}, ::Array<TMPro::TMP_FontWeightPair>* fontWeights_ = {}, float normalStyle_ = {}, float normalSpacingOffset_ = {}, float boldStyle_ = {}, float boldSpacing_ = {}, uint8_t italicStyle_ = {}, uint8_t tabSize_ = {}, uint8_t m_oldTabSize_ = {}, bool m_IsFontAssetLookupTablesDirty_ = {}, System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* m_GlyphsToPack_ = {}, System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* m_GlyphsPacked_ = {}, System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* m_GlyphsToRender_ = {}, System::Collections::Generic::List_1<uint>* m_GlyphIndexList_ = {}, System::Collections::Generic::List_1<TMPro::TMP_Character*>* m_CharactersToAdd_ = {}) noexcept : m_Version{m_Version_}, m_SourceFontFileGUID{m_SourceFontFileGUID_}, m_SourceFontFile{m_SourceFontFile_}, m_AtlasPopulationMode{m_AtlasPopulationMode_}, m_FaceInfo{m_FaceInfo_}, m_GlyphTable{m_GlyphTable_}, m_GlyphLookupDictionary{m_GlyphLookupDictionary_}, m_CharacterTable{m_CharacterTable_}, m_CharacterLookupDictionary{m_CharacterLookupDictionary_}, m_AtlasTexture{m_AtlasTexture_}, m_AtlasTextures{m_AtlasTextures_}, m_AtlasTextureIndex{m_AtlasTextureIndex_}, m_UsedGlyphRects{m_UsedGlyphRects_}, m_FreeGlyphRects{m_FreeGlyphRects_}, m_fontInfo{m_fontInfo_}, atlas{atlas_}, m_AtlasWidth{m_AtlasWidth_}, m_AtlasHeight{m_AtlasHeight_}, m_AtlasPadding{m_AtlasPadding_}, m_AtlasRenderMode{m_AtlasRenderMode_}, m_glyphInfoList{m_glyphInfoList_}, m_KerningTable{m_KerningTable_}, m_FontFeatureTable{m_FontFeatureTable_}, fallbackFontAssets{fallbackFontAssets_}, m_FallbackFontAssetTable{m_FallbackFontAssetTable_}, m_CreationSettings{m_CreationSettings_}, m_FontWeightTable{m_FontWeightTable_}, fontWeights{fontWeights_}, normalStyle{normalStyle_}, normalSpacingOffset{normalSpacingOffset_}, boldStyle{boldStyle_}, boldSpacing{boldSpacing_}, italicStyle{italicStyle_}, tabSize{tabSize_}, m_oldTabSize{m_oldTabSize_}, m_IsFontAssetLookupTablesDirty{m_IsFontAssetLookupTablesDirty_}, m_GlyphsToPack{m_GlyphsToPack_}, m_GlyphsPacked{m_GlyphsPacked_}, m_GlyphsToRender{m_GlyphsToRender_}, m_GlyphIndexList{m_GlyphIndexList_}, m_CharactersToAdd{m_CharactersToAdd_} {}
    // Get static field: static System.UInt32[] s_GlyphIndexArray
    static ::Array<uint>* _get_s_GlyphIndexArray();
    // Set static field: static System.UInt32[] s_GlyphIndexArray
    static void _set_s_GlyphIndexArray(::Array<uint>* value);
    // Get static field: static System.Collections.Generic.List`1<System.UInt32> s_MissingCharacterList
    static System::Collections::Generic::List_1<uint>* _get_s_MissingCharacterList();
    // Set static field: static System.Collections.Generic.List`1<System.UInt32> s_MissingCharacterList
    static void _set_s_MissingCharacterList(System::Collections::Generic::List_1<uint>* value);
    // Get instance field reference: private System.String m_Version
    ::Il2CppString*& dyn_m_Version();
    // Get instance field reference: System.String m_SourceFontFileGUID
    ::Il2CppString*& dyn_m_SourceFontFileGUID();
    // Get instance field reference: private UnityEngine.Font m_SourceFontFile
    UnityEngine::Font*& dyn_m_SourceFontFile();
    // Get instance field reference: private TMPro.AtlasPopulationMode m_AtlasPopulationMode
    TMPro::AtlasPopulationMode& dyn_m_AtlasPopulationMode();
    // Get instance field reference: private UnityEngine.TextCore.FaceInfo m_FaceInfo
    UnityEngine::TextCore::FaceInfo& dyn_m_FaceInfo();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphTable
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphTable();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.TextCore.Glyph> m_GlyphLookupDictionary
    System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphLookupDictionary();
    // Get instance field reference: private System.Collections.Generic.List`1<TMPro.TMP_Character> m_CharacterTable
    System::Collections::Generic::List_1<TMPro::TMP_Character*>*& dyn_m_CharacterTable();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.UInt32,TMPro.TMP_Character> m_CharacterLookupDictionary
    System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>*& dyn_m_CharacterLookupDictionary();
    // Get instance field reference: private UnityEngine.Texture2D m_AtlasTexture
    UnityEngine::Texture2D*& dyn_m_AtlasTexture();
    // Get instance field reference: private UnityEngine.Texture2D[] m_AtlasTextures
    ::Array<UnityEngine::Texture2D*>*& dyn_m_AtlasTextures();
    // Get instance field reference: System.Int32 m_AtlasTextureIndex
    int& dyn_m_AtlasTextureIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> m_UsedGlyphRects
    System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*& dyn_m_UsedGlyphRects();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> m_FreeGlyphRects
    System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*& dyn_m_FreeGlyphRects();
    // Get instance field reference: private TMPro.FaceInfo_Legacy m_fontInfo
    TMPro::FaceInfo_Legacy*& dyn_m_fontInfo();
    // Get instance field reference: public UnityEngine.Texture2D atlas
    UnityEngine::Texture2D*& dyn_atlas();
    // Get instance field reference: private System.Int32 m_AtlasWidth
    int& dyn_m_AtlasWidth();
    // Get instance field reference: private System.Int32 m_AtlasHeight
    int& dyn_m_AtlasHeight();
    // Get instance field reference: private System.Int32 m_AtlasPadding
    int& dyn_m_AtlasPadding();
    // Get instance field reference: private UnityEngine.TextCore.LowLevel.GlyphRenderMode m_AtlasRenderMode
    UnityEngine::TextCore::LowLevel::GlyphRenderMode& dyn_m_AtlasRenderMode();
    // Get instance field reference: System.Collections.Generic.List`1<TMPro.TMP_Glyph> m_glyphInfoList
    System::Collections::Generic::List_1<TMPro::TMP_Glyph*>*& dyn_m_glyphInfoList();
    // Get instance field reference: TMPro.KerningTable m_KerningTable
    TMPro::KerningTable*& dyn_m_KerningTable();
    // Get instance field reference: private TMPro.TMP_FontFeatureTable m_FontFeatureTable
    TMPro::TMP_FontFeatureTable*& dyn_m_FontFeatureTable();
    // Get instance field reference: private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> fallbackFontAssets
    System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*& dyn_fallbackFontAssets();
    // Get instance field reference: public System.Collections.Generic.List`1<TMPro.TMP_FontAsset> m_FallbackFontAssetTable
    System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*& dyn_m_FallbackFontAssetTable();
    // Get instance field reference: TMPro.FontAssetCreationSettings m_CreationSettings
    TMPro::FontAssetCreationSettings& dyn_m_CreationSettings();
    // Get instance field reference: private TMPro.TMP_FontWeightPair[] m_FontWeightTable
    ::Array<TMPro::TMP_FontWeightPair>*& dyn_m_FontWeightTable();
    // Get instance field reference: private TMPro.TMP_FontWeightPair[] fontWeights
    ::Array<TMPro::TMP_FontWeightPair>*& dyn_fontWeights();
    // Get instance field reference: public System.Single normalStyle
    float& dyn_normalStyle();
    // Get instance field reference: public System.Single normalSpacingOffset
    float& dyn_normalSpacingOffset();
    // Get instance field reference: public System.Single boldStyle
    float& dyn_boldStyle();
    // Get instance field reference: public System.Single boldSpacing
    float& dyn_boldSpacing();
    // Get instance field reference: public System.Byte italicStyle
    uint8_t& dyn_italicStyle();
    // Get instance field reference: public System.Byte tabSize
    uint8_t& dyn_tabSize();
    // Get instance field reference: private System.Byte m_oldTabSize
    uint8_t& dyn_m_oldTabSize();
    // Get instance field reference: System.Boolean m_IsFontAssetLookupTablesDirty
    bool& dyn_m_IsFontAssetLookupTablesDirty();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsToPack
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphsToPack();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsPacked
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphsPacked();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> m_GlyphsToRender
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*& dyn_m_GlyphsToRender();
    // Get instance field reference: private System.Collections.Generic.List`1<System.UInt32> m_GlyphIndexList
    System::Collections::Generic::List_1<uint>*& dyn_m_GlyphIndexList();
    // Get instance field reference: private System.Collections.Generic.List`1<TMPro.TMP_Character> m_CharactersToAdd
    System::Collections::Generic::List_1<TMPro::TMP_Character*>*& dyn_m_CharactersToAdd();
    // public System.String get_version()
    // Offset: 0x1111FD0
    ::Il2CppString* get_version();
    // System.Void set_version(System.String value)
    // Offset: 0x1111FD8
    void set_version(::Il2CppString* value);
    // public UnityEngine.Font get_sourceFontFile()
    // Offset: 0x1111FE0
    UnityEngine::Font* get_sourceFontFile();
    // System.Void set_sourceFontFile(UnityEngine.Font value)
    // Offset: 0x1111FE8
    void set_sourceFontFile(UnityEngine::Font* value);
    // public TMPro.AtlasPopulationMode get_atlasPopulationMode()
    // Offset: 0x1111FF0
    TMPro::AtlasPopulationMode get_atlasPopulationMode();
    // public System.Void set_atlasPopulationMode(TMPro.AtlasPopulationMode value)
    // Offset: 0x1111FF8
    void set_atlasPopulationMode(TMPro::AtlasPopulationMode value);
    // public UnityEngine.TextCore.FaceInfo get_faceInfo()
    // Offset: 0x1112000
    UnityEngine::TextCore::FaceInfo get_faceInfo();
    // System.Void set_faceInfo(UnityEngine.TextCore.FaceInfo value)
    // Offset: 0x1112010
    void set_faceInfo(UnityEngine::TextCore::FaceInfo value);
    // public System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> get_glyphTable()
    // Offset: 0x111202C
    System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* get_glyphTable();
    // System.Void set_glyphTable(System.Collections.Generic.List`1<UnityEngine.TextCore.Glyph> value)
    // Offset: 0x1112034
    void set_glyphTable(System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* value);
    // public System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.TextCore.Glyph> get_glyphLookupTable()
    // Offset: 0x111203C
    System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>* get_glyphLookupTable();
    // public System.Collections.Generic.List`1<TMPro.TMP_Character> get_characterTable()
    // Offset: 0x1112818
    System::Collections::Generic::List_1<TMPro::TMP_Character*>* get_characterTable();
    // System.Void set_characterTable(System.Collections.Generic.List`1<TMPro.TMP_Character> value)
    // Offset: 0x1112820
    void set_characterTable(System::Collections::Generic::List_1<TMPro::TMP_Character*>* value);
    // public System.Collections.Generic.Dictionary`2<System.UInt32,TMPro.TMP_Character> get_characterLookupTable()
    // Offset: 0x1112828
    System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>* get_characterLookupTable();
    // public UnityEngine.Texture2D get_atlasTexture()
    // Offset: 0x1112858
    UnityEngine::Texture2D* get_atlasTexture();
    // public UnityEngine.Texture2D[] get_atlasTextures()
    // Offset: 0x1112900
    ::Array<UnityEngine::Texture2D*>* get_atlasTextures();
    // public System.Void set_atlasTextures(UnityEngine.Texture2D[] value)
    // Offset: 0x1112908
    void set_atlasTextures(::Array<UnityEngine::Texture2D*>* value);
    // System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> get_usedGlyphRects()
    // Offset: 0x1112910
    System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* get_usedGlyphRects();
    // System.Void set_usedGlyphRects(System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> value)
    // Offset: 0x1112918
    void set_usedGlyphRects(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* value);
    // System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> get_freeGlyphRects()
    // Offset: 0x1112920
    System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* get_freeGlyphRects();
    // System.Void set_freeGlyphRects(System.Collections.Generic.List`1<UnityEngine.TextCore.GlyphRect> value)
    // Offset: 0x1112928
    void set_freeGlyphRects(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* value);
    // public TMPro.FaceInfo_Legacy get_fontInfo()
    // Offset: 0x1112930
    TMPro::FaceInfo_Legacy* get_fontInfo();
    // public System.Int32 get_atlasWidth()
    // Offset: 0x1112938
    int get_atlasWidth();
    // System.Void set_atlasWidth(System.Int32 value)
    // Offset: 0x1112940
    void set_atlasWidth(int value);
    // public System.Int32 get_atlasHeight()
    // Offset: 0x1112948
    int get_atlasHeight();
    // System.Void set_atlasHeight(System.Int32 value)
    // Offset: 0x1112950
    void set_atlasHeight(int value);
    // public System.Int32 get_atlasPadding()
    // Offset: 0x1112958
    int get_atlasPadding();
    // System.Void set_atlasPadding(System.Int32 value)
    // Offset: 0x1112960
    void set_atlasPadding(int value);
    // public UnityEngine.TextCore.LowLevel.GlyphRenderMode get_atlasRenderMode()
    // Offset: 0x1112968
    UnityEngine::TextCore::LowLevel::GlyphRenderMode get_atlasRenderMode();
    // System.Void set_atlasRenderMode(UnityEngine.TextCore.LowLevel.GlyphRenderMode value)
    // Offset: 0x1112970
    void set_atlasRenderMode(UnityEngine::TextCore::LowLevel::GlyphRenderMode value);
    // public TMPro.TMP_FontFeatureTable get_fontFeatureTable()
    // Offset: 0x1112978
    TMPro::TMP_FontFeatureTable* get_fontFeatureTable();
    // System.Void set_fontFeatureTable(TMPro.TMP_FontFeatureTable value)
    // Offset: 0x1112980
    void set_fontFeatureTable(TMPro::TMP_FontFeatureTable* value);
    // public System.Collections.Generic.List`1<TMPro.TMP_FontAsset> get_fallbackFontAssetTable()
    // Offset: 0x1112988
    System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* get_fallbackFontAssetTable();
    // public System.Void set_fallbackFontAssetTable(System.Collections.Generic.List`1<TMPro.TMP_FontAsset> value)
    // Offset: 0x1112990
    void set_fallbackFontAssetTable(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* value);
    // public TMPro.FontAssetCreationSettings get_creationSettings()
    // Offset: 0x1112998
    TMPro::FontAssetCreationSettings get_creationSettings();
    // public System.Void set_creationSettings(TMPro.FontAssetCreationSettings value)
    // Offset: 0x11129A8
    void set_creationSettings(TMPro::FontAssetCreationSettings value);
    // public TMPro.TMP_FontWeightPair[] get_fontWeightTable()
    // Offset: 0x11129C4
    ::Array<TMPro::TMP_FontWeightPair>* get_fontWeightTable();
    // System.Void set_fontWeightTable(TMPro.TMP_FontWeightPair[] value)
    // Offset: 0x11129CC
    void set_fontWeightTable(::Array<TMPro::TMP_FontWeightPair>* value);
    // static public TMPro.TMP_FontAsset CreateFontAsset(UnityEngine.Font font)
    // Offset: 0x11129D4
    static TMPro::TMP_FontAsset* CreateFontAsset(UnityEngine::Font* font);
    // static public TMPro.TMP_FontAsset CreateFontAsset(UnityEngine.Font font, System.Int32 samplingPointSize, System.Int32 atlasPadding, UnityEngine.TextCore.LowLevel.GlyphRenderMode renderMode, System.Int32 atlasWidth, System.Int32 atlasHeight, TMPro.AtlasPopulationMode atlasPopulationMode)
    // Offset: 0x1112A50
    static TMPro::TMP_FontAsset* CreateFontAsset(UnityEngine::Font* font, int samplingPointSize, int atlasPadding, UnityEngine::TextCore::LowLevel::GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, TMPro::AtlasPopulationMode atlasPopulationMode);
    // private System.Void Awake()
    // Offset: 0x1112E1C
    void Awake();
    // System.Void InitializeDictionaryLookupTables()
    // Offset: 0x1113888
    void InitializeDictionaryLookupTables();
    // public System.Void ReadFontAssetDefinition()
    // Offset: 0x111206C
    void ReadFontAssetDefinition();
    // System.Void SortCharacterTable()
    // Offset: 0x1113EA0
    void SortCharacterTable();
    // System.Void SortGlyphTable()
    // Offset: 0x1113FC0
    void SortGlyphTable();
    // System.Void SortGlyphAndCharacterTables()
    // Offset: 0x11140E0
    void SortGlyphAndCharacterTables();
    // public System.Boolean HasCharacter(System.Int32 character)
    // Offset: 0x1114104
    bool HasCharacter(int character);
    // public System.Boolean HasCharacter(System.Char character)
    // Offset: 0x1114178
    bool HasCharacter(::Il2CppChar character);
    // public System.Boolean HasCharacter(System.Char character, System.Boolean searchFallbacks)
    // Offset: 0x11141EC
    bool HasCharacter(::Il2CppChar character, bool searchFallbacks);
    // private System.Boolean HasCharacter_Internal(System.Char character, System.Boolean searchFallbacks)
    // Offset: 0x1114B80
    bool HasCharacter_Internal(::Il2CppChar character, bool searchFallbacks);
    // public System.Boolean HasCharacters(System.String text, out System.Collections.Generic.List`1<System.Char> missingCharacters)
    // Offset: 0x1114CE8
    bool HasCharacters(::Il2CppString* text, ByRef<System::Collections::Generic::List_1<::Il2CppChar>*> missingCharacters);
    // public System.Boolean HasCharacters(System.String text)
    // Offset: 0x1114E24
    bool HasCharacters(::Il2CppString* text);
    // static public System.String GetCharacters(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0x1114EE8
    static ::Il2CppString* GetCharacters(TMPro::TMP_FontAsset* fontAsset);
    // static public System.Int32[] GetCharactersArray(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0x1114FC8
    static ::Array<int>* GetCharactersArray(TMPro::TMP_FontAsset* fontAsset);
    // public System.Boolean TryAddCharacters(System.UInt32[] unicodes)
    // Offset: 0x11150B0
    bool TryAddCharacters(::Array<uint>* unicodes);
    // public System.Boolean TryAddCharacters(System.UInt32[] unicodes, out System.UInt32[] missingUnicodes)
    // Offset: 0x11150D8
    bool TryAddCharacters(::Array<uint>* unicodes, ByRef<::Array<uint>*> missingUnicodes);
    // public System.Boolean TryAddCharacters(System.String characters)
    // Offset: 0x11157DC
    bool TryAddCharacters(::Il2CppString* characters);
    // public System.Boolean TryAddCharacters(System.String characters, out System.String missingCharacters)
    // Offset: 0x1115804
    bool TryAddCharacters(::Il2CppString* characters, ByRef<::Il2CppString*> missingCharacters);
    // System.Boolean TryAddCharacter_Internal(System.UInt32 unicode)
    // Offset: 0x1115E44
    bool TryAddCharacter_Internal(uint unicode);
    // TMPro.TMP_Character AddCharacter_Internal(System.UInt32 unicode, UnityEngine.TextCore.Glyph glyph)
    // Offset: 0x111615C
    TMPro::TMP_Character* AddCharacter_Internal(uint unicode, UnityEngine::TextCore::Glyph* glyph);
    // System.Boolean TryAddCharacterInternal(System.UInt32 unicode, out TMPro.TMP_Character character)
    // Offset: 0x11145BC
    bool TryAddCharacterInternal(uint unicode, ByRef<TMPro::TMP_Character*> character);
    // System.UInt32 GetGlyphIndex(System.UInt32 unicode)
    // Offset: 0x1116B34
    uint GetGlyphIndex(uint unicode);
    // System.Void UpdateAtlasTexture()
    // Offset: 0x1116474
    void UpdateAtlasTexture();
    // System.Void UpdateGlyphAdjustmentRecords(System.UInt32 unicode, System.UInt32 glyphIndex)
    // Offset: 0x1116734
    void UpdateGlyphAdjustmentRecords(uint unicode, uint glyphIndex);
    // public System.Void ClearFontAssetData(System.Boolean setAtlasSizeToZero)
    // Offset: 0x1116D54
    void ClearFontAssetData(bool setAtlasSizeToZero);
    // private System.Void UpgradeFontAsset()
    // Offset: 0x1112EB4
    void UpgradeFontAsset();
    // private System.Void UpgradeGlyphAdjustmentTableToFontFeatureTable()
    // Offset: 0x1113C34
    void UpgradeGlyphAdjustmentTableToFontFeatureTable();
    // public System.Void .ctor()
    // Offset: 0x11172B0
    // Implemented from: TMPro.TMP_Asset
    // Base method: System.Void TMP_Asset::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_FontAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_FontAsset*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1117444
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // TMPro.TMP_FontAsset
  #pragma pack(pop)
  static check_size<sizeof(TMP_FontAsset), 480 + sizeof(System::Collections::Generic::List_1<TMPro::TMP_Character*>*)> __TMPro_TMP_FontAssetSizeCheck;
  static_assert(sizeof(TMP_FontAsset) == 0x1E8);
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_FontAsset*, "TMPro", "TMP_FontAsset");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_version
// Il2CppName: set_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::Il2CppString*)>(&TMPro::TMP_FontAsset::set_version)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_sourceFontFile
// Il2CppName: get_sourceFontFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Font* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_sourceFontFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_sourceFontFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_sourceFontFile
// Il2CppName: set_sourceFontFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(UnityEngine::Font*)>(&TMPro::TMP_FontAsset::set_sourceFontFile)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_sourceFontFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasPopulationMode
// Il2CppName: get_atlasPopulationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::AtlasPopulationMode (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasPopulationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasPopulationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasPopulationMode
// Il2CppName: set_atlasPopulationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(TMPro::AtlasPopulationMode)>(&TMPro::TMP_FontAsset::set_atlasPopulationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "AtlasPopulationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasPopulationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_faceInfo
// Il2CppName: get_faceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextCore::FaceInfo (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_faceInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_faceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_faceInfo
// Il2CppName: set_faceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(UnityEngine::TextCore::FaceInfo)>(&TMPro::TMP_FontAsset::set_faceInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "FaceInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_faceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_glyphTable
// Il2CppName: get_glyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_glyphTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_glyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_glyphTable
// Il2CppName: set_glyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*)>(&TMPro::TMP_FontAsset::set_glyphTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "Glyph")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_glyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_glyphLookupTable
// Il2CppName: get_glyphLookupTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_glyphLookupTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_glyphLookupTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_characterTable
// Il2CppName: get_characterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_Character*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_characterTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_characterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_characterTable
// Il2CppName: set_characterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(System::Collections::Generic::List_1<TMPro::TMP_Character*>*)>(&TMPro::TMP_FontAsset::set_characterTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("TMPro", "TMP_Character")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_characterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_characterLookupTable
// Il2CppName: get_characterLookupTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_characterLookupTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_characterLookupTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasTexture
// Il2CppName: get_atlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasTextures
// Il2CppName: get_atlasTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Texture2D*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasTextures
// Il2CppName: set_atlasTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::Array<UnityEngine::Texture2D*>*)>(&TMPro::TMP_FontAsset::set_atlasTextures)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_usedGlyphRects
// Il2CppName: get_usedGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_usedGlyphRects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_usedGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_usedGlyphRects
// Il2CppName: set_usedGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*)>(&TMPro::TMP_FontAsset::set_usedGlyphRects)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "GlyphRect")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_usedGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_freeGlyphRects
// Il2CppName: get_freeGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_freeGlyphRects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_freeGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_freeGlyphRects
// Il2CppName: set_freeGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*)>(&TMPro::TMP_FontAsset::set_freeGlyphRects)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "GlyphRect")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_freeGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_fontInfo
// Il2CppName: get_fontInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::FaceInfo_Legacy* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_fontInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_fontInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasWidth
// Il2CppName: get_atlasWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasWidth
// Il2CppName: set_atlasWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(int)>(&TMPro::TMP_FontAsset::set_atlasWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasHeight
// Il2CppName: get_atlasHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasHeight
// Il2CppName: set_atlasHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(int)>(&TMPro::TMP_FontAsset::set_atlasHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasPadding
// Il2CppName: get_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasPadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasPadding
// Il2CppName: set_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(int)>(&TMPro::TMP_FontAsset::set_atlasPadding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_atlasRenderMode
// Il2CppName: get_atlasRenderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextCore::LowLevel::GlyphRenderMode (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_atlasRenderMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_atlasRenderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_atlasRenderMode
// Il2CppName: set_atlasRenderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(UnityEngine::TextCore::LowLevel::GlyphRenderMode)>(&TMPro::TMP_FontAsset::set_atlasRenderMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.LowLevel", "GlyphRenderMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_atlasRenderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_fontFeatureTable
// Il2CppName: get_fontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontFeatureTable* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_fontFeatureTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_fontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_fontFeatureTable
// Il2CppName: set_fontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(TMPro::TMP_FontFeatureTable*)>(&TMPro::TMP_FontAsset::set_fontFeatureTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontFeatureTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_fontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_fallbackFontAssetTable
// Il2CppName: get_fallbackFontAssetTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_fallbackFontAssetTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_fallbackFontAssetTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_fallbackFontAssetTable
// Il2CppName: set_fallbackFontAssetTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*)>(&TMPro::TMP_FontAsset::set_fallbackFontAssetTable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_fallbackFontAssetTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_creationSettings
// Il2CppName: get_creationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::FontAssetCreationSettings (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_creationSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_creationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_creationSettings
// Il2CppName: set_creationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(TMPro::FontAssetCreationSettings)>(&TMPro::TMP_FontAsset::set_creationSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "FontAssetCreationSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_creationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::get_fontWeightTable
// Il2CppName: get_fontWeightTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<TMPro::TMP_FontWeightPair>* (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::get_fontWeightTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "get_fontWeightTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::set_fontWeightTable
// Il2CppName: set_fontWeightTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(::Array<TMPro::TMP_FontWeightPair>*)>(&TMPro::TMP_FontAsset::set_fontWeightTable)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontWeightPair"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "set_fontWeightTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::CreateFontAsset
// Il2CppName: CreateFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)(UnityEngine::Font*)>(&TMPro::TMP_FontAsset::CreateFontAsset)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "CreateFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::CreateFontAsset
// Il2CppName: CreateFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)(UnityEngine::Font*, int, int, UnityEngine::TextCore::LowLevel::GlyphRenderMode, int, int, TMPro::AtlasPopulationMode)>(&TMPro::TMP_FontAsset::CreateFontAsset)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    static auto* samplingPointSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasPadding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderMode = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore.LowLevel", "GlyphRenderMode")->byval_arg;
    static auto* atlasWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasPopulationMode = &::il2cpp_utils::GetClassFromName("TMPro", "AtlasPopulationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "CreateFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font, samplingPointSize, atlasPadding, renderMode, atlasWidth, atlasHeight, atlasPopulationMode});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::InitializeDictionaryLookupTables
// Il2CppName: InitializeDictionaryLookupTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::InitializeDictionaryLookupTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "InitializeDictionaryLookupTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::ReadFontAssetDefinition
// Il2CppName: ReadFontAssetDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::ReadFontAssetDefinition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "ReadFontAssetDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::SortCharacterTable
// Il2CppName: SortCharacterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::SortCharacterTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "SortCharacterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::SortGlyphTable
// Il2CppName: SortGlyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::SortGlyphTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "SortGlyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::SortGlyphAndCharacterTables
// Il2CppName: SortGlyphAndCharacterTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::SortGlyphAndCharacterTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "SortGlyphAndCharacterTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacter
// Il2CppName: HasCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(int)>(&TMPro::TMP_FontAsset::HasCharacter)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacter
// Il2CppName: HasCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Il2CppChar)>(&TMPro::TMP_FontAsset::HasCharacter)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacter
// Il2CppName: HasCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Il2CppChar, bool)>(&TMPro::TMP_FontAsset::HasCharacter)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* searchFallbacks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character, searchFallbacks});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacter_Internal
// Il2CppName: HasCharacter_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Il2CppChar, bool)>(&TMPro::TMP_FontAsset::HasCharacter_Internal)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* searchFallbacks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacter_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character, searchFallbacks});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacters
// Il2CppName: HasCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Il2CppString*, ByRef<System::Collections::Generic::List_1<::Il2CppChar>*>)>(&TMPro::TMP_FontAsset::HasCharacters)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* missingCharacters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, missingCharacters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::HasCharacters
// Il2CppName: HasCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Il2CppString*)>(&TMPro::TMP_FontAsset::HasCharacters)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "HasCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::GetCharacters
// Il2CppName: GetCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(TMPro::TMP_FontAsset*)>(&TMPro::TMP_FontAsset::GetCharacters)> {
  static const MethodInfo* get() {
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "GetCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontAsset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::GetCharactersArray
// Il2CppName: GetCharactersArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (*)(TMPro::TMP_FontAsset*)>(&TMPro::TMP_FontAsset::GetCharactersArray)> {
  static const MethodInfo* get() {
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "GetCharactersArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontAsset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Array<uint>*)>(&TMPro::TMP_FontAsset::TryAddCharacters)> {
  static const MethodInfo* get() {
    static auto* unicodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicodes});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Array<uint>*, ByRef<::Array<uint>*>)>(&TMPro::TMP_FontAsset::TryAddCharacters)> {
  static const MethodInfo* get() {
    static auto* unicodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* missingUnicodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicodes, missingUnicodes});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Il2CppString*)>(&TMPro::TMP_FontAsset::TryAddCharacters)> {
  static const MethodInfo* get() {
    static auto* characters = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(::Il2CppString*, ByRef<::Il2CppString*>)>(&TMPro::TMP_FontAsset::TryAddCharacters)> {
  static const MethodInfo* get() {
    static auto* characters = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* missingCharacters = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characters, missingCharacters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacter_Internal
// Il2CppName: TryAddCharacter_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(uint)>(&TMPro::TMP_FontAsset::TryAddCharacter_Internal)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacter_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::AddCharacter_Internal
// Il2CppName: AddCharacter_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Character* (TMPro::TMP_FontAsset::*)(uint, UnityEngine::TextCore::Glyph*)>(&TMPro::TMP_FontAsset::AddCharacter_Internal)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* glyph = &::il2cpp_utils::GetClassFromName("UnityEngine.TextCore", "Glyph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "AddCharacter_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode, glyph});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::TryAddCharacterInternal
// Il2CppName: TryAddCharacterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_FontAsset::*)(uint, ByRef<TMPro::TMP_Character*>)>(&TMPro::TMP_FontAsset::TryAddCharacterInternal)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_Character")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "TryAddCharacterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode, character});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::GetGlyphIndex
// Il2CppName: GetGlyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMPro::TMP_FontAsset::*)(uint)>(&TMPro::TMP_FontAsset::GetGlyphIndex)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "GetGlyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateAtlasTexture
// Il2CppName: UpdateAtlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::UpdateAtlasTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateAtlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords
// Il2CppName: UpdateGlyphAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(uint, uint)>(&TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords)> {
  static const MethodInfo* get() {
    static auto* unicode = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* glyphIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpdateGlyphAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unicode, glyphIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::ClearFontAssetData
// Il2CppName: ClearFontAssetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)(bool)>(&TMPro::TMP_FontAsset::ClearFontAssetData)> {
  static const MethodInfo* get() {
    static auto* setAtlasSizeToZero = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "ClearFontAssetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setAtlasSizeToZero});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpgradeFontAsset
// Il2CppName: UpgradeFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::UpgradeFontAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpgradeFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::UpgradeGlyphAdjustmentTableToFontFeatureTable
// Il2CppName: UpgradeGlyphAdjustmentTableToFontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_FontAsset::*)()>(&TMPro::TMP_FontAsset::UpgradeGlyphAdjustmentTableToFontFeatureTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), "UpgradeGlyphAdjustmentTableToFontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: TMPro::TMP_FontAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro::TMP_FontAsset::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_FontAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
