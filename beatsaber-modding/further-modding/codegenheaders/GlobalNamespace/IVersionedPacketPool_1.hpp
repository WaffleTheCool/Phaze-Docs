// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: IPacketPool
#include "GlobalNamespace/IPacketPool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: IVersionedPacketPool`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IVersionedPacketPool_1/*, public GlobalNamespace::IPacketPool*/ {
    public:
    // Creating value type constructor for type: IVersionedPacketPool_1
    IVersionedPacketPool_1() noexcept {}
    // Creating interface conversion operator: operator GlobalNamespace::IPacketPool
    operator GlobalNamespace::IPacketPool() noexcept {
      return *reinterpret_cast<GlobalNamespace::IPacketPool*>(this);
    }
    // public T Obtain(System.UInt32 version)
    // Offset: 0xFFFFFFFF
    T Obtain(uint version) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVersionedPacketPool_1::Obtain");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Obtain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(version)})));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<T, false>(___instance_arg, ___internal__method, version);
    }
    // public System.Void Release(T t)
    // Offset: 0xFFFFFFFF
    void Release(T t) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVersionedPacketPool_1::Release");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, t);
    }
  }; // IVersionedPacketPool`1
  // Could not write size check! Type: IVersionedPacketPool`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::IVersionedPacketPool_1, "", "IVersionedPacketPool`1");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
