// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Completed includes
// Type namespace: RootMotion
namespace RootMotion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.LayerMaskExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class LayerMaskExtensions : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: LayerMaskExtensions
    LayerMaskExtensions() noexcept {}
    // static public System.Boolean Contains(UnityEngine.LayerMask mask, System.Int32 layer)
    // Offset: 0x1AECB58
    static bool Contains(UnityEngine::LayerMask mask, int layer);
    // static public UnityEngine.LayerMask Create(params System.String[] layerNames)
    // Offset: 0x1AECBB0
    static UnityEngine::LayerMask Create(::Array<::Il2CppString*>* layerNames);
    // Creating initializer_list -> params proxy for: UnityEngine.LayerMask Create(params System.String[] layerNames)
    static UnityEngine::LayerMask Create(std::initializer_list<::Il2CppString*> layerNames);
    // Creating TArgs -> initializer_list proxy for: UnityEngine.LayerMask Create(params System.String[] layerNames)
    template<class ...TParams>
    static UnityEngine::LayerMask Create(TParams&&... layerNames) {
      return Create({layerNames...});
    }
    // static public UnityEngine.LayerMask Create(params System.Int32[] layerNumbers)
    // Offset: 0x1AECC7C
    static UnityEngine::LayerMask Create(::Array<int>* layerNumbers);
    // Creating initializer_list -> params proxy for: UnityEngine.LayerMask Create(params System.Int32[] layerNumbers)
    static UnityEngine::LayerMask Create(std::initializer_list<int> layerNumbers);
    // static public UnityEngine.LayerMask NamesToMask(params System.String[] layerNames)
    // Offset: 0x1AECBC8
    static UnityEngine::LayerMask NamesToMask(::Array<::Il2CppString*>* layerNames);
    // Creating initializer_list -> params proxy for: UnityEngine.LayerMask NamesToMask(params System.String[] layerNames)
    static UnityEngine::LayerMask NamesToMask(std::initializer_list<::Il2CppString*> layerNames);
    // Creating TArgs -> initializer_list proxy for: UnityEngine.LayerMask NamesToMask(params System.String[] layerNames)
    template<class ...TParams>
    static UnityEngine::LayerMask NamesToMask(TParams&&... layerNames) {
      return NamesToMask({layerNames...});
    }
    // static public UnityEngine.LayerMask LayerNumbersToMask(params System.Int32[] layerNumbers)
    // Offset: 0x1AECC94
    static UnityEngine::LayerMask LayerNumbersToMask(::Array<int>* layerNumbers);
    // Creating initializer_list -> params proxy for: UnityEngine.LayerMask LayerNumbersToMask(params System.Int32[] layerNumbers)
    static UnityEngine::LayerMask LayerNumbersToMask(std::initializer_list<int> layerNumbers);
    // Creating TArgs -> initializer_list proxy for: UnityEngine.LayerMask LayerNumbersToMask(params System.Int32[] layerNumbers)
    template<class ...TParams>
    static UnityEngine::LayerMask LayerNumbersToMask(TParams&&... layerNumbers) {
      return LayerNumbersToMask({layerNumbers...});
    }
    // static public UnityEngine.LayerMask Inverse(UnityEngine.LayerMask original)
    // Offset: 0x1AECD38
    static UnityEngine::LayerMask Inverse(UnityEngine::LayerMask original);
    // static public UnityEngine.LayerMask AddToMask(UnityEngine.LayerMask original, params System.String[] layerNames)
    // Offset: 0x1AECD64
    static UnityEngine::LayerMask AddToMask(UnityEngine::LayerMask original, ::Array<::Il2CppString*>* layerNames);
    // Creating initializer_list -> params proxy for: UnityEngine.LayerMask AddToMask(UnityEngine.LayerMask original, params System.String[] layerNames)
    static UnityEngine::LayerMask AddToMask(UnityEngine::LayerMask original, std::initializer_list<::Il2CppString*> layerNames);
    // Creating TArgs -> initializer_list proxy for: UnityEngine.LayerMask AddToMask(UnityEngine.LayerMask original, params System.String[] layerNames)
    template<class ...TParams>
    static UnityEngine::LayerMask AddToMask(UnityEngine::LayerMask original, TParams&&... layerNames) {
      return AddToMask(original, {layerNames...});
    }
    // static public UnityEngine.LayerMask RemoveFromMask(UnityEngine.LayerMask original, params System.String[] layerNames)
    // Offset: 0x1AECDB4
    static UnityEngine::LayerMask RemoveFromMask(UnityEngine::LayerMask original, ::Array<::Il2CppString*>* layerNames);
    // Creating initializer_list -> params proxy for: UnityEngine.LayerMask RemoveFromMask(UnityEngine.LayerMask original, params System.String[] layerNames)
    static UnityEngine::LayerMask RemoveFromMask(UnityEngine::LayerMask original, std::initializer_list<::Il2CppString*> layerNames);
    // Creating TArgs -> initializer_list proxy for: UnityEngine.LayerMask RemoveFromMask(UnityEngine.LayerMask original, params System.String[] layerNames)
    template<class ...TParams>
    static UnityEngine::LayerMask RemoveFromMask(UnityEngine::LayerMask original, TParams&&... layerNames) {
      return RemoveFromMask(original, {layerNames...});
    }
    // static public System.String[] MaskToNames(UnityEngine.LayerMask original)
    // Offset: 0x1AECE20
    static ::Array<::Il2CppString*>* MaskToNames(UnityEngine::LayerMask original);
    // static public System.Int32[] MaskToNumbers(UnityEngine.LayerMask original)
    // Offset: 0x1AECF14
    static ::Array<int>* MaskToNumbers(UnityEngine::LayerMask original);
    // static public System.String MaskToString(UnityEngine.LayerMask original)
    // Offset: 0x1AECFEC
    static ::Il2CppString* MaskToString(UnityEngine::LayerMask original);
    // static public System.String MaskToString(UnityEngine.LayerMask original, System.String delimiter)
    // Offset: 0x1AED04C
    static ::Il2CppString* MaskToString(UnityEngine::LayerMask original, ::Il2CppString* delimiter);
  }; // RootMotion.LayerMaskExtensions
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::LayerMaskExtensions*, "RootMotion", "LayerMaskExtensions");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::LayerMask, int)>(&RootMotion::LayerMaskExtensions::Contains)> {
  static const MethodInfo* get() {
    static auto* mask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mask, layer});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (*)(::Array<::Il2CppString*>*)>(&RootMotion::LayerMaskExtensions::Create)> {
  static const MethodInfo* get() {
    static auto* layerNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerNames});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (*)(::Array<int>*)>(&RootMotion::LayerMaskExtensions::Create)> {
  static const MethodInfo* get() {
    static auto* layerNumbers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerNumbers});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::NamesToMask
// Il2CppName: NamesToMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (*)(::Array<::Il2CppString*>*)>(&RootMotion::LayerMaskExtensions::NamesToMask)> {
  static const MethodInfo* get() {
    static auto* layerNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "NamesToMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerNames});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::LayerNumbersToMask
// Il2CppName: LayerNumbersToMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (*)(::Array<int>*)>(&RootMotion::LayerMaskExtensions::LayerNumbersToMask)> {
  static const MethodInfo* get() {
    static auto* layerNumbers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "LayerNumbersToMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerNumbers});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::Inverse
// Il2CppName: Inverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (*)(UnityEngine::LayerMask)>(&RootMotion::LayerMaskExtensions::Inverse)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "Inverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::AddToMask
// Il2CppName: AddToMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (*)(UnityEngine::LayerMask, ::Array<::Il2CppString*>*)>(&RootMotion::LayerMaskExtensions::AddToMask)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* layerNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "AddToMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, layerNames});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::RemoveFromMask
// Il2CppName: RemoveFromMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (*)(UnityEngine::LayerMask, ::Array<::Il2CppString*>*)>(&RootMotion::LayerMaskExtensions::RemoveFromMask)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* layerNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "RemoveFromMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, layerNames});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::MaskToNames
// Il2CppName: MaskToNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(UnityEngine::LayerMask)>(&RootMotion::LayerMaskExtensions::MaskToNames)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "MaskToNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::MaskToNumbers
// Il2CppName: MaskToNumbers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (*)(UnityEngine::LayerMask)>(&RootMotion::LayerMaskExtensions::MaskToNumbers)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "MaskToNumbers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::MaskToString
// Il2CppName: MaskToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::LayerMask)>(&RootMotion::LayerMaskExtensions::MaskToString)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "MaskToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original});
  }
};
// Writing MetadataGetter for method: RootMotion::LayerMaskExtensions::MaskToString
// Il2CppName: MaskToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::LayerMask, ::Il2CppString*)>(&RootMotion::LayerMaskExtensions::MaskToString)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* delimiter = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::LayerMaskExtensions*), "MaskToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, delimiter});
  }
};
